
ELEVATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009088  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08009238  08009238  00019238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009388  08009388  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009388  08009388  00019388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009390  08009390  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009390  08009390  00019390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009394  08009394  00019394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08009398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
 10 .bss          0000542c  200000e8  200000e8  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005514  20005514  000200e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025da3  00000000  00000000  0002015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004dbc  00000000  00000000  00045efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f28  00000000  00000000  0004acc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000185b  00000000  00000000  0004cbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002957d  00000000  00000000  0004e443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025f1d  00000000  00000000  000779c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fcfb5  00000000  00000000  0009d8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000087e4  00000000  00000000  0019a894  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  001a3078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000e8 	.word	0x200000e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009220 	.word	0x08009220

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	08009220 	.word	0x08009220

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b970 	b.w	80004e8 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	460d      	mov	r5, r1
 8000228:	4604      	mov	r4, r0
 800022a:	460f      	mov	r7, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4694      	mov	ip, r2
 8000234:	d965      	bls.n	8000302 <__udivmoddi4+0xe2>
 8000236:	fab2 f382 	clz	r3, r2
 800023a:	b143      	cbz	r3, 800024e <__udivmoddi4+0x2e>
 800023c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000240:	f1c3 0220 	rsb	r2, r3, #32
 8000244:	409f      	lsls	r7, r3
 8000246:	fa20 f202 	lsr.w	r2, r0, r2
 800024a:	4317      	orrs	r7, r2
 800024c:	409c      	lsls	r4, r3
 800024e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000252:	fa1f f58c 	uxth.w	r5, ip
 8000256:	fbb7 f1fe 	udiv	r1, r7, lr
 800025a:	0c22      	lsrs	r2, r4, #16
 800025c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000260:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000264:	fb01 f005 	mul.w	r0, r1, r5
 8000268:	4290      	cmp	r0, r2
 800026a:	d90a      	bls.n	8000282 <__udivmoddi4+0x62>
 800026c:	eb1c 0202 	adds.w	r2, ip, r2
 8000270:	f101 37ff 	add.w	r7, r1, #4294967295
 8000274:	f080 811c 	bcs.w	80004b0 <__udivmoddi4+0x290>
 8000278:	4290      	cmp	r0, r2
 800027a:	f240 8119 	bls.w	80004b0 <__udivmoddi4+0x290>
 800027e:	3902      	subs	r1, #2
 8000280:	4462      	add	r2, ip
 8000282:	1a12      	subs	r2, r2, r0
 8000284:	b2a4      	uxth	r4, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000292:	fb00 f505 	mul.w	r5, r0, r5
 8000296:	42a5      	cmp	r5, r4
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x90>
 800029a:	eb1c 0404 	adds.w	r4, ip, r4
 800029e:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a2:	f080 8107 	bcs.w	80004b4 <__udivmoddi4+0x294>
 80002a6:	42a5      	cmp	r5, r4
 80002a8:	f240 8104 	bls.w	80004b4 <__udivmoddi4+0x294>
 80002ac:	4464      	add	r4, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b4:	1b64      	subs	r4, r4, r5
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11e      	cbz	r6, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40dc      	lsrs	r4, r3
 80002bc:	2300      	movs	r3, #0
 80002be:	e9c6 4300 	strd	r4, r3, [r6]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d908      	bls.n	80002dc <__udivmoddi4+0xbc>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80ed 	beq.w	80004aa <__udivmoddi4+0x28a>
 80002d0:	2100      	movs	r1, #0
 80002d2:	e9c6 0500 	strd	r0, r5, [r6]
 80002d6:	4608      	mov	r0, r1
 80002d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002dc:	fab3 f183 	clz	r1, r3
 80002e0:	2900      	cmp	r1, #0
 80002e2:	d149      	bne.n	8000378 <__udivmoddi4+0x158>
 80002e4:	42ab      	cmp	r3, r5
 80002e6:	d302      	bcc.n	80002ee <__udivmoddi4+0xce>
 80002e8:	4282      	cmp	r2, r0
 80002ea:	f200 80f8 	bhi.w	80004de <__udivmoddi4+0x2be>
 80002ee:	1a84      	subs	r4, r0, r2
 80002f0:	eb65 0203 	sbc.w	r2, r5, r3
 80002f4:	2001      	movs	r0, #1
 80002f6:	4617      	mov	r7, r2
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d0e2      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000300:	e7df      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000302:	b902      	cbnz	r2, 8000306 <__udivmoddi4+0xe6>
 8000304:	deff      	udf	#255	; 0xff
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	2b00      	cmp	r3, #0
 800030c:	f040 8090 	bne.w	8000430 <__udivmoddi4+0x210>
 8000310:	1a8a      	subs	r2, r1, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2101      	movs	r1, #1
 800031c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000320:	fb07 2015 	mls	r0, r7, r5, r2
 8000324:	0c22      	lsrs	r2, r4, #16
 8000326:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800032a:	fb0e f005 	mul.w	r0, lr, r5
 800032e:	4290      	cmp	r0, r2
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x124>
 8000332:	eb1c 0202 	adds.w	r2, ip, r2
 8000336:	f105 38ff 	add.w	r8, r5, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4290      	cmp	r0, r2
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2b8>
 8000342:	4645      	mov	r5, r8
 8000344:	1a12      	subs	r2, r2, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb2 f0f7 	udiv	r0, r2, r7
 800034c:	fb07 2210 	mls	r2, r7, r0, r2
 8000350:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x14e>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 32ff 	add.w	r2, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x14c>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2c2>
 800036c:	4610      	mov	r0, r2
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000376:	e79f      	b.n	80002b8 <__udivmoddi4+0x98>
 8000378:	f1c1 0720 	rsb	r7, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa05 f401 	lsl.w	r4, r5, r1
 800038a:	fa20 f307 	lsr.w	r3, r0, r7
 800038e:	40fd      	lsrs	r5, r7
 8000390:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fbb5 f8f9 	udiv	r8, r5, r9
 800039a:	fa1f fe8c 	uxth.w	lr, ip
 800039e:	fb09 5518 	mls	r5, r9, r8, r5
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	fa00 f001 	lsl.w	r0, r0, r1
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1c 0404 	adds.w	r4, ip, r4
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2b4>
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2b4>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	1b64      	subs	r4, r4, r5
 80003d2:	b29d      	uxth	r5, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e4:	45a6      	cmp	lr, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2ac>
 80003f2:	45a6      	cmp	lr, r4
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2ac>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000402:	eba4 040e 	sub.w	r4, r4, lr
 8000406:	42ac      	cmp	r4, r5
 8000408:	46c8      	mov	r8, r9
 800040a:	46ae      	mov	lr, r5
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x29c>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x298>
 8000410:	b156      	cbz	r6, 8000428 <__udivmoddi4+0x208>
 8000412:	ebb0 0208 	subs.w	r2, r0, r8
 8000416:	eb64 040e 	sbc.w	r4, r4, lr
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	40ca      	lsrs	r2, r1
 8000420:	40cc      	lsrs	r4, r1
 8000422:	4317      	orrs	r7, r2
 8000424:	e9c6 7400 	strd	r7, r4, [r6]
 8000428:	4618      	mov	r0, r3
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	f1c3 0120 	rsb	r1, r3, #32
 8000434:	fa02 fc03 	lsl.w	ip, r2, r3
 8000438:	fa20 f201 	lsr.w	r2, r0, r1
 800043c:	fa25 f101 	lsr.w	r1, r5, r1
 8000440:	409d      	lsls	r5, r3
 8000442:	432a      	orrs	r2, r5
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1510 	mls	r5, r7, r0, r1
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800045a:	fb00 f50e 	mul.w	r5, r0, lr
 800045e:	428d      	cmp	r5, r1
 8000460:	fa04 f403 	lsl.w	r4, r4, r3
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x258>
 8000466:	eb1c 0101 	adds.w	r1, ip, r1
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 8000470:	428d      	cmp	r5, r1
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 8000474:	3802      	subs	r0, #2
 8000476:	4461      	add	r1, ip
 8000478:	1b49      	subs	r1, r1, r5
 800047a:	b292      	uxth	r2, r2
 800047c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000480:	fb07 1115 	mls	r1, r7, r5, r1
 8000484:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000488:	fb05 f10e 	mul.w	r1, r5, lr
 800048c:	4291      	cmp	r1, r2
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x282>
 8000490:	eb1c 0202 	adds.w	r2, ip, r2
 8000494:	f105 38ff 	add.w	r8, r5, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2a8>
 800049a:	4291      	cmp	r1, r2
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2a8>
 800049e:	3d02      	subs	r5, #2
 80004a0:	4462      	add	r2, ip
 80004a2:	1a52      	subs	r2, r2, r1
 80004a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0xfc>
 80004aa:	4631      	mov	r1, r6
 80004ac:	4630      	mov	r0, r6
 80004ae:	e708      	b.n	80002c2 <__udivmoddi4+0xa2>
 80004b0:	4639      	mov	r1, r7
 80004b2:	e6e6      	b.n	8000282 <__udivmoddi4+0x62>
 80004b4:	4610      	mov	r0, r2
 80004b6:	e6fb      	b.n	80002b0 <__udivmoddi4+0x90>
 80004b8:	4548      	cmp	r0, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c4:	3b01      	subs	r3, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c8:	4645      	mov	r5, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x282>
 80004cc:	462b      	mov	r3, r5
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1da>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x258>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d8:	3d02      	subs	r5, #2
 80004da:	4462      	add	r2, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x124>
 80004de:	4608      	mov	r0, r1
 80004e0:	e70a      	b.n	80002f8 <__udivmoddi4+0xd8>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x14e>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <get_button>:
{BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE,BUTTON_RELEASE};

// get_button(gpio, pin, button번호)
// 완전히 눌렀다 떼면 BUTTON_RELEASE(1) 을 return
int get_button(GPIO_TypeDef *GPIO, uint16_t GPIO_PIN, uint8_t button_number)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	807b      	strh	r3, [r7, #2]
 80004f8:	4613      	mov	r3, r2
 80004fa:	707b      	strb	r3, [r7, #1]
	unsigned char curr_state;

	curr_state=HAL_GPIO_ReadPin(GPIO, GPIO_PIN);  // 0, 1
 80004fc:	887b      	ldrh	r3, [r7, #2]
 80004fe:	4619      	mov	r1, r3
 8000500:	6878      	ldr	r0, [r7, #4]
 8000502:	f003 f82f 	bl	8003564 <HAL_GPIO_ReadPin>
 8000506:	4603      	mov	r3, r0
 8000508:	73fb      	strb	r3, [r7, #15]
	// 버튼이 눌려졌으나 처음 상태
	if (curr_state == BUTTON_PRESS && button_status[button_number]==BUTTON_RELEASE)
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d10d      	bne.n	800052c <get_button+0x40>
 8000510:	787b      	ldrb	r3, [r7, #1]
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <get_button+0x6c>)
 8000514:	5cd3      	ldrb	r3, [r2, r3]
 8000516:	2b01      	cmp	r3, #1
 8000518:	d108      	bne.n	800052c <get_button+0x40>
	{
		HAL_Delay(80);  // noise가 지나가기를 기다린다.
 800051a:	2050      	movs	r0, #80	; 0x50
 800051c:	f001 fd2a 	bl	8001f74 <HAL_Delay>
		button_status[button_number]=BUTTON_PRESS;   // 현재의 버튼 상태를 저장
 8000520:	787b      	ldrb	r3, [r7, #1]
 8000522:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <get_button+0x6c>)
 8000524:	2100      	movs	r1, #0
 8000526:	54d1      	strb	r1, [r2, r3]
		return BUTTON_RELEASE;  // 버튼이 눌려진 상태이나 아직은 noise상태로 인정
 8000528:	2301      	movs	r3, #1
 800052a:	e011      	b.n	8000550 <get_button+0x64>
	}
	else if (curr_state == BUTTON_RELEASE && button_status[button_number]==BUTTON_PRESS)
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d10d      	bne.n	800054e <get_button+0x62>
 8000532:	787b      	ldrb	r3, [r7, #1]
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <get_button+0x6c>)
 8000536:	5cd3      	ldrb	r3, [r2, r3]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d108      	bne.n	800054e <get_button+0x62>
	{     // 1. 이전에 버튼이 눌려진 상태였고 지금은 버튼을 뗀 상태 이면
		HAL_Delay(30);  // noise가 지나가기를 기다린다.
 800053c:	201e      	movs	r0, #30
 800053e:	f001 fd19 	bl	8001f74 <HAL_Delay>
		button_status[button_number]=BUTTON_RELEASE;  // 2. button_status table을 초기화 하고
 8000542:	787b      	ldrb	r3, [r7, #1]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <get_button+0x6c>)
 8000546:	2101      	movs	r1, #1
 8000548:	54d1      	strb	r1, [r2, r3]
		return BUTTON_PRESS;   // 3. 버튼을 1번 눌렀다 뗀것으로 인정 한다.
 800054a:	2300      	movs	r3, #0
 800054c:	e000      	b.n	8000550 <get_button+0x64>
	}
	return BUTTON_RELEASE;
 800054e:	2301      	movs	r3, #1
}
 8000550:	4618      	mov	r0, r3
 8000552:	3710      	adds	r7, #16
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000000 	.word	0x20000000

0800055c <write_column_data>:
		0b00000000
#endif
};

void write_column_data(int col)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; i++)
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	e01f      	b.n	80005aa <write_column_data+0x4e>
	{
#if 1
		// common 애노우드
		if (i == col)
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	429a      	cmp	r2, r3
 8000570:	d10c      	bne.n	800058c <write_column_data+0x30>
		{
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);	// on
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <write_column_data+0x60>)
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800057a:	4a11      	ldr	r2, [pc, #68]	; (80005c0 <write_column_data+0x64>)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000582:	2200      	movs	r2, #0
 8000584:	4619      	mov	r1, r3
 8000586:	f003 f805 	bl	8003594 <HAL_GPIO_WritePin>
 800058a:	e00b      	b.n	80005a4 <write_column_data+0x48>
		}
		else
		{
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 1);	// off
 800058c:	4a0b      	ldr	r2, [pc, #44]	; (80005bc <write_column_data+0x60>)
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <write_column_data+0x64>)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800059c:	2201      	movs	r2, #1
 800059e:	4619      	mov	r1, r3
 80005a0:	f002 fff8 	bl	8003594 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++)
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	3301      	adds	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2b07      	cmp	r3, #7
 80005ae:	dddc      	ble.n	800056a <write_column_data+0xe>
		{
			HAL_GPIO_WritePin(col_port[i], col_pin[i], 0);	// off
		}
	}
#endif
}
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000058 	.word	0x20000058

080005c4 <write_row_data>:

// 0b00111100
void write_row_data(unsigned char data)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
	unsigned char d;
	d = data;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < 8; i++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e023      	b.n	8000620 <write_row_data+0x5c>
	{
		if (d & (1 << i))
 80005d8:	7afa      	ldrb	r2, [r7, #11]
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	fa42 f303 	asr.w	r3, r2, r3
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d00c      	beq.n	8000602 <write_row_data+0x3e>
		{
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 1);
 80005e8:	4a11      	ldr	r2, [pc, #68]	; (8000630 <write_row_data+0x6c>)
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005f0:	4a10      	ldr	r2, [pc, #64]	; (8000634 <write_row_data+0x70>)
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005f8:	2201      	movs	r2, #1
 80005fa:	4619      	mov	r1, r3
 80005fc:	f002 ffca 	bl	8003594 <HAL_GPIO_WritePin>
 8000600:	e00b      	b.n	800061a <write_row_data+0x56>
		}
		else
		{
			HAL_GPIO_WritePin(row_port[i], row_pin[i], 0);
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <write_row_data+0x6c>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800060a:	4a0a      	ldr	r2, [pc, #40]	; (8000634 <write_row_data+0x70>)
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000612:	2200      	movs	r2, #0
 8000614:	4619      	mov	r1, r3
 8000616:	f002 ffbd 	bl	8003594 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b07      	cmp	r3, #7
 8000624:	ddd8      	ble.n	80005d8 <write_row_data+0x14>
		}
	}
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000028 	.word	0x20000028
 8000634:	20000048 	.word	0x20000048

08000638 <dotmatrix_up>:

	return 0;
}

void dotmatrix_up(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
	static int count = 0;	// 컬럼 count
	static uint32_t past_time = 0;	// 이전 tick 값 저장

	uint32_t now = HAL_GetTick();	// 1 msec timer
 800063e:	f001 fc8d 	bl	8001f5c <HAL_GetTick>
 8000642:	6078      	str	r0, [r7, #4]
	// 처음 시작시 past_time = 0;
	// now : 500 --> past_time : 500
	if (now - past_time >= 100)		// 500msec scroll
 8000644:	4b2b      	ldr	r3, [pc, #172]	; (80006f4 <dotmatrix_up+0xbc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	2b63      	cmp	r3, #99	; 0x63
 800064e:	d935      	bls.n	80006bc <dotmatrix_up+0x84>
	{
		past_time = now;
 8000650:	4a28      	ldr	r2, [pc, #160]	; (80006f4 <dotmatrix_up+0xbc>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 8; i++)
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
 800065a:	e020      	b.n	800069e <dotmatrix_up+0x66>
		{
			display_data[i] = (elevator_up[i] >> count) | (elevator_up[i] << (8 - count));
 800065c:	4a26      	ldr	r2, [pc, #152]	; (80006f8 <dotmatrix_up+0xc0>)
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	4413      	add	r3, r2
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <dotmatrix_up+0xc4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	fa42 f303 	asr.w	r3, r2, r3
 800066e:	b25a      	sxtb	r2, r3
 8000670:	4921      	ldr	r1, [pc, #132]	; (80006f8 <dotmatrix_up+0xc0>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	440b      	add	r3, r1
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	4619      	mov	r1, r3
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <dotmatrix_up+0xc4>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f1c3 0308 	rsb	r3, r3, #8
 8000682:	fa01 f303 	lsl.w	r3, r1, r3
 8000686:	b25b      	sxtb	r3, r3
 8000688:	4313      	orrs	r3, r2
 800068a:	b25b      	sxtb	r3, r3
 800068c:	b2d9      	uxtb	r1, r3
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <dotmatrix_up+0xc8>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	4413      	add	r3, r2
 8000694:	460a      	mov	r2, r1
 8000696:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	3301      	adds	r3, #1
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	2b07      	cmp	r3, #7
 80006a2:	dddb      	ble.n	800065c <dotmatrix_up+0x24>
		}
		if (++count == 8)	// 8 column을 다 처리했으면 다음 scroll_buffer로 이동
 80006a4:	4b15      	ldr	r3, [pc, #84]	; (80006fc <dotmatrix_up+0xc4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a14      	ldr	r2, [pc, #80]	; (80006fc <dotmatrix_up+0xc4>)
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <dotmatrix_up+0xc4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b08      	cmp	r3, #8
 80006b4:	d102      	bne.n	80006bc <dotmatrix_up+0x84>
		{
			count = 0;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <dotmatrix_up+0xc4>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
		}
	}
	for (int i = 0; i < 8; i++)
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
 80006c0:	e00f      	b.n	80006e2 <dotmatrix_up+0xaa>
	{
		// common arrowed 공통 양육 방식
		// column에는 0을 row에는 1을 출력해
		write_column_data(i);
 80006c2:	68b8      	ldr	r0, [r7, #8]
 80006c4:	f7ff ff4a 	bl	800055c <write_column_data>
		write_row_data(display_data[i]);
 80006c8:	4a0d      	ldr	r2, [pc, #52]	; (8000700 <dotmatrix_up+0xc8>)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	4413      	add	r3, r2
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff77 	bl	80005c4 <write_row_data>

		HAL_Delay(1);
 80006d6:	2001      	movs	r0, #1
 80006d8:	f001 fc4c 	bl	8001f74 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	3301      	adds	r3, #1
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	2b07      	cmp	r3, #7
 80006e6:	ddec      	ble.n	80006c2 <dotmatrix_up+0x8a>
	}
}
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	2000010c 	.word	0x2000010c
 80006f8:	20000068 	.word	0x20000068
 80006fc:	20000110 	.word	0x20000110
 8000700:	20000104 	.word	0x20000104

08000704 <dotmatix_down>:

void dotmatix_down(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
	static int count2 = 0;	// 컬럼 count
	static uint32_t past_time2 = 0;	// 이전 tick 값 저장

	uint32_t now2 = HAL_GetTick();	// 1 msec timer
 800070a:	f001 fc27 	bl	8001f5c <HAL_GetTick>
 800070e:	6078      	str	r0, [r7, #4]
	// 처음 시작시 past_time = 0;
	// now : 500 --> past_time : 500
	if (now2 - past_time2 >= 100)		// 500msec scroll
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <dotmatix_down+0xbc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	2b63      	cmp	r3, #99	; 0x63
 800071a:	d935      	bls.n	8000788 <dotmatix_down+0x84>
	{
		past_time2 = now2;
 800071c:	4a28      	ldr	r2, [pc, #160]	; (80007c0 <dotmatix_down+0xbc>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < 8; i++)
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e020      	b.n	800076a <dotmatix_down+0x66>
		{
			display_data[i] = (elevator_down[i] << count2) | (elevator_down[i] >> (8 - count2));
 8000728:	4a26      	ldr	r2, [pc, #152]	; (80007c4 <dotmatix_down+0xc0>)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <dotmatix_down+0xc4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	b25a      	sxtb	r2, r3
 800073c:	4921      	ldr	r1, [pc, #132]	; (80007c4 <dotmatix_down+0xc0>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	440b      	add	r3, r1
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4619      	mov	r1, r3
 8000746:	4b20      	ldr	r3, [pc, #128]	; (80007c8 <dotmatix_down+0xc4>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f1c3 0308 	rsb	r3, r3, #8
 800074e:	fa41 f303 	asr.w	r3, r1, r3
 8000752:	b25b      	sxtb	r3, r3
 8000754:	4313      	orrs	r3, r2
 8000756:	b25b      	sxtb	r3, r3
 8000758:	b2d9      	uxtb	r1, r3
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <dotmatix_down+0xc8>)
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	460a      	mov	r2, r1
 8000762:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < 8; i++)
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b07      	cmp	r3, #7
 800076e:	dddb      	ble.n	8000728 <dotmatix_down+0x24>
		}
		if (++count2 == 8)	// 8 column을 다 처리했으면 다음 scroll_buffer로 이동
 8000770:	4b15      	ldr	r3, [pc, #84]	; (80007c8 <dotmatix_down+0xc4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	3301      	adds	r3, #1
 8000776:	4a14      	ldr	r2, [pc, #80]	; (80007c8 <dotmatix_down+0xc4>)
 8000778:	6013      	str	r3, [r2, #0]
 800077a:	4b13      	ldr	r3, [pc, #76]	; (80007c8 <dotmatix_down+0xc4>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b08      	cmp	r3, #8
 8000780:	d102      	bne.n	8000788 <dotmatix_down+0x84>
		{
			count2 = 0;
 8000782:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <dotmatix_down+0xc4>)
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
		}
	}
	for (int i = 0; i < 8; i++)
 8000788:	2300      	movs	r3, #0
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	e00f      	b.n	80007ae <dotmatix_down+0xaa>
	{
		// common arrowed 공통 양육 방식
		// column에는 0을 row에는 1을 출력해
		write_column_data(i);
 800078e:	68b8      	ldr	r0, [r7, #8]
 8000790:	f7ff fee4 	bl	800055c <write_column_data>
		write_row_data(display_data[i]);
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <dotmatix_down+0xc8>)
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff11 	bl	80005c4 <write_row_data>

		HAL_Delay(1);
 80007a2:	2001      	movs	r0, #1
 80007a4:	f001 fbe6 	bl	8001f74 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	3301      	adds	r3, #1
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	ddec      	ble.n	800078e <dotmatix_down+0x8a>
	}
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000114 	.word	0x20000114
 80007c4:	20000070 	.word	0x20000070
 80007c8:	20000118 	.word	0x20000118
 80007cc:	20000104 	.word	0x20000104

080007d0 <dotmatrix_stop>:

// 고정 문자 출력 demo program
void dotmatrix_stop(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	e00f      	b.n	80007fc <dotmatrix_stop+0x2c>
	{
		// common arrowed 공통 양육 방식
		// column에는 0을 row에는 1을 출력해
		write_column_data(i);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff febd 	bl	800055c <write_column_data>
		write_row_data(all_on[i]);
 80007e2:	4a0a      	ldr	r2, [pc, #40]	; (800080c <dotmatrix_stop+0x3c>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4413      	add	r3, r2
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4618      	mov	r0, r3
 80007ec:	f7ff feea 	bl	80005c4 <write_row_data>

		HAL_Delay(1);
 80007f0:	2001      	movs	r0, #1
 80007f2:	f001 fbbf 	bl	8001f74 <HAL_Delay>
	for (int i = 0; i < 8; i++)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	3301      	adds	r3, #1
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	2b07      	cmp	r3, #7
 8000800:	ddec      	ble.n	80007dc <dotmatrix_stop+0xc>
	}
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3708      	adds	r7, #8
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20000078 	.word	0x20000078

08000810 <fnd>:
#include "main.h"

void fnd(int current_floor)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	if (current_floor == 1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d127      	bne.n	800086e <fnd+0x5e>
	{
		HAL_GPIO_WritePin(FND_a_GPIO_Port, FND_a_Pin, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000824:	4868      	ldr	r0, [pc, #416]	; (80009c8 <fnd+0x1b8>)
 8000826:	f002 feb5 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_b_GPIO_Port, FND_b_Pin, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000830:	4865      	ldr	r0, [pc, #404]	; (80009c8 <fnd+0x1b8>)
 8000832:	f002 feaf 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_c_GPIO_Port, FND_c_Pin, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800083c:	4862      	ldr	r0, [pc, #392]	; (80009c8 <fnd+0x1b8>)
 800083e:	f002 fea9 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_d_GPIO_Port, FND_d_Pin, 1);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000848:	485f      	ldr	r0, [pc, #380]	; (80009c8 <fnd+0x1b8>)
 800084a:	f002 fea3 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_e_GPIO_Port, FND_e_Pin, 1);
 800084e:	2201      	movs	r2, #1
 8000850:	2104      	movs	r1, #4
 8000852:	485e      	ldr	r0, [pc, #376]	; (80009cc <fnd+0x1bc>)
 8000854:	f002 fe9e 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_f_GPIO_Port, FND_f_Pin, 1);
 8000858:	2201      	movs	r2, #1
 800085a:	2102      	movs	r1, #2
 800085c:	485b      	ldr	r0, [pc, #364]	; (80009cc <fnd+0x1bc>)
 800085e:	f002 fe99 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_g_GPIO_Port, FND_g_Pin, 1);
 8000862:	2201      	movs	r2, #1
 8000864:	2101      	movs	r1, #1
 8000866:	4859      	ldr	r0, [pc, #356]	; (80009cc <fnd+0x1bc>)
 8000868:	f002 fe94 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_d_GPIO_Port, FND_d_Pin, 1);
		HAL_GPIO_WritePin(FND_e_GPIO_Port, FND_e_Pin, 1);
		HAL_GPIO_WritePin(FND_f_GPIO_Port, FND_f_Pin, 1);
		HAL_GPIO_WritePin(FND_g_GPIO_Port, FND_g_Pin, 1);
	}
}
 800086c:	e0a7      	b.n	80009be <fnd+0x1ae>
	else if (current_floor == 2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d127      	bne.n	80008c4 <fnd+0xb4>
		HAL_GPIO_WritePin(FND_a_GPIO_Port, FND_a_Pin, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	4853      	ldr	r0, [pc, #332]	; (80009c8 <fnd+0x1b8>)
 800087c:	f002 fe8a 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_b_GPIO_Port, FND_b_Pin, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000886:	4850      	ldr	r0, [pc, #320]	; (80009c8 <fnd+0x1b8>)
 8000888:	f002 fe84 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_c_GPIO_Port, FND_c_Pin, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000892:	484d      	ldr	r0, [pc, #308]	; (80009c8 <fnd+0x1b8>)
 8000894:	f002 fe7e 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_d_GPIO_Port, FND_d_Pin, 0);
 8000898:	2200      	movs	r2, #0
 800089a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800089e:	484a      	ldr	r0, [pc, #296]	; (80009c8 <fnd+0x1b8>)
 80008a0:	f002 fe78 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_e_GPIO_Port, FND_e_Pin, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2104      	movs	r1, #4
 80008a8:	4848      	ldr	r0, [pc, #288]	; (80009cc <fnd+0x1bc>)
 80008aa:	f002 fe73 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_f_GPIO_Port, FND_f_Pin, 1);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2102      	movs	r1, #2
 80008b2:	4846      	ldr	r0, [pc, #280]	; (80009cc <fnd+0x1bc>)
 80008b4:	f002 fe6e 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_g_GPIO_Port, FND_g_Pin, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2101      	movs	r1, #1
 80008bc:	4843      	ldr	r0, [pc, #268]	; (80009cc <fnd+0x1bc>)
 80008be:	f002 fe69 	bl	8003594 <HAL_GPIO_WritePin>
}
 80008c2:	e07c      	b.n	80009be <fnd+0x1ae>
	else if (current_floor == 3)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	d127      	bne.n	800091a <fnd+0x10a>
		HAL_GPIO_WritePin(FND_a_GPIO_Port, FND_a_Pin, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008d0:	483d      	ldr	r0, [pc, #244]	; (80009c8 <fnd+0x1b8>)
 80008d2:	f002 fe5f 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_b_GPIO_Port, FND_b_Pin, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008dc:	483a      	ldr	r0, [pc, #232]	; (80009c8 <fnd+0x1b8>)
 80008de:	f002 fe59 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_c_GPIO_Port, FND_c_Pin, 0);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008e8:	4837      	ldr	r0, [pc, #220]	; (80009c8 <fnd+0x1b8>)
 80008ea:	f002 fe53 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_d_GPIO_Port, FND_d_Pin, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008f4:	4834      	ldr	r0, [pc, #208]	; (80009c8 <fnd+0x1b8>)
 80008f6:	f002 fe4d 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_e_GPIO_Port, FND_e_Pin, 1);
 80008fa:	2201      	movs	r2, #1
 80008fc:	2104      	movs	r1, #4
 80008fe:	4833      	ldr	r0, [pc, #204]	; (80009cc <fnd+0x1bc>)
 8000900:	f002 fe48 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_f_GPIO_Port, FND_f_Pin, 1);
 8000904:	2201      	movs	r2, #1
 8000906:	2102      	movs	r1, #2
 8000908:	4830      	ldr	r0, [pc, #192]	; (80009cc <fnd+0x1bc>)
 800090a:	f002 fe43 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_g_GPIO_Port, FND_g_Pin, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2101      	movs	r1, #1
 8000912:	482e      	ldr	r0, [pc, #184]	; (80009cc <fnd+0x1bc>)
 8000914:	f002 fe3e 	bl	8003594 <HAL_GPIO_WritePin>
}
 8000918:	e051      	b.n	80009be <fnd+0x1ae>
	else if (current_floor == 4)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2b04      	cmp	r3, #4
 800091e:	d127      	bne.n	8000970 <fnd+0x160>
		HAL_GPIO_WritePin(FND_a_GPIO_Port, FND_a_Pin, 1);
 8000920:	2201      	movs	r2, #1
 8000922:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000926:	4828      	ldr	r0, [pc, #160]	; (80009c8 <fnd+0x1b8>)
 8000928:	f002 fe34 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_b_GPIO_Port, FND_b_Pin, 0);
 800092c:	2200      	movs	r2, #0
 800092e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000932:	4825      	ldr	r0, [pc, #148]	; (80009c8 <fnd+0x1b8>)
 8000934:	f002 fe2e 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_c_GPIO_Port, FND_c_Pin, 0);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800093e:	4822      	ldr	r0, [pc, #136]	; (80009c8 <fnd+0x1b8>)
 8000940:	f002 fe28 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_d_GPIO_Port, FND_d_Pin, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800094a:	481f      	ldr	r0, [pc, #124]	; (80009c8 <fnd+0x1b8>)
 800094c:	f002 fe22 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_e_GPIO_Port, FND_e_Pin, 1);
 8000950:	2201      	movs	r2, #1
 8000952:	2104      	movs	r1, #4
 8000954:	481d      	ldr	r0, [pc, #116]	; (80009cc <fnd+0x1bc>)
 8000956:	f002 fe1d 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_f_GPIO_Port, FND_f_Pin, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2102      	movs	r1, #2
 800095e:	481b      	ldr	r0, [pc, #108]	; (80009cc <fnd+0x1bc>)
 8000960:	f002 fe18 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_g_GPIO_Port, FND_g_Pin, 0);
 8000964:	2200      	movs	r2, #0
 8000966:	2101      	movs	r1, #1
 8000968:	4818      	ldr	r0, [pc, #96]	; (80009cc <fnd+0x1bc>)
 800096a:	f002 fe13 	bl	8003594 <HAL_GPIO_WritePin>
}
 800096e:	e026      	b.n	80009be <fnd+0x1ae>
		HAL_GPIO_WritePin(FND_a_GPIO_Port, FND_a_Pin, 1);
 8000970:	2201      	movs	r2, #1
 8000972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000976:	4814      	ldr	r0, [pc, #80]	; (80009c8 <fnd+0x1b8>)
 8000978:	f002 fe0c 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_b_GPIO_Port, FND_b_Pin, 1);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000982:	4811      	ldr	r0, [pc, #68]	; (80009c8 <fnd+0x1b8>)
 8000984:	f002 fe06 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_c_GPIO_Port, FND_c_Pin, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098e:	480e      	ldr	r0, [pc, #56]	; (80009c8 <fnd+0x1b8>)
 8000990:	f002 fe00 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_d_GPIO_Port, FND_d_Pin, 1);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800099a:	480b      	ldr	r0, [pc, #44]	; (80009c8 <fnd+0x1b8>)
 800099c:	f002 fdfa 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_e_GPIO_Port, FND_e_Pin, 1);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2104      	movs	r1, #4
 80009a4:	4809      	ldr	r0, [pc, #36]	; (80009cc <fnd+0x1bc>)
 80009a6:	f002 fdf5 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_f_GPIO_Port, FND_f_Pin, 1);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2102      	movs	r1, #2
 80009ae:	4807      	ldr	r0, [pc, #28]	; (80009cc <fnd+0x1bc>)
 80009b0:	f002 fdf0 	bl	8003594 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_g_GPIO_Port, FND_g_Pin, 1);
 80009b4:	2201      	movs	r2, #1
 80009b6:	2101      	movs	r1, #1
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <fnd+0x1bc>)
 80009ba:	f002 fdeb 	bl	8003594 <HAL_GPIO_WritePin>
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40021400 	.word	0x40021400

080009d0 <elevator_lcd>:
		HAL_Delay(500);
 	}
}

void elevator_lcd(int *floor)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	i2c_lcd_init();
 80009d8:	f000 f8aa 	bl	8000b30 <i2c_lcd_init>

	move_cursor(0,0);
 80009dc:	2100      	movs	r1, #0
 80009de:	2000      	movs	r0, #0
 80009e0:	f000 f8d4 	bl	8000b8c <move_cursor>
	if ((*floor) == 0)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d103      	bne.n	80009f4 <elevator_lcd+0x24>
	{
		lcd_string("                ");
 80009ec:	4816      	ldr	r0, [pc, #88]	; (8000a48 <elevator_lcd+0x78>)
 80009ee:	f000 f8b8 	bl	8000b62 <lcd_string>
 80009f2:	e01e      	b.n	8000a32 <elevator_lcd+0x62>
	}
	else if ((*floor) == 1)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d103      	bne.n	8000a04 <elevator_lcd+0x34>
	{
		lcd_string("&               ");
 80009fc:	4813      	ldr	r0, [pc, #76]	; (8000a4c <elevator_lcd+0x7c>)
 80009fe:	f000 f8b0 	bl	8000b62 <lcd_string>
 8000a02:	e016      	b.n	8000a32 <elevator_lcd+0x62>
	}
	else if ((*floor) == 2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2b02      	cmp	r3, #2
 8000a0a:	d103      	bne.n	8000a14 <elevator_lcd+0x44>
	{
		lcd_string("     &          ");
 8000a0c:	4810      	ldr	r0, [pc, #64]	; (8000a50 <elevator_lcd+0x80>)
 8000a0e:	f000 f8a8 	bl	8000b62 <lcd_string>
 8000a12:	e00e      	b.n	8000a32 <elevator_lcd+0x62>
//		move_cursor(0,8);
//		for(int i=0; i<8; i++) lcd_data(customChar);
	}
	else if ((*floor) == 3)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	2b03      	cmp	r3, #3
 8000a1a:	d103      	bne.n	8000a24 <elevator_lcd+0x54>
	{
		lcd_string("          &     ");
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <elevator_lcd+0x84>)
 8000a1e:	f000 f8a0 	bl	8000b62 <lcd_string>
 8000a22:	e006      	b.n	8000a32 <elevator_lcd+0x62>
	}
	else if ((*floor) == 4)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d102      	bne.n	8000a32 <elevator_lcd+0x62>
	{
		lcd_string("               &");
 8000a2c:	480a      	ldr	r0, [pc, #40]	; (8000a58 <elevator_lcd+0x88>)
 8000a2e:	f000 f898 	bl	8000b62 <lcd_string>
	}
	move_cursor(1,0);
 8000a32:	2100      	movs	r1, #0
 8000a34:	2001      	movs	r0, #1
 8000a36:	f000 f8a9 	bl	8000b8c <move_cursor>
	lcd_string("1    2    3    4");
 8000a3a:	4808      	ldr	r0, [pc, #32]	; (8000a5c <elevator_lcd+0x8c>)
 8000a3c:	f000 f891 	bl	8000b62 <lcd_string>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	08009248 	.word	0x08009248
 8000a4c:	0800925c 	.word	0x0800925c
 8000a50:	08009270 	.word	0x08009270
 8000a54:	08009284 	.word	0x08009284
 8000a58:	08009298 	.word	0x08009298
 8000a5c:	080092ac 	.word	0x080092ac

08000a60 <lcd_command>:

void lcd_command(uint8_t command)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b086      	sub	sp, #24
 8000a64:	af02      	add	r7, sp, #8
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = command & 0xf0;
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	f023 030f 	bic.w	r3, r3, #15
 8000a70:	73fb      	strb	r3, [r7, #15]
	low_nibble = (command<<4) & 0xf0;
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	011b      	lsls	r3, r3, #4
 8000a76:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000a78:	7bfb      	ldrb	r3, [r7, #15]
 8000a7a:	f043 030c 	orr.w	r3, r3, #12
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000a82:	7bfb      	ldrb	r3, [r7, #15]
 8000a84:	f043 0308 	orr.w	r3, r3, #8
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x04 | 0x08; //en=1, rs=0, rw=0, backlight=1
 8000a8c:	7bbb      	ldrb	r3, [r7, #14]
 8000a8e:	f043 030c 	orr.w	r3, r3, #12
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x00 | 0x08; //en=0, rs=0, rw=0, backlight=1
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	f043 0308 	orr.w	r3, r3, #8
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000aa0:	bf00      	nop
 8000aa2:	f107 0208 	add.w	r2, r7, #8
 8000aa6:	2364      	movs	r3, #100	; 0x64
 8000aa8:	9300      	str	r3, [sp, #0]
 8000aaa:	2304      	movs	r3, #4
 8000aac:	214e      	movs	r1, #78	; 0x4e
 8000aae:	4805      	ldr	r0, [pc, #20]	; (8000ac4 <lcd_command+0x64>)
 8000ab0:	f002 fee6 	bl	8003880 <HAL_I2C_Master_Transmit>
 8000ab4:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d1f3      	bne.n	8000aa2 <lcd_command+0x42>
		//HAL_Delay(1);
	}
	return;
 8000aba:	bf00      	nop
}
 8000abc:	3710      	adds	r7, #16
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000038c 	.word	0x2000038c

08000ac8 <lcd_data>:

// 1 byte write
void lcd_data(uint8_t data)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af02      	add	r7, sp, #8
 8000ace:	4603      	mov	r3, r0
 8000ad0:	71fb      	strb	r3, [r7, #7]

	uint8_t high_nibble, low_nibble;
	uint8_t i2c_buffer[4];
	high_nibble = data & 0xf0;
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f023 030f 	bic.w	r3, r3, #15
 8000ad8:	73fb      	strb	r3, [r7, #15]
	low_nibble = (data<<4) & 0xf0;
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	011b      	lsls	r3, r3, #4
 8000ade:	73bb      	strb	r3, [r7, #14]
	i2c_buffer[0] = high_nibble | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	f043 030d 	orr.w	r3, r3, #13
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	723b      	strb	r3, [r7, #8]
	i2c_buffer[1] = high_nibble | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000aea:	7bfb      	ldrb	r3, [r7, #15]
 8000aec:	f043 0309 	orr.w	r3, r3, #9
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	727b      	strb	r3, [r7, #9]
	i2c_buffer[2] = low_nibble  | 0x05 | 0x08; //en=1, rs=1, rw=0, backlight=1
 8000af4:	7bbb      	ldrb	r3, [r7, #14]
 8000af6:	f043 030d 	orr.w	r3, r3, #13
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	72bb      	strb	r3, [r7, #10]
	i2c_buffer[3] = low_nibble  | 0x01 | 0x08; //en=0, rs=1, rw=0, backlight=1
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	f043 0309 	orr.w	r3, r3, #9
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	72fb      	strb	r3, [r7, #11]
	while(HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDRESS,
 8000b08:	bf00      	nop
 8000b0a:	f107 0208 	add.w	r2, r7, #8
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2304      	movs	r3, #4
 8000b14:	214e      	movs	r1, #78	; 0x4e
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <lcd_data+0x64>)
 8000b18:	f002 feb2 	bl	8003880 <HAL_I2C_Master_Transmit>
 8000b1c:	4603      	mov	r3, r0
			i2c_buffer, 4, 100)!=HAL_OK){
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d1f3      	bne.n	8000b0a <lcd_data+0x42>
		//HAL_Delay(1);
	}
	return;
 8000b22:	bf00      	nop
}
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	2000038c 	.word	0x2000038c

08000b30 <i2c_lcd_init>:

// lcd 초기화
void i2c_lcd_init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	lcd_command(0x33);
 8000b34:	2033      	movs	r0, #51	; 0x33
 8000b36:	f7ff ff93 	bl	8000a60 <lcd_command>
	lcd_command(0x32);
 8000b3a:	2032      	movs	r0, #50	; 0x32
 8000b3c:	f7ff ff90 	bl	8000a60 <lcd_command>
	lcd_command(0x28);	//Function Set 4-bit mode
 8000b40:	2028      	movs	r0, #40	; 0x28
 8000b42:	f7ff ff8d 	bl	8000a60 <lcd_command>
	lcd_command(DISPLAY_ON);
 8000b46:	200c      	movs	r0, #12
 8000b48:	f7ff ff8a 	bl	8000a60 <lcd_command>
	lcd_command(0x06);	//Entry mode set
 8000b4c:	2006      	movs	r0, #6
 8000b4e:	f7ff ff87 	bl	8000a60 <lcd_command>
	lcd_command(CLEAR_DISPLAY);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f7ff ff84 	bl	8000a60 <lcd_command>
	HAL_Delay(2);
 8000b58:	2002      	movs	r0, #2
 8000b5a:	f001 fa0b 	bl	8001f74 <HAL_Delay>
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <lcd_string>:

// null을 만날때 까지 string을 LCD에 출력
void lcd_string(uint8_t *str)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	while(*str)
 8000b6a:	e006      	b.n	8000b7a <lcd_string+0x18>
	{
		lcd_data(*str++);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	607a      	str	r2, [r7, #4]
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ffa7 	bl	8000ac8 <lcd_data>
	while(*str)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1f4      	bne.n	8000b6c <lcd_string+0xa>
	}
}
 8000b82:	bf00      	nop
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <move_cursor>:

// 해당 줄,col으로 이동 하는 함수
void move_cursor(uint8_t row, uint8_t column)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	460a      	mov	r2, r1
 8000b96:	71fb      	strb	r3, [r7, #7]
 8000b98:	4613      	mov	r3, r2
 8000b9a:	71bb      	strb	r3, [r7, #6]
	lcd_command(0x80 | row<<6 | column);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	019b      	lsls	r3, r3, #6
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	79bb      	ldrb	r3, [r7, #6]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	b2db      	uxtb	r3, r3
 8000ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f7ff ff56 	bl	8000a60 <lcd_command>
	return;
 8000bb4:	bf00      	nop
}
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}

08000bbc <HAL_GPIO_EXTI_Callback>:
	{
	}
}
volatile int current_floor = 1;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	3b01      	subs	r3, #1
 8000bca:	2b07      	cmp	r3, #7
 8000bcc:	d822      	bhi.n	8000c14 <HAL_GPIO_EXTI_Callback+0x58>
 8000bce:	a201      	add	r2, pc, #4	; (adr r2, 8000bd4 <HAL_GPIO_EXTI_Callback+0x18>)
 8000bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd4:	08000bf5 	.word	0x08000bf5
 8000bd8:	08000bfd 	.word	0x08000bfd
 8000bdc:	08000c15 	.word	0x08000c15
 8000be0:	08000c05 	.word	0x08000c05
 8000be4:	08000c15 	.word	0x08000c15
 8000be8:	08000c15 	.word	0x08000c15
 8000bec:	08000c15 	.word	0x08000c15
 8000bf0:	08000c0d 	.word	0x08000c0d
	{
		case PHOTO1_Pin:
			current_floor = 1;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x64>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
			break;
 8000bfa:	e00b      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0x58>
		case PHOTO2_Pin:
			current_floor = 2;
 8000bfc:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x64>)
 8000bfe:	2202      	movs	r2, #2
 8000c00:	601a      	str	r2, [r3, #0]
			break;
 8000c02:	e007      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0x58>
		case PHOTO3_Pin:
			current_floor = 3;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c06:	2203      	movs	r2, #3
 8000c08:	601a      	str	r2, [r3, #0]
			break;
 8000c0a:	e003      	b.n	8000c14 <HAL_GPIO_EXTI_Callback+0x58>
		case PHOTO4_Pin:
			current_floor = 4;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_GPIO_EXTI_Callback+0x64>)
 8000c0e:	2204      	movs	r2, #4
 8000c10:	601a      	str	r2, [r3, #0]
			break;
 8000c12:	bf00      	nop
	}
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	20000080 	.word	0x20000080

08000c24 <HAL_ADC_ConvCpltCallback>:

uint16_t adcValue;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a08      	ldr	r2, [pc, #32]	; (8000c54 <HAL_ADC_ConvCpltCallback+0x30>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d109      	bne.n	8000c4a <HAL_ADC_ConvCpltCallback+0x26>
	{
		adcValue = HAL_ADC_GetValue(&hadc1);
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <HAL_ADC_ConvCpltCallback+0x34>)
 8000c38:	f001 fbf2 	bl	8002420 <HAL_ADC_GetValue>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <HAL_ADC_ConvCpltCallback+0x38>)
 8000c42:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Start_IT(&hadc1);
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <HAL_ADC_ConvCpltCallback+0x34>)
 8000c46:	f001 f9fd 	bl	8002044 <HAL_ADC_Start_IT>
	}
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40012000 	.word	0x40012000
 8000c58:	20000294 	.word	0x20000294
 8000c5c:	20000984 	.word	0x20000984

08000c60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c64:	f001 f944 	bl	8001ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c68:	f000 f8c2 	bl	8000df0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6c:	f000 fa86 	bl	800117c <MX_GPIO_Init>
  MX_ETH_Init();
 8000c70:	f000 f97a 	bl	8000f68 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000c74:	f000 fa2a 	bl	80010cc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c78:	f000 fa52 	bl	8001120 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM11_Init();
 8000c7c:	f000 fa02 	bl	8001084 <MX_TIM11_Init>
  MX_I2C1_Init();
 8000c80:	f000 f9c0 	bl	8001004 <MX_I2C1_Init>
  MX_ADC1_Init();
 8000c84:	f000 f91e 	bl	8000ec4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim11);
 8000c88:	4848      	ldr	r0, [pc, #288]	; (8000dac <main+0x14c>)
 8000c8a:	f003 ffb3 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
  i2c_lcd_init();
 8000c8e:	f7ff ff4f 	bl	8000b30 <i2c_lcd_init>



  elevator_lcd(p_go_floor);
 8000c92:	4b47      	ldr	r3, [pc, #284]	; (8000db0 <main+0x150>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fe9a 	bl	80009d0 <elevator_lcd>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c9c:	f005 fc58 	bl	8006550 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ca0:	4a44      	ldr	r2, [pc, #272]	; (8000db4 <main+0x154>)
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4844      	ldr	r0, [pc, #272]	; (8000db8 <main+0x158>)
 8000ca6:	f005 fc9d 	bl	80065e4 <osThreadNew>
 8000caa:	4603      	mov	r3, r0
 8000cac:	4a43      	ldr	r2, [pc, #268]	; (8000dbc <main+0x15c>)
 8000cae:	6013      	str	r3, [r2, #0]

  /* creation of Task_dotmatix */
  Task_dotmatixHandle = osThreadNew(Task_dotmatix_func, NULL, &Task_dotmatix_attributes);
 8000cb0:	4a43      	ldr	r2, [pc, #268]	; (8000dc0 <main+0x160>)
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4843      	ldr	r0, [pc, #268]	; (8000dc4 <main+0x164>)
 8000cb6:	f005 fc95 	bl	80065e4 <osThreadNew>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a42      	ldr	r2, [pc, #264]	; (8000dc8 <main+0x168>)
 8000cbe:	6013      	str	r3, [r2, #0]

  /* creation of Task_elevator */
  Task_elevatorHandle = osThreadNew(Task_elevator_func, NULL, &Task_elevator_attributes);
 8000cc0:	4a42      	ldr	r2, [pc, #264]	; (8000dcc <main+0x16c>)
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4842      	ldr	r0, [pc, #264]	; (8000dd0 <main+0x170>)
 8000cc6:	f005 fc8d 	bl	80065e4 <osThreadNew>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a41      	ldr	r2, [pc, #260]	; (8000dd4 <main+0x174>)
 8000cce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000cd0:	f005 fc62 	bl	8006598 <osKernelStart>
//  dotmatrix_main_test();
//
  while (1)
  {
	  // button control
	  if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cda:	483f      	ldr	r0, [pc, #252]	; (8000dd8 <main+0x178>)
 8000cdc:	f7ff fc06 	bl	80004ec <get_button>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d117      	bne.n	8000d16 <main+0xb6>
	  {
		  go_floor = ++go_floor % 5;
 8000ce6:	4b3d      	ldr	r3, [pc, #244]	; (8000ddc <main+0x17c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	3301      	adds	r3, #1
 8000cec:	4a3b      	ldr	r2, [pc, #236]	; (8000ddc <main+0x17c>)
 8000cee:	6013      	str	r3, [r2, #0]
 8000cf0:	4b3a      	ldr	r3, [pc, #232]	; (8000ddc <main+0x17c>)
 8000cf2:	6819      	ldr	r1, [r3, #0]
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <main+0x180>)
 8000cf6:	fb83 2301 	smull	r2, r3, r3, r1
 8000cfa:	105a      	asrs	r2, r3, #1
 8000cfc:	17cb      	asrs	r3, r1, #31
 8000cfe:	1ad2      	subs	r2, r2, r3
 8000d00:	4613      	mov	r3, r2
 8000d02:	009b      	lsls	r3, r3, #2
 8000d04:	4413      	add	r3, r2
 8000d06:	1aca      	subs	r2, r1, r3
 8000d08:	4b34      	ldr	r3, [pc, #208]	; (8000ddc <main+0x17c>)
 8000d0a:	601a      	str	r2, [r3, #0]
		  elevator_lcd(p_go_floor);
 8000d0c:	4b28      	ldr	r3, [pc, #160]	; (8000db0 <main+0x150>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff fe5d 	bl	80009d0 <elevator_lcd>
	  }

	  if (get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 8000d16:	2201      	movs	r2, #1
 8000d18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d1c:	482e      	ldr	r0, [pc, #184]	; (8000dd8 <main+0x178>)
 8000d1e:	f7ff fbe5 	bl	80004ec <get_button>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d11a      	bne.n	8000d5e <main+0xfe>
	  {
		  elevator_go_flag = ++elevator_go_flag % 2;
 8000d28:	4b2e      	ldr	r3, [pc, #184]	; (8000de4 <main+0x184>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	4a2d      	ldr	r2, [pc, #180]	; (8000de4 <main+0x184>)
 8000d30:	6013      	str	r3, [r2, #0]
 8000d32:	4b2c      	ldr	r3, [pc, #176]	; (8000de4 <main+0x184>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	bfb8      	it	lt
 8000d3e:	425b      	neglt	r3, r3
 8000d40:	4a28      	ldr	r2, [pc, #160]	; (8000de4 <main+0x184>)
 8000d42:	6013      	str	r3, [r2, #0]
		  if (current_floor < go_floor)
 8000d44:	4b28      	ldr	r3, [pc, #160]	; (8000de8 <main+0x188>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <main+0x17c>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	da03      	bge.n	8000d58 <main+0xf8>
		  {
			  direction = 0;
 8000d50:	4b26      	ldr	r3, [pc, #152]	; (8000dec <main+0x18c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e002      	b.n	8000d5e <main+0xfe>
		  }
		  else
		  {
			  direction = 1;
 8000d58:	4b24      	ldr	r3, [pc, #144]	; (8000dec <main+0x18c>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]
		  }
	  }

	  // step motor control
	  if (elevator_go_flag == 1)
 8000d5e:	4b21      	ldr	r3, [pc, #132]	; (8000de4 <main+0x184>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d11a      	bne.n	8000d9c <main+0x13c>
	  {
		  stepmotor_driver(direction);
 8000d66:	4b21      	ldr	r3, [pc, #132]	; (8000dec <main+0x18c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 fc46 	bl	80015fc <stepmotor_driver>

		  if (direction == 0)
 8000d70:	4b1e      	ldr	r3, [pc, #120]	; (8000dec <main+0x18c>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d102      	bne.n	8000d7e <main+0x11e>
		  {
			  dotmatrix_up();
 8000d78:	f7ff fc5e 	bl	8000638 <dotmatrix_up>
 8000d7c:	e001      	b.n	8000d82 <main+0x122>
		  }
		  else
		  {
			  dotmatix_down();
 8000d7e:	f7ff fcc1 	bl	8000704 <dotmatix_down>
		  }

		  if (current_floor == go_floor)
 8000d82:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <main+0x188>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <main+0x17c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d108      	bne.n	8000da0 <main+0x140>
		  {
			  elevator_go_flag = 0;
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <main+0x184>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
			  go_floor = 0;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <main+0x17c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	e001      	b.n	8000da0 <main+0x140>
		  }
	  }
	  else
	  {
		  dotmatrix_stop();
 8000d9c:	f7ff fd18 	bl	80007d0 <dotmatrix_stop>
	  }
	  fnd(current_floor);
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <main+0x188>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fd33 	bl	8000810 <fnd>
	  if (get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 8000daa:	e793      	b.n	8000cd4 <main+0x74>
 8000dac:	200003e0 	.word	0x200003e0
 8000db0:	20000084 	.word	0x20000084
 8000db4:	08009304 	.word	0x08009304
 8000db8:	08001435 	.word	0x08001435
 8000dbc:	20000978 	.word	0x20000978
 8000dc0:	08009328 	.word	0x08009328
 8000dc4:	08001505 	.word	0x08001505
 8000dc8:	2000097c 	.word	0x2000097c
 8000dcc:	0800934c 	.word	0x0800934c
 8000dd0:	0800153d 	.word	0x0800153d
 8000dd4:	20000980 	.word	0x20000980
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	20000988 	.word	0x20000988
 8000de0:	66666667 	.word	0x66666667
 8000de4:	20000990 	.word	0x20000990
 8000de8:	20000080 	.word	0x20000080
 8000dec:	2000098c 	.word	0x2000098c

08000df0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b094      	sub	sp, #80	; 0x50
 8000df4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	2230      	movs	r2, #48	; 0x30
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f008 f924 	bl	800904c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e04:	f107 030c 	add.w	r3, r7, #12
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e14:	2300      	movs	r3, #0
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <SystemClock_Config+0xcc>)
 8000e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1c:	4a27      	ldr	r2, [pc, #156]	; (8000ebc <SystemClock_Config+0xcc>)
 8000e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e22:	6413      	str	r3, [r2, #64]	; 0x40
 8000e24:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <SystemClock_Config+0xcc>)
 8000e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e30:	2300      	movs	r3, #0
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <SystemClock_Config+0xd0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <SystemClock_Config+0xd0>)
 8000e3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <SystemClock_Config+0xd0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e56:	2302      	movs	r3, #2
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e60:	2304      	movs	r3, #4
 8000e62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e64:	23a8      	movs	r3, #168	; 0xa8
 8000e66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 f9a3 	bl	80041c0 <HAL_RCC_OscConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e80:	f000 fbb6 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e84:	230f      	movs	r3, #15
 8000e86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e9c:	f107 030c 	add.w	r3, r7, #12
 8000ea0:	2105      	movs	r1, #5
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f003 fc04 	bl	80046b0 <HAL_RCC_ClockConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eae:	f000 fb9f 	bl	80015f0 <Error_Handler>
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3750      	adds	r7, #80	; 0x50
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40007000 	.word	0x40007000

08000ec4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	463b      	mov	r3, r7
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	609a      	str	r2, [r3, #8]
 8000ed4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000ed8:	4a21      	ldr	r2, [pc, #132]	; (8000f60 <MX_ADC1_Init+0x9c>)
 8000eda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000ede:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ee2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000efe:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <MX_ADC1_Init+0xa0>)
 8000f08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000f26:	f001 f849 	bl	8001fbc <HAL_ADC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f30:	f000 fb5e 	bl	80015f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f34:	2304      	movs	r3, #4
 8000f36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f40:	463b      	mov	r3, r7
 8000f42:	4619      	mov	r1, r3
 8000f44:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_ADC1_Init+0x98>)
 8000f46:	f001 fa8d 	bl	8002464 <HAL_ADC_ConfigChannel>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f50:	f000 fb4e 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f54:	bf00      	nop
 8000f56:	3710      	adds	r7, #16
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000294 	.word	0x20000294
 8000f60:	40012000 	.word	0x40012000
 8000f64:	0f000001 	.word	0x0f000001

08000f68 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <MX_ETH_Init+0x84>)
 8000f6e:	4a20      	ldr	r2, [pc, #128]	; (8000ff0 <MX_ETH_Init+0x88>)
 8000f70:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f72:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_ETH_Init+0x8c>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <MX_ETH_Init+0x8c>)
 8000f7a:	2280      	movs	r2, #128	; 0x80
 8000f7c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_ETH_Init+0x8c>)
 8000f80:	22e1      	movs	r2, #225	; 0xe1
 8000f82:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_ETH_Init+0x8c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_ETH_Init+0x8c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_ETH_Init+0x8c>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f96:	4b15      	ldr	r3, [pc, #84]	; (8000fec <MX_ETH_Init+0x84>)
 8000f98:	4a16      	ldr	r2, [pc, #88]	; (8000ff4 <MX_ETH_Init+0x8c>)
 8000f9a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f9c:	4b13      	ldr	r3, [pc, #76]	; (8000fec <MX_ETH_Init+0x84>)
 8000f9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fa2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_ETH_Init+0x84>)
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <MX_ETH_Init+0x90>)
 8000fa8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <MX_ETH_Init+0x84>)
 8000fac:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <MX_ETH_Init+0x94>)
 8000fae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_ETH_Init+0x84>)
 8000fb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000fb6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_ETH_Init+0x84>)
 8000fba:	f001 fdff 	bl	8002bbc <HAL_ETH_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000fc4:	f000 fb14 	bl	80015f0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000fc8:	2238      	movs	r2, #56	; 0x38
 8000fca:	2100      	movs	r1, #0
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_ETH_Init+0x98>)
 8000fce:	f008 f83d 	bl	800904c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000fd2:	4b0b      	ldr	r3, [pc, #44]	; (8001000 <MX_ETH_Init+0x98>)
 8000fd4:	2221      	movs	r2, #33	; 0x21
 8000fd6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000fd8:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_ETH_Init+0x98>)
 8000fda:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000fde:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <MX_ETH_Init+0x98>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200002dc 	.word	0x200002dc
 8000ff0:	40028000 	.word	0x40028000
 8000ff4:	20000994 	.word	0x20000994
 8000ff8:	200001f4 	.word	0x200001f4
 8000ffc:	20000154 	.word	0x20000154
 8001000:	2000011c 	.word	0x2000011c

08001004 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <MX_I2C1_Init+0x74>)
 800100a:	4a1c      	ldr	r2, [pc, #112]	; (800107c <MX_I2C1_Init+0x78>)
 800100c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <MX_I2C1_Init+0x74>)
 8001010:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <MX_I2C1_Init+0x7c>)
 8001012:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001014:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_I2C1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <MX_I2C1_Init+0x74>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001020:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_I2C1_Init+0x74>)
 8001022:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001026:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800102e:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_I2C1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001034:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001040:	480d      	ldr	r0, [pc, #52]	; (8001078 <MX_I2C1_Init+0x74>)
 8001042:	f002 fad9 	bl	80035f8 <HAL_I2C_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800104c:	f000 fad0 	bl	80015f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001050:	2100      	movs	r1, #0
 8001052:	4809      	ldr	r0, [pc, #36]	; (8001078 <MX_I2C1_Init+0x74>)
 8001054:	f002 ff1b 	bl	8003e8e <HAL_I2CEx_ConfigAnalogFilter>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800105e:	f000 fac7 	bl	80015f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001062:	2100      	movs	r1, #0
 8001064:	4804      	ldr	r0, [pc, #16]	; (8001078 <MX_I2C1_Init+0x74>)
 8001066:	f002 ff4e 	bl	8003f06 <HAL_I2CEx_ConfigDigitalFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001070:	f000 fabe 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000038c 	.word	0x2000038c
 800107c:	40005400 	.word	0x40005400
 8001080:	000186a0 	.word	0x000186a0

08001084 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_TIM11_Init+0x40>)
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <MX_TIM11_Init+0x44>)
 800108c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <MX_TIM11_Init+0x40>)
 8001090:	22a7      	movs	r2, #167	; 0xa7
 8001092:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_TIM11_Init+0x40>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800109a:	4b0a      	ldr	r3, [pc, #40]	; (80010c4 <MX_TIM11_Init+0x40>)
 800109c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010a0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <MX_TIM11_Init+0x40>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <MX_TIM11_Init+0x40>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_TIM11_Init+0x40>)
 80010b0:	f003 fd50 	bl	8004b54 <HAL_TIM_Base_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 80010ba:	f000 fa99 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200003e0 	.word	0x200003e0
 80010c8:	40014800 	.word	0x40014800

080010cc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <MX_USART3_UART_Init+0x4c>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <MX_USART3_UART_Init+0x50>)
 80010d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <MX_USART3_UART_Init+0x4c>)
 80010d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80010dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010de:	4b0e      	ldr	r3, [pc, #56]	; (8001118 <MX_USART3_UART_Init+0x4c>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_USART3_UART_Init+0x4c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <MX_USART3_UART_Init+0x4c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f0:	4b09      	ldr	r3, [pc, #36]	; (8001118 <MX_USART3_UART_Init+0x4c>)
 80010f2:	220c      	movs	r2, #12
 80010f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <MX_USART3_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010fc:	4b06      	ldr	r3, [pc, #24]	; (8001118 <MX_USART3_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001102:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_USART3_UART_Init+0x4c>)
 8001104:	f003 ffca 	bl	800509c <HAL_UART_Init>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800110e:	f000 fa6f 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000428 	.word	0x20000428
 800111c:	40004800 	.word	0x40004800

08001120 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001126:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800112a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800112c:	4b12      	ldr	r3, [pc, #72]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800112e:	2204      	movs	r2, #4
 8001130:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001132:	4b11      	ldr	r3, [pc, #68]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001134:	2202      	movs	r2, #2
 8001136:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800113e:	4b0e      	ldr	r3, [pc, #56]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001140:	2202      	movs	r2, #2
 8001142:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001146:	2201      	movs	r2, #1
 8001148:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001158:	2201      	movs	r2, #1
 800115a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	; (8001178 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001164:	f002 ff0e 	bl	8003f84 <HAL_PCD_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800116e:	f000 fa3f 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	2000046c 	.word	0x2000046c

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08e      	sub	sp, #56	; 0x38
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
 8001196:	4ba0      	ldr	r3, [pc, #640]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a9f      	ldr	r2, [pc, #636]	; (8001418 <MX_GPIO_Init+0x29c>)
 800119c:	f043 0310 	orr.w	r3, r3, #16
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b9d      	ldr	r3, [pc, #628]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	623b      	str	r3, [r7, #32]
 80011ac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	4b99      	ldr	r3, [pc, #612]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a98      	ldr	r2, [pc, #608]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b96      	ldr	r3, [pc, #600]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	61fb      	str	r3, [r7, #28]
 80011c8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	4b92      	ldr	r3, [pc, #584]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a91      	ldr	r2, [pc, #580]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011d4:	f043 0320 	orr.w	r3, r3, #32
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b8f      	ldr	r3, [pc, #572]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0320 	and.w	r3, r3, #32
 80011e2:	61bb      	str	r3, [r7, #24]
 80011e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
 80011ea:	4b8b      	ldr	r3, [pc, #556]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a8a      	ldr	r2, [pc, #552]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b88      	ldr	r3, [pc, #544]	; (8001418 <MX_GPIO_Init+0x29c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	617b      	str	r3, [r7, #20]
 8001200:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b84      	ldr	r3, [pc, #528]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a83      	ldr	r2, [pc, #524]	; (8001418 <MX_GPIO_Init+0x29c>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b81      	ldr	r3, [pc, #516]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b7d      	ldr	r3, [pc, #500]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a7c      	ldr	r2, [pc, #496]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b7a      	ldr	r3, [pc, #488]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b76      	ldr	r3, [pc, #472]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	4a75      	ldr	r2, [pc, #468]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001248:	6313      	str	r3, [r2, #48]	; 0x30
 800124a:	4b73      	ldr	r3, [pc, #460]	; (8001418 <MX_GPIO_Init+0x29c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b6f      	ldr	r3, [pc, #444]	; (8001418 <MX_GPIO_Init+0x29c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a6e      	ldr	r2, [pc, #440]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001260:	f043 0308 	orr.w	r3, r3, #8
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b6c      	ldr	r3, [pc, #432]	; (8001418 <MX_GPIO_Init+0x29c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0308 	and.w	r3, r3, #8
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 8001272:	2200      	movs	r2, #0
 8001274:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
 8001278:	4868      	ldr	r0, [pc, #416]	; (800141c <MX_GPIO_Init+0x2a0>)
 800127a:	f002 f98b 	bl	8003594 <HAL_GPIO_WritePin>
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, FND_g_Pin|FND_f_Pin|FND_e_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	2107      	movs	r1, #7
 8001282:	4867      	ldr	r0, [pc, #412]	; (8001420 <MX_GPIO_Init+0x2a4>)
 8001284:	f002 f986 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001288:	2200      	movs	r2, #0
 800128a:	f244 0181 	movw	r1, #16513	; 0x4081
 800128e:	4865      	ldr	r0, [pc, #404]	; (8001424 <MX_GPIO_Init+0x2a8>)
 8001290:	f002 f980 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 8001294:	2200      	movs	r2, #0
 8001296:	f647 01ff 	movw	r1, #30975	; 0x78ff
 800129a:	4863      	ldr	r0, [pc, #396]	; (8001428 <MX_GPIO_Init+0x2ac>)
 800129c:	f002 f97a 	bl	8003594 <HAL_GPIO_WritePin>
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80012a0:	2200      	movs	r2, #0
 80012a2:	2140      	movs	r1, #64	; 0x40
 80012a4:	4861      	ldr	r0, [pc, #388]	; (800142c <MX_GPIO_Init+0x2b0>)
 80012a6:	f002 f975 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FND_a_Pin|FND_b_Pin|FND_c_Pin|FND_d_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80012b0:	485f      	ldr	r0, [pc, #380]	; (8001430 <MX_GPIO_Init+0x2b4>)
 80012b2:	f002 f96f 	bl	8003594 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin
                           COL5_Pin COL6_Pin COL7_Pin COL8_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin
 80012b6:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
                          |COL5_Pin|COL6_Pin|COL7_Pin|COL8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	4619      	mov	r1, r3
 80012ce:	4853      	ldr	r0, [pc, #332]	; (800141c <MX_GPIO_Init+0x2a0>)
 80012d0:	f001 ff9c 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e8:	4619      	mov	r1, r3
 80012ea:	4851      	ldr	r0, [pc, #324]	; (8001430 <MX_GPIO_Init+0x2b4>)
 80012ec:	f001 ff8e 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_g_Pin FND_f_Pin FND_e_Pin */
  GPIO_InitStruct.Pin = FND_g_Pin|FND_f_Pin|FND_e_Pin;
 80012f0:	2307      	movs	r3, #7
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f4:	2301      	movs	r3, #1
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001300:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001304:	4619      	mov	r1, r3
 8001306:	4846      	ldr	r0, [pc, #280]	; (8001420 <MX_GPIO_Init+0x2a4>)
 8001308:	f001 ff80 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800130c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	483f      	ldr	r0, [pc, #252]	; (8001424 <MX_GPIO_Init+0x2a8>)
 8001326:	f001 ff71 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHOTO1_Pin PHOTO2_Pin PHOTO3_Pin PHOTO4_Pin */
  GPIO_InitStruct.Pin = PHOTO1_Pin|PHOTO2_Pin|PHOTO3_Pin|PHOTO4_Pin;
 800132a:	230f      	movs	r3, #15
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800132e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133c:	4619      	mov	r1, r3
 800133e:	483b      	ldr	r0, [pc, #236]	; (800142c <MX_GPIO_Init+0x2b0>)
 8001340:	f001 ff64 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON2_Pin BUTTON1_Pin BUTTON0_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON2_Pin|BUTTON1_Pin|BUTTON0_Pin;
 8001344:	f44f 4354 	mov.w	r3, #54272	; 0xd400
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	4830      	ldr	r0, [pc, #192]	; (800141c <MX_GPIO_Init+0x2a0>)
 800135a:	f001 ff57 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : IN1_Pin IN2_Pin IN3_Pin IN4_Pin
                           ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin
                           ROW5_Pin ROW6_Pin ROW7_Pin ROW8_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin|IN3_Pin|IN4_Pin
 800135e:	f647 03ff 	movw	r3, #30975	; 0x78ff
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin
                          |ROW5_Pin|ROW6_Pin|ROW7_Pin|ROW8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001364:	2301      	movs	r3, #1
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136c:	2300      	movs	r3, #0
 800136e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001374:	4619      	mov	r1, r3
 8001376:	482c      	ldr	r0, [pc, #176]	; (8001428 <MX_GPIO_Init+0x2ac>)
 8001378:	f001 ff48 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800137c:	2340      	movs	r3, #64	; 0x40
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001390:	4619      	mov	r1, r3
 8001392:	4826      	ldr	r0, [pc, #152]	; (800142c <MX_GPIO_Init+0x2b0>)
 8001394:	f001 ff3a 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a8:	4619      	mov	r1, r3
 80013aa:	4820      	ldr	r0, [pc, #128]	; (800142c <MX_GPIO_Init+0x2b0>)
 80013ac:	f001 ff2e 	bl	800320c <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_a_Pin FND_b_Pin FND_c_Pin FND_d_Pin */
  GPIO_InitStruct.Pin = FND_a_Pin|FND_b_Pin|FND_c_Pin|FND_d_Pin;
 80013b0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4819      	ldr	r0, [pc, #100]	; (8001430 <MX_GPIO_Init+0x2b4>)
 80013ca:	f001 ff1f 	bl	800320c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2105      	movs	r1, #5
 80013d2:	2006      	movs	r0, #6
 80013d4:	f001 fb36 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80013d8:	2006      	movs	r0, #6
 80013da:	f001 fb4f 	bl	8002a7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	2105      	movs	r1, #5
 80013e2:	2007      	movs	r0, #7
 80013e4:	f001 fb2e 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80013e8:	2007      	movs	r0, #7
 80013ea:	f001 fb47 	bl	8002a7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2105      	movs	r1, #5
 80013f2:	2008      	movs	r0, #8
 80013f4:	f001 fb26 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80013f8:	2008      	movs	r0, #8
 80013fa:	f001 fb3f 	bl	8002a7c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2105      	movs	r1, #5
 8001402:	2009      	movs	r0, #9
 8001404:	f001 fb1e 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001408:	2009      	movs	r0, #9
 800140a:	f001 fb37 	bl	8002a7c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140e:	bf00      	nop
 8001410:	3738      	adds	r7, #56	; 0x38
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40023800 	.word	0x40023800
 800141c:	40021000 	.word	0x40021000
 8001420:	40021400 	.word	0x40021400
 8001424:	40020400 	.word	0x40020400
 8001428:	40020c00 	.word	0x40020c00
 800142c:	40021800 	.word	0x40021800
 8001430:	40020800 	.word	0x40020800

08001434 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	  // button control
	  if (elevator_go_flag == 0 && get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <StartDefaultTask+0xb4>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d12b      	bne.n	800149c <StartDefaultTask+0x68>
 8001444:	2200      	movs	r2, #0
 8001446:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144a:	4828      	ldr	r0, [pc, #160]	; (80014ec <StartDefaultTask+0xb8>)
 800144c:	f7ff f84e 	bl	80004ec <get_button>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d122      	bne.n	800149c <StartDefaultTask+0x68>
	  {
		  if (++go_floor == current_floor)
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <StartDefaultTask+0xbc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	3301      	adds	r3, #1
 800145c:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <StartDefaultTask+0xbc>)
 800145e:	6013      	str	r3, [r2, #0]
 8001460:	4b23      	ldr	r3, [pc, #140]	; (80014f0 <StartDefaultTask+0xbc>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b23      	ldr	r3, [pc, #140]	; (80014f4 <StartDefaultTask+0xc0>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	429a      	cmp	r2, r3
 800146a:	d104      	bne.n	8001476 <StartDefaultTask+0x42>
		  {
			  ++go_floor;
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <StartDefaultTask+0xbc>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3301      	adds	r3, #1
 8001472:	4a1f      	ldr	r2, [pc, #124]	; (80014f0 <StartDefaultTask+0xbc>)
 8001474:	6013      	str	r3, [r2, #0]
		  }
		  go_floor %= 5;
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <StartDefaultTask+0xbc>)
 8001478:	6819      	ldr	r1, [r3, #0]
 800147a:	4b1f      	ldr	r3, [pc, #124]	; (80014f8 <StartDefaultTask+0xc4>)
 800147c:	fb83 2301 	smull	r2, r3, r3, r1
 8001480:	105a      	asrs	r2, r3, #1
 8001482:	17cb      	asrs	r3, r1, #31
 8001484:	1ad2      	subs	r2, r2, r3
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	1aca      	subs	r2, r1, r3
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <StartDefaultTask+0xbc>)
 8001490:	601a      	str	r2, [r3, #0]
		  elevator_lcd(p_go_floor);
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <StartDefaultTask+0xc8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fa9a 	bl	80009d0 <elevator_lcd>
	  }

	  if (go_floor != 0 && get_button(BUTTON1_GPIO_Port, BUTTON1_Pin, 1) == BUTTON_PRESS)
 800149c:	4b14      	ldr	r3, [pc, #80]	; (80014f0 <StartDefaultTask+0xbc>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d018      	beq.n	80014d6 <StartDefaultTask+0xa2>
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014aa:	4810      	ldr	r0, [pc, #64]	; (80014ec <StartDefaultTask+0xb8>)
 80014ac:	f7ff f81e 	bl	80004ec <get_button>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10f      	bne.n	80014d6 <StartDefaultTask+0xa2>
	  {
		  if (current_floor < go_floor)
 80014b6:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <StartDefaultTask+0xc0>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <StartDefaultTask+0xbc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	da03      	bge.n	80014ca <StartDefaultTask+0x96>
		  {
			  direction = 0;
 80014c2:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <StartDefaultTask+0xcc>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e002      	b.n	80014d0 <StartDefaultTask+0x9c>
		  }
		  else
		  {
			  direction = 1;
 80014ca:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <StartDefaultTask+0xcc>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
		  }
		  elevator_go_flag = 1;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <StartDefaultTask+0xb4>)
 80014d2:	2201      	movs	r2, #1
 80014d4:	601a      	str	r2, [r3, #0]
	  }

	  fnd(current_floor);
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <StartDefaultTask+0xc0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff f998 	bl	8000810 <fnd>


    osDelay(1);
 80014e0:	2001      	movs	r0, #1
 80014e2:	f005 f911 	bl	8006708 <osDelay>
	  if (elevator_go_flag == 0 && get_button(BUTTON0_GPIO_Port, BUTTON0_Pin, 0) == BUTTON_PRESS)
 80014e6:	e7a9      	b.n	800143c <StartDefaultTask+0x8>
 80014e8:	20000990 	.word	0x20000990
 80014ec:	40021000 	.word	0x40021000
 80014f0:	20000988 	.word	0x20000988
 80014f4:	20000080 	.word	0x20000080
 80014f8:	66666667 	.word	0x66666667
 80014fc:	20000084 	.word	0x20000084
 8001500:	2000098c 	.word	0x2000098c

08001504 <Task_dotmatix_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_dotmatix_func */
void Task_dotmatix_func(void *argument)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_dotmatix_func */
  /* Infinite loop */
  for(;;)
  {
	  // elevator move
	  if (elevator_go_flag == 1)
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <Task_dotmatix_func+0x30>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d109      	bne.n	8001528 <Task_dotmatix_func+0x24>
	  {
		  if (direction == 0)
 8001514:	4b08      	ldr	r3, [pc, #32]	; (8001538 <Task_dotmatix_func+0x34>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d102      	bne.n	8001522 <Task_dotmatix_func+0x1e>
		  {
//			  dotmatrix_main_test();
			  dotmatrix_up();
 800151c:	f7ff f88c 	bl	8000638 <dotmatrix_up>
 8001520:	e004      	b.n	800152c <Task_dotmatix_func+0x28>
		  }
		  else
		  {
			  dotmatix_down();
 8001522:	f7ff f8ef 	bl	8000704 <dotmatix_down>
 8001526:	e001      	b.n	800152c <Task_dotmatix_func+0x28>
		  }
	  }
	  // elevator stop
	  else
	  {
		  dotmatrix_stop();
 8001528:	f7ff f952 	bl	80007d0 <dotmatrix_stop>
	  }
    osDelay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f005 f8eb 	bl	8006708 <osDelay>
	  if (elevator_go_flag == 1)
 8001532:	e7eb      	b.n	800150c <Task_dotmatix_func+0x8>
 8001534:	20000990 	.word	0x20000990
 8001538:	2000098c 	.word	0x2000098c

0800153c <Task_elevator_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task_elevator_func */
void Task_elevator_func(void *argument)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task_elevator_func */
	HAL_ADC_Start_IT(&hadc1);
 8001544:	481a      	ldr	r0, [pc, #104]	; (80015b0 <Task_elevator_func+0x74>)
 8001546:	f000 fd7d 	bl	8002044 <HAL_ADC_Start_IT>
  /* Infinite loop */
  for(;;)
  {
	  if (elevator_go_flag == 1)
 800154a:	4b1a      	ldr	r3, [pc, #104]	; (80015b4 <Task_elevator_func+0x78>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d12a      	bne.n	80015a8 <Task_elevator_func+0x6c>
	  {
		  stepmotor_driver(direction);
 8001552:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <Task_elevator_func+0x7c>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f000 f850 	bl	80015fc <stepmotor_driver>

		  if (current_floor == go_floor)
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <Task_elevator_func+0x80>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <Task_elevator_func+0x84>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	429a      	cmp	r2, r3
 8001566:	d10a      	bne.n	800157e <Task_elevator_func+0x42>
		  {
			  elevator_go_flag = 0;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <Task_elevator_func+0x78>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
			  go_floor = 0;
 800156e:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <Task_elevator_func+0x84>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
			  elevator_lcd(p_go_floor);
 8001574:	4b13      	ldr	r3, [pc, #76]	; (80015c4 <Task_elevator_func+0x88>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff fa29 	bl	80009d0 <elevator_lcd>
		  }

		  if (adcValue < 3000)
 800157e:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <Task_elevator_func+0x8c>)
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001586:	4293      	cmp	r3, r2
 8001588:	d80e      	bhi.n	80015a8 <Task_elevator_func+0x6c>
		  {
			  if (direction == 0)
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <Task_elevator_func+0x7c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d105      	bne.n	800159e <Task_elevator_func+0x62>
			  {
				  go_floor = current_floor + 1;
 8001592:	4b0a      	ldr	r3, [pc, #40]	; (80015bc <Task_elevator_func+0x80>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <Task_elevator_func+0x84>)
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e004      	b.n	80015a8 <Task_elevator_func+0x6c>
			  }
			  else
			  {
				  go_floor = current_floor - 1;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <Task_elevator_func+0x80>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3b01      	subs	r3, #1
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <Task_elevator_func+0x84>)
 80015a6:	6013      	str	r3, [r2, #0]
			  }
		  }
	  }
    osDelay(1);
 80015a8:	2001      	movs	r0, #1
 80015aa:	f005 f8ad 	bl	8006708 <osDelay>
	  if (elevator_go_flag == 1)
 80015ae:	e7cc      	b.n	800154a <Task_elevator_func+0xe>
 80015b0:	20000294 	.word	0x20000294
 80015b4:	20000990 	.word	0x20000990
 80015b8:	2000098c 	.word	0x2000098c
 80015bc:	20000080 	.word	0x20000080
 80015c0:	20000988 	.word	0x20000988
 80015c4:	20000084 	.word	0x20000084
 80015c8:	20000984 	.word	0x20000984

080015cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015de:	f000 fca9 	bl	8001f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40001000 	.word	0x40001000

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <Error_Handler+0x8>
	...

080015fc <stepmotor_driver>:

// direction : 0 - IDLE
//			   1 - clockwise
//			   2 -
void stepmotor_driver(int direction)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
	static int step = 0;
	switch (step)
 8001604:	4b83      	ldr	r3, [pc, #524]	; (8001814 <stepmotor_driver+0x218>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b07      	cmp	r3, #7
 800160a:	f200 80db 	bhi.w	80017c4 <stepmotor_driver+0x1c8>
 800160e:	a201      	add	r2, pc, #4	; (adr r2, 8001614 <stepmotor_driver+0x18>)
 8001610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001614:	08001635 	.word	0x08001635
 8001618:	08001667 	.word	0x08001667
 800161c:	08001699 	.word	0x08001699
 8001620:	080016cb 	.word	0x080016cb
 8001624:	080016fd 	.word	0x080016fd
 8001628:	0800172f 	.word	0x0800172f
 800162c:	08001761 	.word	0x08001761
 8001630:	08001793 	.word	0x08001793
	{
		case 0:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163a:	4877      	ldr	r0, [pc, #476]	; (8001818 <stepmotor_driver+0x21c>)
 800163c:	f001 ffaa 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001646:	4874      	ldr	r0, [pc, #464]	; (8001818 <stepmotor_driver+0x21c>)
 8001648:	f001 ffa4 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 800164c:	2200      	movs	r2, #0
 800164e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001652:	4871      	ldr	r0, [pc, #452]	; (8001818 <stepmotor_driver+0x21c>)
 8001654:	f001 ff9e 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800165e:	486e      	ldr	r0, [pc, #440]	; (8001818 <stepmotor_driver+0x21c>)
 8001660:	f001 ff98 	bl	8003594 <HAL_GPIO_WritePin>
			break;
 8001664:	e0ae      	b.n	80017c4 <stepmotor_driver+0x1c8>
		case 1:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800166c:	486a      	ldr	r0, [pc, #424]	; (8001818 <stepmotor_driver+0x21c>)
 800166e:	f001 ff91 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 8001672:	2201      	movs	r2, #1
 8001674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001678:	4867      	ldr	r0, [pc, #412]	; (8001818 <stepmotor_driver+0x21c>)
 800167a:	f001 ff8b 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 800167e:	2200      	movs	r2, #0
 8001680:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001684:	4864      	ldr	r0, [pc, #400]	; (8001818 <stepmotor_driver+0x21c>)
 8001686:	f001 ff85 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001690:	4861      	ldr	r0, [pc, #388]	; (8001818 <stepmotor_driver+0x21c>)
 8001692:	f001 ff7f 	bl	8003594 <HAL_GPIO_WritePin>
			break;
 8001696:	e095      	b.n	80017c4 <stepmotor_driver+0x1c8>
		case 2:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800169e:	485e      	ldr	r0, [pc, #376]	; (8001818 <stepmotor_driver+0x21c>)
 80016a0:	f001 ff78 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 80016a4:	2201      	movs	r2, #1
 80016a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016aa:	485b      	ldr	r0, [pc, #364]	; (8001818 <stepmotor_driver+0x21c>)
 80016ac:	f001 ff72 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016b6:	4858      	ldr	r0, [pc, #352]	; (8001818 <stepmotor_driver+0x21c>)
 80016b8:	f001 ff6c 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c2:	4855      	ldr	r0, [pc, #340]	; (8001818 <stepmotor_driver+0x21c>)
 80016c4:	f001 ff66 	bl	8003594 <HAL_GPIO_WritePin>
			break;
 80016c8:	e07c      	b.n	80017c4 <stepmotor_driver+0x1c8>
		case 3:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d0:	4851      	ldr	r0, [pc, #324]	; (8001818 <stepmotor_driver+0x21c>)
 80016d2:	f001 ff5f 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 1);
 80016d6:	2201      	movs	r2, #1
 80016d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016dc:	484e      	ldr	r0, [pc, #312]	; (8001818 <stepmotor_driver+0x21c>)
 80016de:	f001 ff59 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 80016e2:	2201      	movs	r2, #1
 80016e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016e8:	484b      	ldr	r0, [pc, #300]	; (8001818 <stepmotor_driver+0x21c>)
 80016ea:	f001 ff53 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f4:	4848      	ldr	r0, [pc, #288]	; (8001818 <stepmotor_driver+0x21c>)
 80016f6:	f001 ff4d 	bl	8003594 <HAL_GPIO_WritePin>
			break;
 80016fa:	e063      	b.n	80017c4 <stepmotor_driver+0x1c8>
		case 4:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001702:	4845      	ldr	r0, [pc, #276]	; (8001818 <stepmotor_driver+0x21c>)
 8001704:	f001 ff46 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800170e:	4842      	ldr	r0, [pc, #264]	; (8001818 <stepmotor_driver+0x21c>)
 8001710:	f001 ff40 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800171a:	483f      	ldr	r0, [pc, #252]	; (8001818 <stepmotor_driver+0x21c>)
 800171c:	f001 ff3a 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001726:	483c      	ldr	r0, [pc, #240]	; (8001818 <stepmotor_driver+0x21c>)
 8001728:	f001 ff34 	bl	8003594 <HAL_GPIO_WritePin>
			break;
 800172c:	e04a      	b.n	80017c4 <stepmotor_driver+0x1c8>
		case 5:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001734:	4838      	ldr	r0, [pc, #224]	; (8001818 <stepmotor_driver+0x21c>)
 8001736:	f001 ff2d 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001740:	4835      	ldr	r0, [pc, #212]	; (8001818 <stepmotor_driver+0x21c>)
 8001742:	f001 ff27 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 1);
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800174c:	4832      	ldr	r0, [pc, #200]	; (8001818 <stepmotor_driver+0x21c>)
 800174e:	f001 ff21 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001752:	2201      	movs	r2, #1
 8001754:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001758:	482f      	ldr	r0, [pc, #188]	; (8001818 <stepmotor_driver+0x21c>)
 800175a:	f001 ff1b 	bl	8003594 <HAL_GPIO_WritePin>
			break;
 800175e:	e031      	b.n	80017c4 <stepmotor_driver+0x1c8>
		case 6:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001766:	482c      	ldr	r0, [pc, #176]	; (8001818 <stepmotor_driver+0x21c>)
 8001768:	f001 ff14 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 800176c:	2200      	movs	r2, #0
 800176e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001772:	4829      	ldr	r0, [pc, #164]	; (8001818 <stepmotor_driver+0x21c>)
 8001774:	f001 ff0e 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177e:	4826      	ldr	r0, [pc, #152]	; (8001818 <stepmotor_driver+0x21c>)
 8001780:	f001 ff08 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 8001784:	2201      	movs	r2, #1
 8001786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800178a:	4823      	ldr	r0, [pc, #140]	; (8001818 <stepmotor_driver+0x21c>)
 800178c:	f001 ff02 	bl	8003594 <HAL_GPIO_WritePin>
			break;
 8001790:	e018      	b.n	80017c4 <stepmotor_driver+0x1c8>
		case 7:
			HAL_GPIO_WritePin(GPIOD, IN1_Pin, 1);
 8001792:	2201      	movs	r2, #1
 8001794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001798:	481f      	ldr	r0, [pc, #124]	; (8001818 <stepmotor_driver+0x21c>)
 800179a:	f001 fefb 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN2_Pin, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017a4:	481c      	ldr	r0, [pc, #112]	; (8001818 <stepmotor_driver+0x21c>)
 80017a6:	f001 fef5 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN3_Pin, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b0:	4819      	ldr	r0, [pc, #100]	; (8001818 <stepmotor_driver+0x21c>)
 80017b2:	f001 feef 	bl	8003594 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, IN4_Pin, 1);
 80017b6:	2201      	movs	r2, #1
 80017b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017bc:	4816      	ldr	r0, [pc, #88]	; (8001818 <stepmotor_driver+0x21c>)
 80017be:	f001 fee9 	bl	8003594 <HAL_GPIO_WritePin>
			break;
 80017c2:	bf00      	nop
	}

	if (direction == 0)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d110      	bne.n	80017ec <stepmotor_driver+0x1f0>
	{
		step++;		// for (step=0; step < 0; step++
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <stepmotor_driver+0x218>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	3301      	adds	r3, #1
 80017d0:	4a10      	ldr	r2, [pc, #64]	; (8001814 <stepmotor_driver+0x218>)
 80017d2:	6013      	str	r3, [r2, #0]
		step %= 8;
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <stepmotor_driver+0x218>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	425a      	negs	r2, r3
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	f002 0207 	and.w	r2, r2, #7
 80017e2:	bf58      	it	pl
 80017e4:	4253      	negpl	r3, r2
 80017e6:	4a0b      	ldr	r2, [pc, #44]	; (8001814 <stepmotor_driver+0x218>)
 80017e8:	6013      	str	r3, [r2, #0]
	{
		step--;
		if (step < 0) step = 7;
//		set_rpm(13);
	}
}
 80017ea:	e00e      	b.n	800180a <stepmotor_driver+0x20e>
	else if (direction == 1)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d10b      	bne.n	800180a <stepmotor_driver+0x20e>
		step--;
 80017f2:	4b08      	ldr	r3, [pc, #32]	; (8001814 <stepmotor_driver+0x218>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	4a06      	ldr	r2, [pc, #24]	; (8001814 <stepmotor_driver+0x218>)
 80017fa:	6013      	str	r3, [r2, #0]
		if (step < 0) step = 7;
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <stepmotor_driver+0x218>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	da02      	bge.n	800180a <stepmotor_driver+0x20e>
 8001804:	4b03      	ldr	r3, [pc, #12]	; (8001814 <stepmotor_driver+0x218>)
 8001806:	2207      	movs	r2, #7
 8001808:	601a      	str	r2, [r3, #0]
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000099c 	.word	0x2000099c
 8001818:	40020c00 	.word	0x40020c00

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_MspInit+0x54>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_MspInit+0x54>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_MspInit+0x54>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_MspInit+0x54>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a0a      	ldr	r2, [pc, #40]	; (8001870 <HAL_MspInit+0x54>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <HAL_MspInit+0x54>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800185a:	2200      	movs	r2, #0
 800185c:	210f      	movs	r1, #15
 800185e:	f06f 0001 	mvn.w	r0, #1
 8001862:	f001 f8ef 	bl	8002a44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800

08001874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <HAL_ADC_MspInit+0x8c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d12f      	bne.n	80018f6 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b1a      	ldr	r3, [pc, #104]	; (8001904 <HAL_ADC_MspInit+0x90>)
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a4:	6453      	str	r3, [r2, #68]	; 0x44
 80018a6:	4b17      	ldr	r3, [pc, #92]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a12      	ldr	r2, [pc, #72]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b10      	ldr	r3, [pc, #64]	; (8001904 <HAL_ADC_MspInit+0x90>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80018ce:	2310      	movs	r3, #16
 80018d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018d2:	2303      	movs	r3, #3
 80018d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	4809      	ldr	r0, [pc, #36]	; (8001908 <HAL_ADC_MspInit+0x94>)
 80018e2:	f001 fc93 	bl	800320c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 80018e6:	2200      	movs	r2, #0
 80018e8:	2105      	movs	r1, #5
 80018ea:	2012      	movs	r0, #18
 80018ec:	f001 f8aa 	bl	8002a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80018f0:	2012      	movs	r0, #18
 80018f2:	f001 f8c3 	bl	8002a7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40012000 	.word	0x40012000
 8001904:	40023800 	.word	0x40023800
 8001908:	40020000 	.word	0x40020000

0800190c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	; 0x38
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001914:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
 800191c:	605a      	str	r2, [r3, #4]
 800191e:	609a      	str	r2, [r3, #8]
 8001920:	60da      	str	r2, [r3, #12]
 8001922:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a55      	ldr	r2, [pc, #340]	; (8001a80 <HAL_ETH_MspInit+0x174>)
 800192a:	4293      	cmp	r3, r2
 800192c:	f040 80a4 	bne.w	8001a78 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001930:	2300      	movs	r3, #0
 8001932:	623b      	str	r3, [r7, #32]
 8001934:	4b53      	ldr	r3, [pc, #332]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 8001936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001938:	4a52      	ldr	r2, [pc, #328]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 800193a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800193e:	6313      	str	r3, [r2, #48]	; 0x30
 8001940:	4b50      	ldr	r3, [pc, #320]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001948:	623b      	str	r3, [r7, #32]
 800194a:	6a3b      	ldr	r3, [r7, #32]
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 8001952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001954:	4a4b      	ldr	r2, [pc, #300]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 8001956:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800195a:	6313      	str	r3, [r2, #48]	; 0x30
 800195c:	4b49      	ldr	r3, [pc, #292]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	2300      	movs	r3, #0
 800196a:	61bb      	str	r3, [r7, #24]
 800196c:	4b45      	ldr	r3, [pc, #276]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 800196e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001970:	4a44      	ldr	r2, [pc, #272]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 8001972:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001976:	6313      	str	r3, [r2, #48]	; 0x30
 8001978:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 800197a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	4b3e      	ldr	r3, [pc, #248]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198c:	4a3d      	ldr	r2, [pc, #244]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6313      	str	r3, [r2, #48]	; 0x30
 8001994:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 8001996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	617b      	str	r3, [r7, #20]
 800199e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	2300      	movs	r3, #0
 80019a2:	613b      	str	r3, [r7, #16]
 80019a4:	4b37      	ldr	r3, [pc, #220]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	4a36      	ldr	r2, [pc, #216]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 80019aa:	f043 0301 	orr.w	r3, r3, #1
 80019ae:	6313      	str	r3, [r2, #48]	; 0x30
 80019b0:	4b34      	ldr	r3, [pc, #208]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 80019b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019bc:	2300      	movs	r3, #0
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	4b30      	ldr	r3, [pc, #192]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 80019c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c4:	4a2f      	ldr	r2, [pc, #188]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	6313      	str	r3, [r2, #48]	; 0x30
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 80019ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d0:	f003 0302 	and.w	r3, r3, #2
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 80019de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e0:	4a28      	ldr	r2, [pc, #160]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 80019e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019e6:	6313      	str	r3, [r2, #48]	; 0x30
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <HAL_ETH_MspInit+0x178>)
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80019f4:	2332      	movs	r3, #50	; 0x32
 80019f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a00:	2303      	movs	r3, #3
 8001a02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a04:	230b      	movs	r3, #11
 8001a06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481e      	ldr	r0, [pc, #120]	; (8001a88 <HAL_ETH_MspInit+0x17c>)
 8001a10:	f001 fbfc 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001a14:	2386      	movs	r3, #134	; 0x86
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a24:	230b      	movs	r3, #11
 8001a26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4817      	ldr	r0, [pc, #92]	; (8001a8c <HAL_ETH_MspInit+0x180>)
 8001a30:	f001 fbec 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a46:	230b      	movs	r3, #11
 8001a48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480f      	ldr	r0, [pc, #60]	; (8001a90 <HAL_ETH_MspInit+0x184>)
 8001a52:	f001 fbdb 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001a56:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a68:	230b      	movs	r3, #11
 8001a6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a70:	4619      	mov	r1, r3
 8001a72:	4808      	ldr	r0, [pc, #32]	; (8001a94 <HAL_ETH_MspInit+0x188>)
 8001a74:	f001 fbca 	bl	800320c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001a78:	bf00      	nop
 8001a7a:	3738      	adds	r7, #56	; 0x38
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40028000 	.word	0x40028000
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40021800 	.word	0x40021800

08001a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <HAL_I2C_MspInit+0x84>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12c      	bne.n	8001b14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ad6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001adc:	2312      	movs	r3, #18
 8001ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ae8:	2304      	movs	r3, #4
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <HAL_I2C_MspInit+0x8c>)
 8001af4:	f001 fb8a 	bl	800320c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af8:	2300      	movs	r3, #0
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b06:	6413      	str	r3, [r2, #64]	; 0x40
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b14:	bf00      	nop
 8001b16:	3728      	adds	r7, #40	; 0x28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020400 	.word	0x40020400

08001b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_TIM_Base_MspInit+0x48>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d115      	bne.n	8001b66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <HAL_TIM_Base_MspInit+0x4c>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <HAL_TIM_Base_MspInit+0x4c>)
 8001b44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <HAL_TIM_Base_MspInit+0x4c>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 5, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	201a      	movs	r0, #26
 8001b5c:	f000 ff72 	bl	8002a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b60:	201a      	movs	r0, #26
 8001b62:	f000 ff8b 	bl	8002a7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40014800 	.word	0x40014800
 8001b74:	40023800 	.word	0x40023800

08001b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a1d      	ldr	r2, [pc, #116]	; (8001c0c <HAL_UART_MspInit+0x94>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d134      	bne.n	8001c04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <HAL_UART_MspInit+0x98>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_UART_MspInit+0x98>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <HAL_UART_MspInit+0x98>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <HAL_UART_MspInit+0x98>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a14      	ldr	r2, [pc, #80]	; (8001c10 <HAL_UART_MspInit+0x98>)
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b12      	ldr	r3, [pc, #72]	; (8001c10 <HAL_UART_MspInit+0x98>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0308 	and.w	r3, r3, #8
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd8:	2302      	movs	r3, #2
 8001bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be0:	2303      	movs	r3, #3
 8001be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001be4:	2307      	movs	r3, #7
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be8:	f107 0314 	add.w	r3, r7, #20
 8001bec:	4619      	mov	r1, r3
 8001bee:	4809      	ldr	r0, [pc, #36]	; (8001c14 <HAL_UART_MspInit+0x9c>)
 8001bf0:	f001 fb0c 	bl	800320c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2105      	movs	r1, #5
 8001bf8:	2027      	movs	r0, #39	; 0x27
 8001bfa:	f000 ff23 	bl	8002a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bfe:	2027      	movs	r0, #39	; 0x27
 8001c00:	f000 ff3c 	bl	8002a7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c04:	bf00      	nop
 8001c06:	3728      	adds	r7, #40	; 0x28
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	40004800 	.word	0x40004800
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020c00 	.word	0x40020c00

08001c18 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c38:	d13f      	bne.n	8001cba <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_PCD_MspInit+0xac>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a20      	ldr	r2, [pc, #128]	; (8001cc4 <HAL_PCD_MspInit+0xac>)
 8001c44:	f043 0301 	orr.w	r3, r3, #1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <HAL_PCD_MspInit+0xac>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001c56:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001c68:	230a      	movs	r3, #10
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <HAL_PCD_MspInit+0xb0>)
 8001c74:	f001 faca 	bl	800320c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480e      	ldr	r0, [pc, #56]	; (8001cc8 <HAL_PCD_MspInit+0xb0>)
 8001c8e:	f001 fabd 	bl	800320c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c92:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <HAL_PCD_MspInit+0xac>)
 8001c94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c96:	4a0b      	ldr	r2, [pc, #44]	; (8001cc4 <HAL_PCD_MspInit+0xac>)
 8001c98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9c:	6353      	str	r3, [r2, #52]	; 0x34
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_PCD_MspInit+0xac>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_PCD_MspInit+0xac>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_PCD_MspInit+0xac>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020000 	.word	0x40020000

08001ccc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08e      	sub	sp, #56	; 0x38
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	4b33      	ldr	r3, [pc, #204]	; (8001db0 <HAL_InitTick+0xe4>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce4:	4a32      	ldr	r2, [pc, #200]	; (8001db0 <HAL_InitTick+0xe4>)
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	6413      	str	r3, [r2, #64]	; 0x40
 8001cec:	4b30      	ldr	r3, [pc, #192]	; (8001db0 <HAL_InitTick+0xe4>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f003 0310 	and.w	r3, r3, #16
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cf8:	f107 0210 	add.w	r2, r7, #16
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4611      	mov	r1, r2
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 fef4 	bl	8004af0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d12:	f002 fec5 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8001d16:	6378      	str	r0, [r7, #52]	; 0x34
 8001d18:	e004      	b.n	8001d24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d1a:	f002 fec1 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d26:	4a23      	ldr	r2, [pc, #140]	; (8001db4 <HAL_InitTick+0xe8>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	0c9b      	lsrs	r3, r3, #18
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d32:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <HAL_InitTick+0xec>)
 8001d34:	4a21      	ldr	r2, [pc, #132]	; (8001dbc <HAL_InitTick+0xf0>)
 8001d36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d38:	4b1f      	ldr	r3, [pc, #124]	; (8001db8 <HAL_InitTick+0xec>)
 8001d3a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d3e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d40:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <HAL_InitTick+0xec>)
 8001d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d44:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d46:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_InitTick+0xec>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4c:	4b1a      	ldr	r3, [pc, #104]	; (8001db8 <HAL_InitTick+0xec>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_InitTick+0xec>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d58:	4817      	ldr	r0, [pc, #92]	; (8001db8 <HAL_InitTick+0xec>)
 8001d5a:	f002 fefb 	bl	8004b54 <HAL_TIM_Base_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d11b      	bne.n	8001da4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d6c:	4812      	ldr	r0, [pc, #72]	; (8001db8 <HAL_InitTick+0xec>)
 8001d6e:	f002 ff41 	bl	8004bf4 <HAL_TIM_Base_Start_IT>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d111      	bne.n	8001da4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d80:	2036      	movs	r0, #54	; 0x36
 8001d82:	f000 fe7b 	bl	8002a7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b0f      	cmp	r3, #15
 8001d8a:	d808      	bhi.n	8001d9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	2036      	movs	r0, #54	; 0x36
 8001d92:	f000 fe57 	bl	8002a44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d96:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_InitTick+0xf4>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e002      	b.n	8001da4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001da4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3738      	adds	r7, #56	; 0x38
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	200009a0 	.word	0x200009a0
 8001dbc:	40001000 	.word	0x40001000
 8001dc0:	2000008c 	.word	0x2000008c

08001dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dc8:	e7fe      	b.n	8001dc8 <NMI_Handler+0x4>

08001dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dca:	b480      	push	{r7}
 8001dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dce:	e7fe      	b.n	8001dce <HardFault_Handler+0x4>

08001dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dd4:	e7fe      	b.n	8001dd4 <MemManage_Handler+0x4>

08001dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dda:	e7fe      	b.n	8001dda <BusFault_Handler+0x4>

08001ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de0:	e7fe      	b.n	8001de0 <UsageFault_Handler+0x4>

08001de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001de2:	b480      	push	{r7}
 8001de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO1_Pin);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f001 fbe7 	bl	80035c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO2_Pin);
 8001e02:	2002      	movs	r0, #2
 8001e04:	f001 fbe0 	bl	80035c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO3_Pin);
 8001e10:	2004      	movs	r0, #4
 8001e12:	f001 fbd9 	bl	80035c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PHOTO4_Pin);
 8001e1e:	2008      	movs	r0, #8
 8001e20:	f001 fbd2 	bl	80035c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <ADC_IRQHandler+0x10>)
 8001e2e:	f000 f9e7 	bl	8002200 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	20000294 	.word	0x20000294

08001e3c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001e42:	f002 ff47 	bl	8004cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200003e0 	.word	0x200003e0

08001e50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <USART3_IRQHandler+0x10>)
 8001e56:	f003 f96f 	bl	8005138 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000428 	.word	0x20000428

08001e64 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <TIM6_DAC_IRQHandler+0x10>)
 8001e6a:	f002 ff33 	bl	8004cd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	200009a0 	.word	0x200009a0

08001e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <SystemInit+0x20>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <SystemInit+0x20>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea2:	490e      	ldr	r1, [pc, #56]	; (8001edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ec6:	f7ff ffd7 	bl	8001e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eca:	f007 f91d 	bl	8009108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ece:	f7fe fec7 	bl	8000c60 <main>
  bx  lr    
 8001ed2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ed4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001ee0:	08009398 	.word	0x08009398
  ldr r2, =_sbss
 8001ee4:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001ee8:	20005514 	.word	0x20005514

08001eec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <CAN1_RX0_IRQHandler>
	...

08001ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <HAL_Init+0x40>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a0d      	ldr	r2, [pc, #52]	; (8001f30 <HAL_Init+0x40>)
 8001efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f00:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_Init+0x40>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0a      	ldr	r2, [pc, #40]	; (8001f30 <HAL_Init+0x40>)
 8001f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_Init+0x40>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_Init+0x40>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f000 fd88 	bl	8002a2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f7ff fed4 	bl	8001ccc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f24:	f7ff fc7a 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40023c00 	.word	0x40023c00

08001f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_IncTick+0x20>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_IncTick+0x24>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4413      	add	r3, r2
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <HAL_IncTick+0x24>)
 8001f46:	6013      	str	r3, [r2, #0]
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000090 	.word	0x20000090
 8001f58:	200009e8 	.word	0x200009e8

08001f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_GetTick+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	200009e8 	.word	0x200009e8

08001f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f7c:	f7ff ffee 	bl	8001f5c <HAL_GetTick>
 8001f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8c:	d005      	beq.n	8001f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_Delay+0x44>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	461a      	mov	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4413      	add	r3, r2
 8001f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f9a:	bf00      	nop
 8001f9c:	f7ff ffde 	bl	8001f5c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d8f7      	bhi.n	8001f9c <HAL_Delay+0x28>
  {
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000090 	.word	0x20000090

08001fbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e033      	b.n	800203a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fc4a 	bl	8001874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f003 0310 	and.w	r3, r3, #16
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002002:	f023 0302 	bic.w	r3, r3, #2
 8002006:	f043 0202 	orr.w	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fb5a 	bl	80026c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	f043 0201 	orr.w	r2, r3, #1
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
 800202a:	e001      	b.n	8002030 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002038:	7bfb      	ldrb	r3, [r7, #15]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_ADC_Start_IT+0x1a>
 800205a:	2302      	movs	r3, #2
 800205c:	e0bd      	b.n	80021da <HAL_ADC_Start_IT+0x196>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d018      	beq.n	80020a6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002084:	4b58      	ldr	r3, [pc, #352]	; (80021e8 <HAL_ADC_Start_IT+0x1a4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_ADC_Start_IT+0x1a8>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0c9a      	lsrs	r2, r3, #18
 8002090:	4613      	mov	r3, r2
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4413      	add	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002098:	e002      	b.n	80020a0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	3b01      	subs	r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f9      	bne.n	800209a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	f040 8085 	bne.w	80021c0 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f4:	d106      	bne.n	8002104 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fa:	f023 0206 	bic.w	r2, r3, #6
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	645a      	str	r2, [r3, #68]	; 0x44
 8002102:	e002      	b.n	800210a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002112:	4b37      	ldr	r3, [pc, #220]	; (80021f0 <HAL_ADC_Start_IT+0x1ac>)
 8002114:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800211e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800212e:	f043 0320 	orr.w	r3, r3, #32
 8002132:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 031f 	and.w	r3, r3, #31
 800213c:	2b00      	cmp	r3, #0
 800213e:	d12a      	bne.n	8002196 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <HAL_ADC_Start_IT+0x1b0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d015      	beq.n	8002176 <HAL_ADC_Start_IT+0x132>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2a      	ldr	r2, [pc, #168]	; (80021f8 <HAL_ADC_Start_IT+0x1b4>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d105      	bne.n	8002160 <HAL_ADC_Start_IT+0x11c>
 8002154:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <HAL_ADC_Start_IT+0x1ac>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a25      	ldr	r2, [pc, #148]	; (80021fc <HAL_ADC_Start_IT+0x1b8>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d136      	bne.n	80021d8 <HAL_ADC_Start_IT+0x194>
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_ADC_Start_IT+0x1ac>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0310 	and.w	r3, r3, #16
 8002172:	2b00      	cmp	r3, #0
 8002174:	d130      	bne.n	80021d8 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d129      	bne.n	80021d8 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002192:	609a      	str	r2, [r3, #8]
 8002194:	e020      	b.n	80021d8 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a16      	ldr	r2, [pc, #88]	; (80021f4 <HAL_ADC_Start_IT+0x1b0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d11b      	bne.n	80021d8 <HAL_ADC_Start_IT+0x194>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d114      	bne.n	80021d8 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021bc:	609a      	str	r2, [r3, #8]
 80021be:	e00b      	b.n	80021d8 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0210 	orr.w	r2, r3, #16
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000088 	.word	0x20000088
 80021ec:	431bde83 	.word	0x431bde83
 80021f0:	40012300 	.word	0x40012300
 80021f4:	40012000 	.word	0x40012000
 80021f8:	40012100 	.word	0x40012100
 80021fc:	40012200 	.word	0x40012200

08002200 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	2300      	movs	r3, #0
 800220e:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 0320 	and.w	r3, r3, #32
 800222e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d049      	beq.n	80022ca <HAL_ADC_IRQHandler+0xca>
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d046      	beq.n	80022ca <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d105      	bne.n	8002254 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d12b      	bne.n	80022ba <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002266:	2b00      	cmp	r3, #0
 8002268:	d127      	bne.n	80022ba <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002274:	2b00      	cmp	r3, #0
 8002276:	d006      	beq.n	8002286 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002282:	2b00      	cmp	r3, #0
 8002284:	d119      	bne.n	80022ba <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 0220 	bic.w	r2, r2, #32
 8002294:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d105      	bne.n	80022ba <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0201 	orr.w	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7fe fcb2 	bl	8000c24 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f06f 0212 	mvn.w	r2, #18
 80022c8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d057      	beq.n	8002390 <HAL_ADC_IRQHandler+0x190>
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d054      	beq.n	8002390 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d139      	bne.n	8002380 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002312:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002316:	2b00      	cmp	r3, #0
 8002318:	d006      	beq.n	8002328 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002324:	2b00      	cmp	r3, #0
 8002326:	d12b      	bne.n	8002380 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002332:	2b00      	cmp	r3, #0
 8002334:	d124      	bne.n	8002380 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	d11d      	bne.n	8002380 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002348:	2b00      	cmp	r3, #0
 800234a:	d119      	bne.n	8002380 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800235a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	f043 0201 	orr.w	r2, r3, #1
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fa9d 	bl	80028c0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f06f 020c 	mvn.w	r2, #12
 800238e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800239e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d017      	beq.n	80023d6 <HAL_ADC_IRQHandler+0x1d6>
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d014      	beq.n	80023d6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10d      	bne.n	80023d6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f837 	bl	800243a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f06f 0201 	mvn.w	r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 0320 	and.w	r3, r3, #32
 80023dc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023e4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_ADC_IRQHandler+0x218>
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d012      	beq.n	8002418 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	f043 0202 	orr.w	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f06f 0220 	mvn.w	r2, #32
 8002406:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f820 	bl	800244e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f06f 0220 	mvn.w	r2, #32
 8002416:	601a      	str	r2, [r3, #0]
  }
}
 8002418:	bf00      	nop
 800241a:	3718      	adds	r7, #24
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}

08002420 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800242e:	4618      	mov	r0, r3
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800243a:	b480      	push	{r7}
 800243c:	b083      	sub	sp, #12
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800244e:	b480      	push	{r7}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800246e:	2300      	movs	r3, #0
 8002470:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x1c>
 800247c:	2302      	movs	r3, #2
 800247e:	e113      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x244>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	2b09      	cmp	r3, #9
 800248e:	d925      	bls.n	80024dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68d9      	ldr	r1, [r3, #12]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	b29b      	uxth	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	3b1e      	subs	r3, #30
 80024a6:	2207      	movs	r2, #7
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43da      	mvns	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	400a      	ands	r2, r1
 80024b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68d9      	ldr	r1, [r3, #12]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4618      	mov	r0, r3
 80024c8:	4603      	mov	r3, r0
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4403      	add	r3, r0
 80024ce:	3b1e      	subs	r3, #30
 80024d0:	409a      	lsls	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	e022      	b.n	8002522 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	6919      	ldr	r1, [r3, #16]
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	2207      	movs	r2, #7
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	400a      	ands	r2, r1
 80024fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6919      	ldr	r1, [r3, #16]
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	4603      	mov	r3, r0
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4403      	add	r3, r0
 8002518:	409a      	lsls	r2, r3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b06      	cmp	r3, #6
 8002528:	d824      	bhi.n	8002574 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4413      	add	r3, r2
 800253a:	3b05      	subs	r3, #5
 800253c:	221f      	movs	r2, #31
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	400a      	ands	r2, r1
 800254a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	4618      	mov	r0, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685a      	ldr	r2, [r3, #4]
 800255e:	4613      	mov	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	4413      	add	r3, r2
 8002564:	3b05      	subs	r3, #5
 8002566:	fa00 f203 	lsl.w	r2, r0, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	635a      	str	r2, [r3, #52]	; 0x34
 8002572:	e04c      	b.n	800260e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b0c      	cmp	r3, #12
 800257a:	d824      	bhi.n	80025c6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	3b23      	subs	r3, #35	; 0x23
 800258e:	221f      	movs	r2, #31
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43da      	mvns	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	400a      	ands	r2, r1
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	4618      	mov	r0, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	3b23      	subs	r3, #35	; 0x23
 80025b8:	fa00 f203 	lsl.w	r2, r0, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	430a      	orrs	r2, r1
 80025c2:	631a      	str	r2, [r3, #48]	; 0x30
 80025c4:	e023      	b.n	800260e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	3b41      	subs	r3, #65	; 0x41
 80025d8:	221f      	movs	r2, #31
 80025da:	fa02 f303 	lsl.w	r3, r2, r3
 80025de:	43da      	mvns	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	400a      	ands	r2, r1
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	4618      	mov	r0, r3
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b41      	subs	r3, #65	; 0x41
 8002602:	fa00 f203 	lsl.w	r2, r0, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800260e:	4b29      	ldr	r3, [pc, #164]	; (80026b4 <HAL_ADC_ConfigChannel+0x250>)
 8002610:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a28      	ldr	r2, [pc, #160]	; (80026b8 <HAL_ADC_ConfigChannel+0x254>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10f      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1d8>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b12      	cmp	r3, #18
 8002622:	d10b      	bne.n	800263c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_ADC_ConfigChannel+0x254>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12b      	bne.n	800269e <HAL_ADC_ConfigChannel+0x23a>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_ADC_ConfigChannel+0x258>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d003      	beq.n	8002658 <HAL_ADC_ConfigChannel+0x1f4>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b11      	cmp	r3, #17
 8002656:	d122      	bne.n	800269e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <HAL_ADC_ConfigChannel+0x258>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d111      	bne.n	800269e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_ADC_ConfigChannel+0x25c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a11      	ldr	r2, [pc, #68]	; (80026c4 <HAL_ADC_ConfigChannel+0x260>)
 8002680:	fba2 2303 	umull	r2, r3, r2, r3
 8002684:	0c9a      	lsrs	r2, r3, #18
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002690:	e002      	b.n	8002698 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	3b01      	subs	r3, #1
 8002696:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f9      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40012300 	.word	0x40012300
 80026b8:	40012000 	.word	0x40012000
 80026bc:	10000012 	.word	0x10000012
 80026c0:	20000088 	.word	0x20000088
 80026c4:	431bde83 	.word	0x431bde83

080026c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026d0:	4b79      	ldr	r3, [pc, #484]	; (80028b8 <ADC_Init+0x1f0>)
 80026d2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685a      	ldr	r2, [r3, #4]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6859      	ldr	r1, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685a      	ldr	r2, [r3, #4]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	6859      	ldr	r1, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002742:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6899      	ldr	r1, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68da      	ldr	r2, [r3, #12]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275a:	4a58      	ldr	r2, [pc, #352]	; (80028bc <ADC_Init+0x1f4>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d022      	beq.n	80027a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689a      	ldr	r2, [r3, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800276e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002790:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6899      	ldr	r1, [r3, #8]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e00f      	b.n	80027c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0202 	bic.w	r2, r2, #2
 80027d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6899      	ldr	r1, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	7e1b      	ldrb	r3, [r3, #24]
 80027e0:	005a      	lsls	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	430a      	orrs	r2, r1
 80027e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01b      	beq.n	800282c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002802:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002812:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	3b01      	subs	r3, #1
 8002820:	035a      	lsls	r2, r3, #13
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	e007      	b.n	800283c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800284a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	3b01      	subs	r3, #1
 8002858:	051a      	lsls	r2, r3, #20
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002870:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800287e:	025a      	lsls	r2, r3, #9
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	430a      	orrs	r2, r1
 8002886:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002896:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6899      	ldr	r1, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	029a      	lsls	r2, r3, #10
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	609a      	str	r2, [r3, #8]
}
 80028ac:	bf00      	nop
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	40012300 	.word	0x40012300
 80028bc:	0f000001 	.word	0x0f000001

080028c0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002906:	4a04      	ldr	r2, [pc, #16]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	60d3      	str	r3, [r2, #12]
}
 800290c:	bf00      	nop
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	; (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	; (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ff4c 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a56:	f7ff ff61 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002a5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	6978      	ldr	r0, [r7, #20]
 8002a62:	f7ff ffb1 	bl	80029c8 <NVIC_EncodePriority>
 8002a66:	4602      	mov	r2, r0
 8002a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ff80 	bl	8002974 <__NVIC_SetPriority>
}
 8002a74:	bf00      	nop
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff54 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aa6:	f7ff fa59 	bl	8001f5c <HAL_GetTick>
 8002aaa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d008      	beq.n	8002aca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e052      	b.n	8002b70 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0216 	bic.w	r2, r2, #22
 8002ad8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695a      	ldr	r2, [r3, #20]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ae8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d103      	bne.n	8002afa <HAL_DMA_Abort+0x62>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d007      	beq.n	8002b0a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0208 	bic.w	r2, r2, #8
 8002b08:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1a:	e013      	b.n	8002b44 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b1c:	f7ff fa1e 	bl	8001f5c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b05      	cmp	r3, #5
 8002b28:	d90c      	bls.n	8002b44 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2203      	movs	r2, #3
 8002b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e015      	b.n	8002b70 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e4      	bne.n	8002b1c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	223f      	movs	r2, #63	; 0x3f
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d004      	beq.n	8002b96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2280      	movs	r2, #128	; 0x80
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e00c      	b.n	8002bb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2205      	movs	r2, #5
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0201 	bic.w	r2, r2, #1
 8002bac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e06c      	b.n	8002ca8 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2223      	movs	r2, #35	; 0x23
 8002bdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7fe fe93 	bl	800190c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	4b31      	ldr	r3, [pc, #196]	; (8002cb0 <HAL_ETH_Init+0xf4>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	4a30      	ldr	r2, [pc, #192]	; (8002cb0 <HAL_ETH_Init+0xf4>)
 8002bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	; (8002cb0 <HAL_ETH_Init+0xf4>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002c02:	4b2c      	ldr	r3, [pc, #176]	; (8002cb4 <HAL_ETH_Init+0xf8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4a2b      	ldr	r2, [pc, #172]	; (8002cb4 <HAL_ETH_Init+0xf8>)
 8002c08:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c0c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002c0e:	4b29      	ldr	r3, [pc, #164]	; (8002cb4 <HAL_ETH_Init+0xf8>)
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4927      	ldr	r1, [pc, #156]	; (8002cb4 <HAL_ETH_Init+0xf8>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002c1c:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_ETH_Init+0xf8>)
 8002c1e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6812      	ldr	r2, [r2, #0]
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002c36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c38:	f7ff f990 	bl	8001f5c <HAL_GetTick>
 8002c3c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c3e:	e011      	b.n	8002c64 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002c40:	f7ff f98c 	bl	8001f5c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c4e:	d909      	bls.n	8002c64 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2204      	movs	r2, #4
 8002c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	22e0      	movs	r2, #224	; 0xe0
 8002c5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e021      	b.n	8002ca8 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1e4      	bne.n	8002c40 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f958 	bl	8002f2c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f9ff 	bl	8003080 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fa55 	bl	8003132 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	2100      	movs	r1, #0
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 f9bd 	bl	8003010 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40013800 	.word	0x40013800

08002cb8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4b51      	ldr	r3, [pc, #324]	; (8002e14 <ETH_SetMACConfig+0x15c>)
 8002cce:	4013      	ands	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	7c1b      	ldrb	r3, [r3, #16]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <ETH_SetMACConfig+0x28>
 8002cda:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002cde:	e000      	b.n	8002ce2 <ETH_SetMACConfig+0x2a>
 8002ce0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	7c5b      	ldrb	r3, [r3, #17]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d102      	bne.n	8002cf0 <ETH_SetMACConfig+0x38>
 8002cea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002cee:	e000      	b.n	8002cf2 <ETH_SetMACConfig+0x3a>
 8002cf0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002cf2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002cf8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	7fdb      	ldrb	r3, [r3, #31]
 8002cfe:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002d00:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002d06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	7f92      	ldrb	r2, [r2, #30]
 8002d0c:	2a00      	cmp	r2, #0
 8002d0e:	d102      	bne.n	8002d16 <ETH_SetMACConfig+0x5e>
 8002d10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d14:	e000      	b.n	8002d18 <ETH_SetMACConfig+0x60>
 8002d16:	2200      	movs	r2, #0
                        macconf->Speed |
 8002d18:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	7f1b      	ldrb	r3, [r3, #28]
 8002d1e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002d20:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002d26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	791b      	ldrb	r3, [r3, #4]
 8002d2c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002d2e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	d102      	bne.n	8002d40 <ETH_SetMACConfig+0x88>
 8002d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3e:	e000      	b.n	8002d42 <ETH_SetMACConfig+0x8a>
 8002d40:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002d42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	7bdb      	ldrb	r3, [r3, #15]
 8002d48:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002d4a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002d50:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002d58:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68fa      	ldr	r2, [r7, #12]
 8002d68:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d72:	2001      	movs	r0, #1
 8002d74:	f7ff f8fe 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699b      	ldr	r3, [r3, #24]
 8002d86:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002d8e:	4013      	ands	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d96:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002d9e:	2a00      	cmp	r2, #0
 8002da0:	d101      	bne.n	8002da6 <ETH_SetMACConfig+0xee>
 8002da2:	2280      	movs	r2, #128	; 0x80
 8002da4:	e000      	b.n	8002da8 <ETH_SetMACConfig+0xf0>
 8002da6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002da8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002dae:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002db6:	2a01      	cmp	r2, #1
 8002db8:	d101      	bne.n	8002dbe <ETH_SetMACConfig+0x106>
 8002dba:	2208      	movs	r2, #8
 8002dbc:	e000      	b.n	8002dc0 <ETH_SetMACConfig+0x108>
 8002dbe:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002dc0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002dc8:	2a01      	cmp	r2, #1
 8002dca:	d101      	bne.n	8002dd0 <ETH_SetMACConfig+0x118>
 8002dcc:	2204      	movs	r2, #4
 8002dce:	e000      	b.n	8002dd2 <ETH_SetMACConfig+0x11a>
 8002dd0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002dd2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002dd4:	683a      	ldr	r2, [r7, #0]
 8002dd6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002dda:	2a01      	cmp	r2, #1
 8002ddc:	d101      	bne.n	8002de2 <ETH_SetMACConfig+0x12a>
 8002dde:	2202      	movs	r2, #2
 8002de0:	e000      	b.n	8002de4 <ETH_SetMACConfig+0x12c>
 8002de2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002de4:	4313      	orrs	r3, r2
 8002de6:	68fa      	ldr	r2, [r7, #12]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dfc:	2001      	movs	r0, #1
 8002dfe:	f7ff f8b9 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	619a      	str	r2, [r3, #24]
}
 8002e0a:	bf00      	nop
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	ff20810f 	.word	0xff20810f

08002e18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4b3d      	ldr	r3, [pc, #244]	; (8002f28 <ETH_SetDMAConfig+0x110>)
 8002e32:	4013      	ands	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	7b1b      	ldrb	r3, [r3, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <ETH_SetDMAConfig+0x2c>
 8002e3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e42:	e000      	b.n	8002e46 <ETH_SetDMAConfig+0x2e>
 8002e44:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	7b5b      	ldrb	r3, [r3, #13]
 8002e4a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e4c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	7f52      	ldrb	r2, [r2, #29]
 8002e52:	2a00      	cmp	r2, #0
 8002e54:	d102      	bne.n	8002e5c <ETH_SetDMAConfig+0x44>
 8002e56:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e5a:	e000      	b.n	8002e5e <ETH_SetDMAConfig+0x46>
 8002e5c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002e5e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	7b9b      	ldrb	r3, [r3, #14]
 8002e64:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002e66:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002e6c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	7f1b      	ldrb	r3, [r3, #28]
 8002e72:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002e74:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	7f9b      	ldrb	r3, [r3, #30]
 8002e7a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002e7c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002e82:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e8a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7ff f860 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	791b      	ldrb	r3, [r3, #4]
 8002ec6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ecc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ed2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ed8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ee0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ee2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002eea:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ef0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002efa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002efe:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	f7ff f831 	bl	8001f74 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6013      	str	r3, [r2, #0]
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	f8de3f23 	.word	0xf8de3f23

08002f2c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b0a6      	sub	sp, #152	; 0x98
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002f40:	2300      	movs	r3, #0
 8002f42:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002f44:	2300      	movs	r3, #0
 8002f46:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002f56:	2301      	movs	r3, #1
 8002f58:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002f72:	2300      	movs	r3, #0
 8002f74:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002f82:	2300      	movs	r3, #0
 8002f84:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002f8e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f92:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002f94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f98:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002fa0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fe86 	bl	8002cb8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002fac:	2301      	movs	r3, #1
 8002fae:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002fdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002fe0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002fe2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002fe6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002fe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002ffc:	f107 0308 	add.w	r3, r7, #8
 8003000:	4619      	mov	r1, r3
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff ff08 	bl	8002e18 <ETH_SetDMAConfig>
}
 8003008:	bf00      	nop
 800300a:	3798      	adds	r7, #152	; 0x98
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3305      	adds	r3, #5
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	3204      	adds	r2, #4
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4b11      	ldr	r3, [pc, #68]	; (8003078 <ETH_MACAddressConfig+0x68>)
 8003032:	4413      	add	r3, r2
 8003034:	461a      	mov	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3303      	adds	r3, #3
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	061a      	lsls	r2, r3, #24
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3302      	adds	r3, #2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3301      	adds	r3, #1
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	4313      	orrs	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	4313      	orrs	r3, r2
 800305c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <ETH_MACAddressConfig+0x6c>)
 8003062:	4413      	add	r3, r2
 8003064:	461a      	mov	r2, r3
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	6013      	str	r3, [r2, #0]
}
 800306a:	bf00      	nop
 800306c:	371c      	adds	r7, #28
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40028040 	.word	0x40028040
 800307c:	40028044 	.word	0x40028044

08003080 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003088:	2300      	movs	r3, #0
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e03e      	b.n	800310c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68d9      	ldr	r1, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4613      	mov	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4413      	add	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	440b      	add	r3, r1
 800309e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2200      	movs	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2200      	movs	r2, #0
 80030b6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	3206      	adds	r2, #6
 80030c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d80c      	bhi.n	80030f0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	68d9      	ldr	r1, [r3, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	4613      	mov	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	440b      	add	r3, r1
 80030e8:	461a      	mov	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	60da      	str	r2, [r3, #12]
 80030ee:	e004      	b.n	80030fa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	461a      	mov	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	3301      	adds	r3, #1
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d9bd      	bls.n	800308e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003124:	611a      	str	r2, [r3, #16]
}
 8003126:	bf00      	nop
 8003128:	3714      	adds	r7, #20
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800313a:	2300      	movs	r3, #0
 800313c:	60fb      	str	r3, [r7, #12]
 800313e:	e046      	b.n	80031ce <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6919      	ldr	r1, [r3, #16]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	4613      	mov	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	440b      	add	r3, r1
 8003150:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2200      	movs	r2, #0
 800315c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2200      	movs	r2, #0
 8003162:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800316a:	68bb      	ldr	r3, [r7, #8]
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	2200      	movs	r2, #0
 8003174:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800317c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003184:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	3212      	adds	r2, #18
 800319a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d80c      	bhi.n	80031be <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6919      	ldr	r1, [r3, #16]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	461a      	mov	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	60da      	str	r2, [r3, #12]
 80031bc:	e004      	b.n	80031c8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d9b5      	bls.n	8003140 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2200      	movs	r2, #0
 80031de:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691a      	ldr	r2, [r3, #16]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031fe:	60da      	str	r2, [r3, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003216:	2300      	movs	r3, #0
 8003218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800321a:	2300      	movs	r3, #0
 800321c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800321e:	2300      	movs	r3, #0
 8003220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	e177      	b.n	8003518 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003228:	2201      	movs	r2, #1
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	4013      	ands	r3, r2
 800323a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	f040 8166 	bne.w	8003512 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 0303 	and.w	r3, r3, #3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d005      	beq.n	800325e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325a:	2b02      	cmp	r3, #2
 800325c:	d130      	bne.n	80032c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	2203      	movs	r2, #3
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68da      	ldr	r2, [r3, #12]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003294:	2201      	movs	r2, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	091b      	lsrs	r3, r3, #4
 80032aa:	f003 0201 	and.w	r2, r3, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b03      	cmp	r3, #3
 80032ca:	d017      	beq.n	80032fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2203      	movs	r2, #3
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	4013      	ands	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 0303 	and.w	r3, r3, #3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d123      	bne.n	8003350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	08da      	lsrs	r2, r3, #3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3208      	adds	r2, #8
 8003310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	220f      	movs	r2, #15
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	43db      	mvns	r3, r3
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4013      	ands	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4313      	orrs	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	08da      	lsrs	r2, r3, #3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3208      	adds	r2, #8
 800334a:	69b9      	ldr	r1, [r7, #24]
 800334c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	2203      	movs	r2, #3
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	43db      	mvns	r3, r3
 8003362:	69ba      	ldr	r2, [r7, #24]
 8003364:	4013      	ands	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0203 	and.w	r2, r3, #3
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4313      	orrs	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80c0 	beq.w	8003512 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	4b66      	ldr	r3, [pc, #408]	; (8003530 <HAL_GPIO_Init+0x324>)
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	4a65      	ldr	r2, [pc, #404]	; (8003530 <HAL_GPIO_Init+0x324>)
 800339c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a0:	6453      	str	r3, [r2, #68]	; 0x44
 80033a2:	4b63      	ldr	r3, [pc, #396]	; (8003530 <HAL_GPIO_Init+0x324>)
 80033a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ae:	4a61      	ldr	r2, [pc, #388]	; (8003534 <HAL_GPIO_Init+0x328>)
 80033b0:	69fb      	ldr	r3, [r7, #28]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4013      	ands	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_GPIO_Init+0x32c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d037      	beq.n	800344a <HAL_GPIO_Init+0x23e>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a57      	ldr	r2, [pc, #348]	; (800353c <HAL_GPIO_Init+0x330>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d031      	beq.n	8003446 <HAL_GPIO_Init+0x23a>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a56      	ldr	r2, [pc, #344]	; (8003540 <HAL_GPIO_Init+0x334>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d02b      	beq.n	8003442 <HAL_GPIO_Init+0x236>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a55      	ldr	r2, [pc, #340]	; (8003544 <HAL_GPIO_Init+0x338>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d025      	beq.n	800343e <HAL_GPIO_Init+0x232>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a54      	ldr	r2, [pc, #336]	; (8003548 <HAL_GPIO_Init+0x33c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01f      	beq.n	800343a <HAL_GPIO_Init+0x22e>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a53      	ldr	r2, [pc, #332]	; (800354c <HAL_GPIO_Init+0x340>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d019      	beq.n	8003436 <HAL_GPIO_Init+0x22a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a52      	ldr	r2, [pc, #328]	; (8003550 <HAL_GPIO_Init+0x344>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_GPIO_Init+0x226>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a51      	ldr	r2, [pc, #324]	; (8003554 <HAL_GPIO_Init+0x348>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d00d      	beq.n	800342e <HAL_GPIO_Init+0x222>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a50      	ldr	r2, [pc, #320]	; (8003558 <HAL_GPIO_Init+0x34c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d007      	beq.n	800342a <HAL_GPIO_Init+0x21e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a4f      	ldr	r2, [pc, #316]	; (800355c <HAL_GPIO_Init+0x350>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_GPIO_Init+0x21a>
 8003422:	2309      	movs	r3, #9
 8003424:	e012      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003426:	230a      	movs	r3, #10
 8003428:	e010      	b.n	800344c <HAL_GPIO_Init+0x240>
 800342a:	2308      	movs	r3, #8
 800342c:	e00e      	b.n	800344c <HAL_GPIO_Init+0x240>
 800342e:	2307      	movs	r3, #7
 8003430:	e00c      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003432:	2306      	movs	r3, #6
 8003434:	e00a      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003436:	2305      	movs	r3, #5
 8003438:	e008      	b.n	800344c <HAL_GPIO_Init+0x240>
 800343a:	2304      	movs	r3, #4
 800343c:	e006      	b.n	800344c <HAL_GPIO_Init+0x240>
 800343e:	2303      	movs	r3, #3
 8003440:	e004      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003442:	2302      	movs	r3, #2
 8003444:	e002      	b.n	800344c <HAL_GPIO_Init+0x240>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <HAL_GPIO_Init+0x240>
 800344a:	2300      	movs	r3, #0
 800344c:	69fa      	ldr	r2, [r7, #28]
 800344e:	f002 0203 	and.w	r2, r2, #3
 8003452:	0092      	lsls	r2, r2, #2
 8003454:	4093      	lsls	r3, r2
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800345c:	4935      	ldr	r1, [pc, #212]	; (8003534 <HAL_GPIO_Init+0x328>)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	089b      	lsrs	r3, r3, #2
 8003462:	3302      	adds	r3, #2
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800346a:	4b3d      	ldr	r3, [pc, #244]	; (8003560 <HAL_GPIO_Init+0x354>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800348e:	4a34      	ldr	r2, [pc, #208]	; (8003560 <HAL_GPIO_Init+0x354>)
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003494:	4b32      	ldr	r3, [pc, #200]	; (8003560 <HAL_GPIO_Init+0x354>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034b8:	4a29      	ldr	r2, [pc, #164]	; (8003560 <HAL_GPIO_Init+0x354>)
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034be:	4b28      	ldr	r3, [pc, #160]	; (8003560 <HAL_GPIO_Init+0x354>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4013      	ands	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034e2:	4a1f      	ldr	r2, [pc, #124]	; (8003560 <HAL_GPIO_Init+0x354>)
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034e8:	4b1d      	ldr	r3, [pc, #116]	; (8003560 <HAL_GPIO_Init+0x354>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4013      	ands	r3, r2
 80034f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4313      	orrs	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800350c:	4a14      	ldr	r2, [pc, #80]	; (8003560 <HAL_GPIO_Init+0x354>)
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3301      	adds	r3, #1
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	2b0f      	cmp	r3, #15
 800351c:	f67f ae84 	bls.w	8003228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	3724      	adds	r7, #36	; 0x24
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	40013800 	.word	0x40013800
 8003538:	40020000 	.word	0x40020000
 800353c:	40020400 	.word	0x40020400
 8003540:	40020800 	.word	0x40020800
 8003544:	40020c00 	.word	0x40020c00
 8003548:	40021000 	.word	0x40021000
 800354c:	40021400 	.word	0x40021400
 8003550:	40021800 	.word	0x40021800
 8003554:	40021c00 	.word	0x40021c00
 8003558:	40022000 	.word	0x40022000
 800355c:	40022400 	.word	0x40022400
 8003560:	40013c00 	.word	0x40013c00

08003564 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003564:	b480      	push	{r7}
 8003566:	b085      	sub	sp, #20
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	460b      	mov	r3, r1
 800356e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	887b      	ldrh	r3, [r7, #2]
 8003576:	4013      	ands	r3, r2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	e001      	b.n	8003586 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
 80035a0:	4613      	mov	r3, r2
 80035a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035a4:	787b      	ldrb	r3, [r7, #1]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035aa:	887a      	ldrh	r2, [r7, #2]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035b0:	e003      	b.n	80035ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	041a      	lsls	r2, r3, #16
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	619a      	str	r2, [r3, #24]
}
 80035ba:	bf00      	nop
 80035bc:	370c      	adds	r7, #12
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
	...

080035c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80035d2:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d006      	beq.n	80035ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035de:	4a05      	ldr	r2, [pc, #20]	; (80035f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fd fae8 	bl	8000bbc <HAL_GPIO_EXTI_Callback>
  }
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40013c00 	.word	0x40013c00

080035f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e12b      	b.n	8003862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fe fa3a 	bl	8001a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2224      	movs	r2, #36	; 0x24
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800364a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800365a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800365c:	f001 fa20 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8003660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a81      	ldr	r2, [pc, #516]	; (800386c <HAL_I2C_Init+0x274>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d807      	bhi.n	800367c <HAL_I2C_Init+0x84>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a80      	ldr	r2, [pc, #512]	; (8003870 <HAL_I2C_Init+0x278>)
 8003670:	4293      	cmp	r3, r2
 8003672:	bf94      	ite	ls
 8003674:	2301      	movls	r3, #1
 8003676:	2300      	movhi	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	e006      	b.n	800368a <HAL_I2C_Init+0x92>
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	4a7d      	ldr	r2, [pc, #500]	; (8003874 <HAL_I2C_Init+0x27c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	bf94      	ite	ls
 8003684:	2301      	movls	r3, #1
 8003686:	2300      	movhi	r3, #0
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d001      	beq.n	8003692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0e7      	b.n	8003862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4a78      	ldr	r2, [pc, #480]	; (8003878 <HAL_I2C_Init+0x280>)
 8003696:	fba2 2303 	umull	r2, r3, r2, r3
 800369a:	0c9b      	lsrs	r3, r3, #18
 800369c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68ba      	ldr	r2, [r7, #8]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	4a6a      	ldr	r2, [pc, #424]	; (800386c <HAL_I2C_Init+0x274>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d802      	bhi.n	80036cc <HAL_I2C_Init+0xd4>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	3301      	adds	r3, #1
 80036ca:	e009      	b.n	80036e0 <HAL_I2C_Init+0xe8>
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036d2:	fb02 f303 	mul.w	r3, r2, r3
 80036d6:	4a69      	ldr	r2, [pc, #420]	; (800387c <HAL_I2C_Init+0x284>)
 80036d8:	fba2 2303 	umull	r2, r3, r2, r3
 80036dc:	099b      	lsrs	r3, r3, #6
 80036de:	3301      	adds	r3, #1
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	430b      	orrs	r3, r1
 80036e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	495c      	ldr	r1, [pc, #368]	; (800386c <HAL_I2C_Init+0x274>)
 80036fc:	428b      	cmp	r3, r1
 80036fe:	d819      	bhi.n	8003734 <HAL_I2C_Init+0x13c>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1e59      	subs	r1, r3, #1
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	fbb1 f3f3 	udiv	r3, r1, r3
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003714:	400b      	ands	r3, r1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_I2C_Init+0x138>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1e59      	subs	r1, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	fbb1 f3f3 	udiv	r3, r1, r3
 8003728:	3301      	adds	r3, #1
 800372a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800372e:	e051      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 8003730:	2304      	movs	r3, #4
 8003732:	e04f      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d111      	bne.n	8003760 <HAL_I2C_Init+0x168>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	1e58      	subs	r0, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	460b      	mov	r3, r1
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	440b      	add	r3, r1
 800374a:	fbb0 f3f3 	udiv	r3, r0, r3
 800374e:	3301      	adds	r3, #1
 8003750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003754:	2b00      	cmp	r3, #0
 8003756:	bf0c      	ite	eq
 8003758:	2301      	moveq	r3, #1
 800375a:	2300      	movne	r3, #0
 800375c:	b2db      	uxtb	r3, r3
 800375e:	e012      	b.n	8003786 <HAL_I2C_Init+0x18e>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1e58      	subs	r0, r3, #1
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6859      	ldr	r1, [r3, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	0099      	lsls	r1, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	fbb0 f3f3 	udiv	r3, r0, r3
 8003776:	3301      	adds	r3, #1
 8003778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800377c:	2b00      	cmp	r3, #0
 800377e:	bf0c      	ite	eq
 8003780:	2301      	moveq	r3, #1
 8003782:	2300      	movne	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_I2C_Init+0x196>
 800378a:	2301      	movs	r3, #1
 800378c:	e022      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10e      	bne.n	80037b4 <HAL_I2C_Init+0x1bc>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1e58      	subs	r0, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6859      	ldr	r1, [r3, #4]
 800379e:	460b      	mov	r3, r1
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	440b      	add	r3, r1
 80037a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a8:	3301      	adds	r3, #1
 80037aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037b2:	e00f      	b.n	80037d4 <HAL_I2C_Init+0x1dc>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1e58      	subs	r0, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	0099      	lsls	r1, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ca:	3301      	adds	r3, #1
 80037cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	6809      	ldr	r1, [r1, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69da      	ldr	r2, [r3, #28]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003802:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6911      	ldr	r1, [r2, #16]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68d2      	ldr	r2, [r2, #12]
 800380e:	4311      	orrs	r1, r2
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6812      	ldr	r2, [r2, #0]
 8003814:	430b      	orrs	r3, r1
 8003816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	695a      	ldr	r2, [r3, #20]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0201 	orr.w	r2, r2, #1
 8003842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2200      	movs	r2, #0
 8003848:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	000186a0 	.word	0x000186a0
 8003870:	001e847f 	.word	0x001e847f
 8003874:	003d08ff 	.word	0x003d08ff
 8003878:	431bde83 	.word	0x431bde83
 800387c:	10624dd3 	.word	0x10624dd3

08003880 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b088      	sub	sp, #32
 8003884:	af02      	add	r7, sp, #8
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	607a      	str	r2, [r7, #4]
 800388a:	461a      	mov	r2, r3
 800388c:	460b      	mov	r3, r1
 800388e:	817b      	strh	r3, [r7, #10]
 8003890:	4613      	mov	r3, r2
 8003892:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003894:	f7fe fb62 	bl	8001f5c <HAL_GetTick>
 8003898:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	2b20      	cmp	r3, #32
 80038a4:	f040 80e0 	bne.w	8003a68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2319      	movs	r3, #25
 80038ae:	2201      	movs	r2, #1
 80038b0:	4970      	ldr	r1, [pc, #448]	; (8003a74 <HAL_I2C_Master_Transmit+0x1f4>)
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 f964 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038be:	2302      	movs	r3, #2
 80038c0:	e0d3      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_I2C_Master_Transmit+0x50>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e0cc      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d007      	beq.n	80038f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f042 0201 	orr.w	r2, r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003904:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2221      	movs	r2, #33	; 0x21
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2210      	movs	r2, #16
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	893a      	ldrh	r2, [r7, #8]
 8003926:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	4a50      	ldr	r2, [pc, #320]	; (8003a78 <HAL_I2C_Master_Transmit+0x1f8>)
 8003936:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003938:	8979      	ldrh	r1, [r7, #10]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	6a3a      	ldr	r2, [r7, #32]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f89c 	bl	8003a7c <I2C_MasterRequestWrite>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e08d      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	613b      	str	r3, [r7, #16]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003964:	e066      	b.n	8003a34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	6a39      	ldr	r1, [r7, #32]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 f9de 	bl	8003d2c <I2C_WaitOnTXEFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00d      	beq.n	8003992 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	2b04      	cmp	r3, #4
 800397c:	d107      	bne.n	800398e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800398c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e06b      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	781a      	ldrb	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a2:	1c5a      	adds	r2, r3, #1
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	3b01      	subs	r3, #1
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d11b      	bne.n	8003a08 <HAL_I2C_Master_Transmit+0x188>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d017      	beq.n	8003a08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f2:	b29b      	uxth	r3, r3
 80039f4:	3b01      	subs	r3, #1
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	6a39      	ldr	r1, [r7, #32]
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f9ce 	bl	8003dae <I2C_WaitOnBTFFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00d      	beq.n	8003a34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d107      	bne.n	8003a30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e01a      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d194      	bne.n	8003966 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2220      	movs	r2, #32
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a64:	2300      	movs	r3, #0
 8003a66:	e000      	b.n	8003a6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a68:	2302      	movs	r3, #2
  }
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3718      	adds	r7, #24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	00100002 	.word	0x00100002
 8003a78:	ffff0000 	.word	0xffff0000

08003a7c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	d006      	beq.n	8003aa6 <I2C_MasterRequestWrite+0x2a>
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d003      	beq.n	8003aa6 <I2C_MasterRequestWrite+0x2a>
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003aa4:	d108      	bne.n	8003ab8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	e00b      	b.n	8003ad0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	2b12      	cmp	r3, #18
 8003abe:	d107      	bne.n	8003ad0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ace:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f84f 	bl	8003b80 <I2C_WaitOnFlagUntilTimeout>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00d      	beq.n	8003b04 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af6:	d103      	bne.n	8003b00 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e035      	b.n	8003b70 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b0c:	d108      	bne.n	8003b20 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	461a      	mov	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b1c:	611a      	str	r2, [r3, #16]
 8003b1e:	e01b      	b.n	8003b58 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b20:	897b      	ldrh	r3, [r7, #10]
 8003b22:	11db      	asrs	r3, r3, #7
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	f003 0306 	and.w	r3, r3, #6
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	f063 030f 	orn	r3, r3, #15
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	490e      	ldr	r1, [pc, #56]	; (8003b78 <I2C_MasterRequestWrite+0xfc>)
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f875 	bl	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e010      	b.n	8003b70 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b4e:	897b      	ldrh	r3, [r7, #10]
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	4907      	ldr	r1, [pc, #28]	; (8003b7c <I2C_MasterRequestWrite+0x100>)
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f865 	bl	8003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e000      	b.n	8003b70 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	00010008 	.word	0x00010008
 8003b7c:	00010002 	.word	0x00010002

08003b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	603b      	str	r3, [r7, #0]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b90:	e025      	b.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d021      	beq.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9a:	f7fe f9df 	bl	8001f5c <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d302      	bcc.n	8003bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d116      	bne.n	8003bde <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2220      	movs	r2, #32
 8003bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	f043 0220 	orr.w	r2, r3, #32
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e023      	b.n	8003c26 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d10d      	bne.n	8003c04 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	43da      	mvns	r2, r3
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	bf0c      	ite	eq
 8003bfa:	2301      	moveq	r3, #1
 8003bfc:	2300      	movne	r3, #0
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	461a      	mov	r2, r3
 8003c02:	e00c      	b.n	8003c1e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	43da      	mvns	r2, r3
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	79fb      	ldrb	r3, [r7, #7]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d0b6      	beq.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3710      	adds	r7, #16
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c3c:	e051      	b.n	8003ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	d123      	bne.n	8003c96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c66:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	f043 0204 	orr.w	r2, r3, #4
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e046      	b.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d021      	beq.n	8003ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c9e:	f7fe f95d 	bl	8001f5c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d302      	bcc.n	8003cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d116      	bne.n	8003ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	f043 0220 	orr.w	r2, r3, #32
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e020      	b.n	8003d24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	0c1b      	lsrs	r3, r3, #16
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d10c      	bne.n	8003d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	43da      	mvns	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bf14      	ite	ne
 8003cfe:	2301      	movne	r3, #1
 8003d00:	2300      	moveq	r3, #0
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	e00b      	b.n	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	43da      	mvns	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	4013      	ands	r3, r2
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d18d      	bne.n	8003c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d38:	e02d      	b.n	8003d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f000 f878 	bl	8003e30 <I2C_IsAcknowledgeFailed>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e02d      	b.n	8003da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d50:	d021      	beq.n	8003d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d52:	f7fe f903 	bl	8001f5c <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d116      	bne.n	8003d96 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2220      	movs	r2, #32
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	f043 0220 	orr.w	r2, r3, #32
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e007      	b.n	8003da6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695b      	ldr	r3, [r3, #20]
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b80      	cmp	r3, #128	; 0x80
 8003da2:	d1ca      	bne.n	8003d3a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b084      	sub	sp, #16
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	60f8      	str	r0, [r7, #12]
 8003db6:	60b9      	str	r1, [r7, #8]
 8003db8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003dba:	e02d      	b.n	8003e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f000 f837 	bl	8003e30 <I2C_IsAcknowledgeFailed>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e02d      	b.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d021      	beq.n	8003e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dd4:	f7fe f8c2 	bl	8001f5c <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d302      	bcc.n	8003dea <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d116      	bne.n	8003e18 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	f043 0220 	orr.w	r2, r3, #32
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e007      	b.n	8003e28 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f003 0304 	and.w	r3, r3, #4
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d1ca      	bne.n	8003dbc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e26:	2300      	movs	r3, #0
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e46:	d11b      	bne.n	8003e80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	f043 0204 	orr.w	r2, r3, #4
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d129      	bne.n	8003ef8 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	; 0x24
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0210 	bic.w	r2, r2, #16
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003f10:	2300      	movs	r3, #0
 8003f12:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d12a      	bne.n	8003f76 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003f40:	89fb      	ldrh	r3, [r7, #14]
 8003f42:	f023 030f 	bic.w	r3, r3, #15
 8003f46:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	89fb      	ldrh	r3, [r7, #14]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	89fa      	ldrh	r2, [r7, #14]
 8003f58:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f72:	2300      	movs	r3, #0
 8003f74:	e000      	b.n	8003f78 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003f76:	2302      	movs	r3, #2
  }
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f86:	b08f      	sub	sp, #60	; 0x3c
 8003f88:	af0a      	add	r7, sp, #40	; 0x28
 8003f8a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e10f      	b.n	80041b6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fd fe31 	bl	8001c18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2203      	movs	r2, #3
 8003fba:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d102      	bne.n	8003fd0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f001 ffd6 	bl	8005f86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	603b      	str	r3, [r7, #0]
 8003fe0:	687e      	ldr	r6, [r7, #4]
 8003fe2:	466d      	mov	r5, sp
 8003fe4:	f106 0410 	add.w	r4, r6, #16
 8003fe8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ff0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ff4:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ff8:	1d33      	adds	r3, r6, #4
 8003ffa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ffc:	6838      	ldr	r0, [r7, #0]
 8003ffe:	f001 ff61 	bl	8005ec4 <USB_CoreInit>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d005      	beq.n	8004014 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0d0      	b.n	80041b6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2100      	movs	r1, #0
 800401a:	4618      	mov	r0, r3
 800401c:	f001 ffc4 	bl	8005fa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
 8004024:	e04a      	b.n	80040bc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004026:	7bfa      	ldrb	r2, [r7, #15]
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	333d      	adds	r3, #61	; 0x3d
 8004036:	2201      	movs	r2, #1
 8004038:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4413      	add	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	333c      	adds	r3, #60	; 0x3c
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800404e:	7bfa      	ldrb	r2, [r7, #15]
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	b298      	uxth	r0, r3
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	3344      	adds	r3, #68	; 0x44
 8004062:	4602      	mov	r2, r0
 8004064:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	3340      	adds	r3, #64	; 0x40
 8004076:	2200      	movs	r2, #0
 8004078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	6879      	ldr	r1, [r7, #4]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	4413      	add	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	3348      	adds	r3, #72	; 0x48
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800408e:	7bfa      	ldrb	r2, [r7, #15]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	334c      	adds	r3, #76	; 0x4c
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	3354      	adds	r3, #84	; 0x54
 80040b2:	2200      	movs	r2, #0
 80040b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040b6:	7bfb      	ldrb	r3, [r7, #15]
 80040b8:	3301      	adds	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d3af      	bcc.n	8004026 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c6:	2300      	movs	r3, #0
 80040c8:	73fb      	strb	r3, [r7, #15]
 80040ca:	e044      	b.n	8004156 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040cc:	7bfa      	ldrb	r2, [r7, #15]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040e2:	7bfa      	ldrb	r2, [r7, #15]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	4413      	add	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004150:	7bfb      	ldrb	r3, [r7, #15]
 8004152:	3301      	adds	r3, #1
 8004154:	73fb      	strb	r3, [r7, #15]
 8004156:	7bfa      	ldrb	r2, [r7, #15]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	d3b5      	bcc.n	80040cc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	687e      	ldr	r6, [r7, #4]
 8004168:	466d      	mov	r5, sp
 800416a:	f106 0410 	add.w	r4, r6, #16
 800416e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004176:	e894 0003 	ldmia.w	r4, {r0, r1}
 800417a:	e885 0003 	stmia.w	r5, {r0, r1}
 800417e:	1d33      	adds	r3, r6, #4
 8004180:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004182:	6838      	ldr	r0, [r7, #0]
 8004184:	f001 ff5c 	bl	8006040 <USB_DevInit>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e00d      	b.n	80041b6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f002 f927 	bl	8006402 <USB_DevDisconnect>

  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e267      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d075      	beq.n	80042ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041de:	4b88      	ldr	r3, [pc, #544]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d00c      	beq.n	8004204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ea:	4b85      	ldr	r3, [pc, #532]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d112      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041f6:	4b82      	ldr	r3, [pc, #520]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004202:	d10b      	bne.n	800421c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	4b7e      	ldr	r3, [pc, #504]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d05b      	beq.n	80042c8 <HAL_RCC_OscConfig+0x108>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d157      	bne.n	80042c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e242      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004224:	d106      	bne.n	8004234 <HAL_RCC_OscConfig+0x74>
 8004226:	4b76      	ldr	r3, [pc, #472]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a75      	ldr	r2, [pc, #468]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800422c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x98>
 800423e:	4b70      	ldr	r3, [pc, #448]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a6f      	ldr	r2, [pc, #444]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b6d      	ldr	r3, [pc, #436]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6c      	ldr	r2, [pc, #432]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xb0>
 8004258:	4b69      	ldr	r3, [pc, #420]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a68      	ldr	r2, [pc, #416]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a65      	ldr	r2, [pc, #404]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fd fe70 	bl	8001f5c <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004280:	f7fd fe6c 	bl	8001f5c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e207      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b5b      	ldr	r3, [pc, #364]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xc0>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fd fe5c 	bl	8001f5c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fd fe58 	bl	8001f5c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1f3      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	4b51      	ldr	r3, [pc, #324]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0xe8>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042d6:	4b4a      	ldr	r3, [pc, #296]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ee:	4b44      	ldr	r3, [pc, #272]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x152>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1c7      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b3b      	ldr	r3, [pc, #236]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4937      	ldr	r1, [pc, #220]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e03a      	b.n	800439e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b34      	ldr	r3, [pc, #208]	; (8004404 <HAL_RCC_OscConfig+0x244>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004336:	f7fd fe11 	bl	8001f5c <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800433e:	f7fd fe0d 	bl	8001f5c <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1a8      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b28      	ldr	r3, [pc, #160]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4925      	ldr	r1, [pc, #148]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	e015      	b.n	800439e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b24      	ldr	r3, [pc, #144]	; (8004404 <HAL_RCC_OscConfig+0x244>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fd fdf0 	bl	8001f5c <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004380:	f7fd fdec 	bl	8001f5c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e187      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d036      	beq.n	8004418 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d016      	beq.n	80043e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b15      	ldr	r3, [pc, #84]	; (8004408 <HAL_RCC_OscConfig+0x248>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b8:	f7fd fdd0 	bl	8001f5c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fd fdcc 	bl	8001f5c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e167      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_OscConfig+0x240>)
 80043d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x200>
 80043de:	e01b      	b.n	8004418 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e0:	4b09      	ldr	r3, [pc, #36]	; (8004408 <HAL_RCC_OscConfig+0x248>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e6:	f7fd fdb9 	bl	8001f5c <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	e00e      	b.n	800440c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ee:	f7fd fdb5 	bl	8001f5c <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d907      	bls.n	800440c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e150      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
 8004400:	40023800 	.word	0x40023800
 8004404:	42470000 	.word	0x42470000
 8004408:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800440c:	4b88      	ldr	r3, [pc, #544]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1ea      	bne.n	80043ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8097 	beq.w	8004554 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004426:	2300      	movs	r3, #0
 8004428:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800442a:	4b81      	ldr	r3, [pc, #516]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	4b7d      	ldr	r3, [pc, #500]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	4a7c      	ldr	r2, [pc, #496]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004444:	6413      	str	r3, [r2, #64]	; 0x40
 8004446:	4b7a      	ldr	r3, [pc, #488]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	60bb      	str	r3, [r7, #8]
 8004450:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004456:	4b77      	ldr	r3, [pc, #476]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445e:	2b00      	cmp	r3, #0
 8004460:	d118      	bne.n	8004494 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004462:	4b74      	ldr	r3, [pc, #464]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a73      	ldr	r2, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 8004468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800446c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800446e:	f7fd fd75 	bl	8001f5c <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004474:	e008      	b.n	8004488 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004476:	f7fd fd71 	bl	8001f5c <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d901      	bls.n	8004488 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e10c      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004488:	4b6a      	ldr	r3, [pc, #424]	; (8004634 <HAL_RCC_OscConfig+0x474>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d106      	bne.n	80044aa <HAL_RCC_OscConfig+0x2ea>
 800449c:	4b64      	ldr	r3, [pc, #400]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4a63      	ldr	r2, [pc, #396]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044a2:	f043 0301 	orr.w	r3, r3, #1
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70
 80044a8:	e01c      	b.n	80044e4 <HAL_RCC_OscConfig+0x324>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	2b05      	cmp	r3, #5
 80044b0:	d10c      	bne.n	80044cc <HAL_RCC_OscConfig+0x30c>
 80044b2:	4b5f      	ldr	r3, [pc, #380]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b6:	4a5e      	ldr	r2, [pc, #376]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044b8:	f043 0304 	orr.w	r3, r3, #4
 80044bc:	6713      	str	r3, [r2, #112]	; 0x70
 80044be:	4b5c      	ldr	r3, [pc, #368]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	4a5b      	ldr	r2, [pc, #364]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 0301 	orr.w	r3, r3, #1
 80044c8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ca:	e00b      	b.n	80044e4 <HAL_RCC_OscConfig+0x324>
 80044cc:	4b58      	ldr	r3, [pc, #352]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	4a57      	ldr	r2, [pc, #348]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044d2:	f023 0301 	bic.w	r3, r3, #1
 80044d6:	6713      	str	r3, [r2, #112]	; 0x70
 80044d8:	4b55      	ldr	r3, [pc, #340]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044dc:	4a54      	ldr	r2, [pc, #336]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80044de:	f023 0304 	bic.w	r3, r3, #4
 80044e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d015      	beq.n	8004518 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ec:	f7fd fd36 	bl	8001f5c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	e00a      	b.n	800450a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f4:	f7fd fd32 	bl	8001f5c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004502:	4293      	cmp	r3, r2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e0cb      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800450a:	4b49      	ldr	r3, [pc, #292]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	f003 0302 	and.w	r3, r3, #2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0ee      	beq.n	80044f4 <HAL_RCC_OscConfig+0x334>
 8004516:	e014      	b.n	8004542 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004518:	f7fd fd20 	bl	8001f5c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fd fd1c 	bl	8001f5c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0b5      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004536:	4b3e      	ldr	r3, [pc, #248]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1ee      	bne.n	8004520 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004542:	7dfb      	ldrb	r3, [r7, #23]
 8004544:	2b01      	cmp	r3, #1
 8004546:	d105      	bne.n	8004554 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004548:	4b39      	ldr	r3, [pc, #228]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800454a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454c:	4a38      	ldr	r2, [pc, #224]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 800454e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004552:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80a1 	beq.w	80046a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800455e:	4b34      	ldr	r3, [pc, #208]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 030c 	and.w	r3, r3, #12
 8004566:	2b08      	cmp	r3, #8
 8004568:	d05c      	beq.n	8004624 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	2b02      	cmp	r3, #2
 8004570:	d141      	bne.n	80045f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b31      	ldr	r3, [pc, #196]	; (8004638 <HAL_RCC_OscConfig+0x478>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fd fcf0 	bl	8001f5c <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004580:	f7fd fcec 	bl	8001f5c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e087      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b27      	ldr	r3, [pc, #156]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	69da      	ldr	r2, [r3, #28]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ac:	019b      	lsls	r3, r3, #6
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	085b      	lsrs	r3, r3, #1
 80045b6:	3b01      	subs	r3, #1
 80045b8:	041b      	lsls	r3, r3, #16
 80045ba:	431a      	orrs	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	491b      	ldr	r1, [pc, #108]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045c8:	4b1b      	ldr	r3, [pc, #108]	; (8004638 <HAL_RCC_OscConfig+0x478>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fd fcc5 	bl	8001f5c <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d6:	f7fd fcc1 	bl	8001f5c <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e05c      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045e8:	4b11      	ldr	r3, [pc, #68]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x416>
 80045f4:	e054      	b.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b10      	ldr	r3, [pc, #64]	; (8004638 <HAL_RCC_OscConfig+0x478>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fd fcae 	bl	8001f5c <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004604:	f7fd fcaa 	bl	8001f5c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e045      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	4b06      	ldr	r3, [pc, #24]	; (8004630 <HAL_RCC_OscConfig+0x470>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x444>
 8004622:	e03d      	b.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d107      	bne.n	800463c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e038      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
 8004630:	40023800 	.word	0x40023800
 8004634:	40007000 	.word	0x40007000
 8004638:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800463c:	4b1b      	ldr	r3, [pc, #108]	; (80046ac <HAL_RCC_OscConfig+0x4ec>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d028      	beq.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d121      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004662:	429a      	cmp	r2, r3
 8004664:	d11a      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800466c:	4013      	ands	r3, r2
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004672:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004674:	4293      	cmp	r3, r2
 8004676:	d111      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d107      	bne.n	800469c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004696:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800

080046b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0cc      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b68      	ldr	r3, [pc, #416]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d90c      	bls.n	80046ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b65      	ldr	r3, [pc, #404]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	b2d2      	uxtb	r2, r2
 80046d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046da:	4b63      	ldr	r3, [pc, #396]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 030f 	and.w	r3, r3, #15
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d001      	beq.n	80046ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0b8      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0302 	and.w	r3, r3, #2
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b00      	cmp	r3, #0
 8004702:	d005      	beq.n	8004710 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004704:	4b59      	ldr	r3, [pc, #356]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	4a58      	ldr	r2, [pc, #352]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800470e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d005      	beq.n	8004728 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800471c:	4b53      	ldr	r3, [pc, #332]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4a52      	ldr	r2, [pc, #328]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004726:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004728:	4b50      	ldr	r3, [pc, #320]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	494d      	ldr	r1, [pc, #308]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d044      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d107      	bne.n	800475e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800474e:	4b47      	ldr	r3, [pc, #284]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d119      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e07f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b02      	cmp	r3, #2
 8004764:	d003      	beq.n	800476e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800476a:	2b03      	cmp	r3, #3
 800476c:	d107      	bne.n	800477e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800476e:	4b3f      	ldr	r3, [pc, #252]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d109      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477e:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e067      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800478e:	4b37      	ldr	r3, [pc, #220]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f023 0203 	bic.w	r2, r3, #3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4934      	ldr	r1, [pc, #208]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	4313      	orrs	r3, r2
 800479e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047a0:	f7fd fbdc 	bl	8001f5c <HAL_GetTick>
 80047a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a6:	e00a      	b.n	80047be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047a8:	f7fd fbd8 	bl	8001f5c <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e04f      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047be:	4b2b      	ldr	r3, [pc, #172]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f003 020c 	and.w	r2, r3, #12
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d1eb      	bne.n	80047a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b25      	ldr	r3, [pc, #148]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d20c      	bcs.n	80047f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b22      	ldr	r3, [pc, #136]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047e6:	4b20      	ldr	r3, [pc, #128]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 030f 	and.w	r3, r3, #15
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d001      	beq.n	80047f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e032      	b.n	800485e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0304 	and.w	r3, r3, #4
 8004800:	2b00      	cmp	r3, #0
 8004802:	d008      	beq.n	8004816 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004804:	4b19      	ldr	r3, [pc, #100]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4916      	ldr	r1, [pc, #88]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004812:	4313      	orrs	r3, r2
 8004814:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	490e      	ldr	r1, [pc, #56]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004836:	f000 f821 	bl	800487c <HAL_RCC_GetSysClockFreq>
 800483a:	4602      	mov	r2, r0
 800483c:	4b0b      	ldr	r3, [pc, #44]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	f003 030f 	and.w	r3, r3, #15
 8004846:	490a      	ldr	r1, [pc, #40]	; (8004870 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	5ccb      	ldrb	r3, [r1, r3]
 800484a:	fa22 f303 	lsr.w	r3, r2, r3
 800484e:	4a09      	ldr	r2, [pc, #36]	; (8004874 <HAL_RCC_ClockConfig+0x1c4>)
 8004850:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004852:	4b09      	ldr	r3, [pc, #36]	; (8004878 <HAL_RCC_ClockConfig+0x1c8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f7fd fa38 	bl	8001ccc <HAL_InitTick>

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023c00 	.word	0x40023c00
 800486c:	40023800 	.word	0x40023800
 8004870:	08009370 	.word	0x08009370
 8004874:	20000088 	.word	0x20000088
 8004878:	2000008c 	.word	0x2000008c

0800487c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800487c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004880:	b094      	sub	sp, #80	; 0x50
 8004882:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004884:	2300      	movs	r3, #0
 8004886:	647b      	str	r3, [r7, #68]	; 0x44
 8004888:	2300      	movs	r3, #0
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800488c:	2300      	movs	r3, #0
 800488e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004894:	4b79      	ldr	r3, [pc, #484]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 030c 	and.w	r3, r3, #12
 800489c:	2b08      	cmp	r3, #8
 800489e:	d00d      	beq.n	80048bc <HAL_RCC_GetSysClockFreq+0x40>
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	f200 80e1 	bhi.w	8004a68 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_RCC_GetSysClockFreq+0x34>
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d003      	beq.n	80048b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80048ae:	e0db      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b73      	ldr	r3, [pc, #460]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x204>)
 80048b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048b4:	e0db      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048b6:	4b73      	ldr	r3, [pc, #460]	; (8004a84 <HAL_RCC_GetSysClockFreq+0x208>)
 80048b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ba:	e0d8      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048bc:	4b6f      	ldr	r3, [pc, #444]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048c6:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d063      	beq.n	800499a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048d2:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	099b      	lsrs	r3, r3, #6
 80048d8:	2200      	movs	r2, #0
 80048da:	63bb      	str	r3, [r7, #56]	; 0x38
 80048dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e4:	633b      	str	r3, [r7, #48]	; 0x30
 80048e6:	2300      	movs	r3, #0
 80048e8:	637b      	str	r3, [r7, #52]	; 0x34
 80048ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80048ee:	4622      	mov	r2, r4
 80048f0:	462b      	mov	r3, r5
 80048f2:	f04f 0000 	mov.w	r0, #0
 80048f6:	f04f 0100 	mov.w	r1, #0
 80048fa:	0159      	lsls	r1, r3, #5
 80048fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004900:	0150      	lsls	r0, r2, #5
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4621      	mov	r1, r4
 8004908:	1a51      	subs	r1, r2, r1
 800490a:	6139      	str	r1, [r7, #16]
 800490c:	4629      	mov	r1, r5
 800490e:	eb63 0301 	sbc.w	r3, r3, r1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	f04f 0200 	mov.w	r2, #0
 8004918:	f04f 0300 	mov.w	r3, #0
 800491c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004920:	4659      	mov	r1, fp
 8004922:	018b      	lsls	r3, r1, #6
 8004924:	4651      	mov	r1, sl
 8004926:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800492a:	4651      	mov	r1, sl
 800492c:	018a      	lsls	r2, r1, #6
 800492e:	4651      	mov	r1, sl
 8004930:	ebb2 0801 	subs.w	r8, r2, r1
 8004934:	4659      	mov	r1, fp
 8004936:	eb63 0901 	sbc.w	r9, r3, r1
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800494a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800494e:	4690      	mov	r8, r2
 8004950:	4699      	mov	r9, r3
 8004952:	4623      	mov	r3, r4
 8004954:	eb18 0303 	adds.w	r3, r8, r3
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	462b      	mov	r3, r5
 800495c:	eb49 0303 	adc.w	r3, r9, r3
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800496e:	4629      	mov	r1, r5
 8004970:	024b      	lsls	r3, r1, #9
 8004972:	4621      	mov	r1, r4
 8004974:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004978:	4621      	mov	r1, r4
 800497a:	024a      	lsls	r2, r1, #9
 800497c:	4610      	mov	r0, r2
 800497e:	4619      	mov	r1, r3
 8004980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004982:	2200      	movs	r2, #0
 8004984:	62bb      	str	r3, [r7, #40]	; 0x28
 8004986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004988:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800498c:	f7fb fc30 	bl	80001f0 <__aeabi_uldivmod>
 8004990:	4602      	mov	r2, r0
 8004992:	460b      	mov	r3, r1
 8004994:	4613      	mov	r3, r2
 8004996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004998:	e058      	b.n	8004a4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800499a:	4b38      	ldr	r3, [pc, #224]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	2200      	movs	r2, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	4611      	mov	r1, r2
 80049a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049aa:	623b      	str	r3, [r7, #32]
 80049ac:	2300      	movs	r3, #0
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
 80049b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049b4:	4642      	mov	r2, r8
 80049b6:	464b      	mov	r3, r9
 80049b8:	f04f 0000 	mov.w	r0, #0
 80049bc:	f04f 0100 	mov.w	r1, #0
 80049c0:	0159      	lsls	r1, r3, #5
 80049c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049c6:	0150      	lsls	r0, r2, #5
 80049c8:	4602      	mov	r2, r0
 80049ca:	460b      	mov	r3, r1
 80049cc:	4641      	mov	r1, r8
 80049ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80049d2:	4649      	mov	r1, r9
 80049d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80049e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80049e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80049ec:	ebb2 040a 	subs.w	r4, r2, sl
 80049f0:	eb63 050b 	sbc.w	r5, r3, fp
 80049f4:	f04f 0200 	mov.w	r2, #0
 80049f8:	f04f 0300 	mov.w	r3, #0
 80049fc:	00eb      	lsls	r3, r5, #3
 80049fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a02:	00e2      	lsls	r2, r4, #3
 8004a04:	4614      	mov	r4, r2
 8004a06:	461d      	mov	r5, r3
 8004a08:	4643      	mov	r3, r8
 8004a0a:	18e3      	adds	r3, r4, r3
 8004a0c:	603b      	str	r3, [r7, #0]
 8004a0e:	464b      	mov	r3, r9
 8004a10:	eb45 0303 	adc.w	r3, r5, r3
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	f04f 0200 	mov.w	r2, #0
 8004a1a:	f04f 0300 	mov.w	r3, #0
 8004a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a22:	4629      	mov	r1, r5
 8004a24:	028b      	lsls	r3, r1, #10
 8004a26:	4621      	mov	r1, r4
 8004a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	028a      	lsls	r2, r1, #10
 8004a30:	4610      	mov	r0, r2
 8004a32:	4619      	mov	r1, r3
 8004a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a36:	2200      	movs	r2, #0
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	61fa      	str	r2, [r7, #28]
 8004a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a40:	f7fb fbd6 	bl	80001f0 <__aeabi_uldivmod>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4613      	mov	r3, r2
 8004a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	0c1b      	lsrs	r3, r3, #16
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	3301      	adds	r3, #1
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a64:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a66:	e002      	b.n	8004a6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a68:	4b05      	ldr	r3, [pc, #20]	; (8004a80 <HAL_RCC_GetSysClockFreq+0x204>)
 8004a6a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3750      	adds	r7, #80	; 0x50
 8004a74:	46bd      	mov	sp, r7
 8004a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	00f42400 	.word	0x00f42400
 8004a84:	007a1200 	.word	0x007a1200

08004a88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000088 	.word	0x20000088

08004aa0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004aa4:	f7ff fff0 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	0a9b      	lsrs	r3, r3, #10
 8004ab0:	f003 0307 	and.w	r3, r3, #7
 8004ab4:	4903      	ldr	r1, [pc, #12]	; (8004ac4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ab6:	5ccb      	ldrb	r3, [r1, r3]
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	08009380 	.word	0x08009380

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004acc:	f7ff ffdc 	bl	8004a88 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0b5b      	lsrs	r3, r3, #13
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	08009380 	.word	0x08009380

08004af0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	220f      	movs	r2, #15
 8004afe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b00:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 0203 	and.w	r2, r3, #3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b0c:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b18:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b24:	4b09      	ldr	r3, [pc, #36]	; (8004b4c <HAL_RCC_GetClockConfig+0x5c>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b32:	4b07      	ldr	r3, [pc, #28]	; (8004b50 <HAL_RCC_GetClockConfig+0x60>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 020f 	and.w	r2, r3, #15
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	601a      	str	r2, [r3, #0]
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40023c00 	.word	0x40023c00

08004b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e041      	b.n	8004bea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d106      	bne.n	8004b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc ffd4 	bl	8001b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4619      	mov	r1, r3
 8004b92:	4610      	mov	r0, r2
 8004b94:	f000 f9ce 	bl	8004f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3708      	adds	r7, #8
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
	...

08004bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d001      	beq.n	8004c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e04e      	b.n	8004caa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0201 	orr.w	r2, r2, #1
 8004c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a23      	ldr	r2, [pc, #140]	; (8004cb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d022      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d01d      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_TIM_Base_Start_IT+0xc8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d018      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a1e      	ldr	r2, [pc, #120]	; (8004cc0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d013      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1c      	ldr	r2, [pc, #112]	; (8004cc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d00e      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a1b      	ldr	r2, [pc, #108]	; (8004cc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d009      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a19      	ldr	r2, [pc, #100]	; (8004ccc <HAL_TIM_Base_Start_IT+0xd8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d004      	beq.n	8004c74 <HAL_TIM_Base_Start_IT+0x80>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d111      	bne.n	8004c98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d010      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0201 	orr.w	r2, r2, #1
 8004c94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	e007      	b.n	8004ca8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ca8:	2300      	movs	r3, #0
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40010000 	.word	0x40010000
 8004cbc:	40000400 	.word	0x40000400
 8004cc0:	40000800 	.word	0x40000800
 8004cc4:	40000c00 	.word	0x40000c00
 8004cc8:	40010400 	.word	0x40010400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40001800 	.word	0x40001800

08004cd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d122      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d11b      	bne.n	8004d30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0202 	mvn.w	r2, #2
 8004d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d003      	beq.n	8004d1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 f8ee 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004d1c:	e005      	b.n	8004d2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f8e0 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f8f1 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d122      	bne.n	8004d84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68db      	ldr	r3, [r3, #12]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b04      	cmp	r3, #4
 8004d4a:	d11b      	bne.n	8004d84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f06f 0204 	mvn.w	r2, #4
 8004d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2202      	movs	r2, #2
 8004d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f8c4 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004d70:	e005      	b.n	8004d7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f8b6 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 f8c7 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b08      	cmp	r3, #8
 8004d90:	d122      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0308 	and.w	r3, r3, #8
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d11b      	bne.n	8004dd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0208 	mvn.w	r2, #8
 8004da8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2204      	movs	r2, #4
 8004dae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d003      	beq.n	8004dc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 f89a 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004dc4:	e005      	b.n	8004dd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f88c 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f89d 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d122      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0310 	and.w	r3, r3, #16
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d11b      	bne.n	8004e2c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0210 	mvn.w	r2, #16
 8004dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2208      	movs	r2, #8
 8004e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	69db      	ldr	r3, [r3, #28]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f870 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f862 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f873 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d10e      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d107      	bne.n	8004e58 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0201 	mvn.w	r2, #1
 8004e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fc fbba 	bl	80015cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e62:	2b80      	cmp	r3, #128	; 0x80
 8004e64:	d10e      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d107      	bne.n	8004e84 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f902 	bl	8005088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8e:	2b40      	cmp	r3, #64	; 0x40
 8004e90:	d10e      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d107      	bne.n	8004eb0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f838 	bl	8004f20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d10e      	bne.n	8004edc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d107      	bne.n	8004edc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0220 	mvn.w	r2, #32
 8004ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f8cc 	bl	8005074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004edc:	bf00      	nop
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a40      	ldr	r2, [pc, #256]	; (8005048 <TIM_Base_SetConfig+0x114>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f52:	d00f      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a3d      	ldr	r2, [pc, #244]	; (800504c <TIM_Base_SetConfig+0x118>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d00b      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3c      	ldr	r2, [pc, #240]	; (8005050 <TIM_Base_SetConfig+0x11c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d007      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3b      	ldr	r2, [pc, #236]	; (8005054 <TIM_Base_SetConfig+0x120>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d003      	beq.n	8004f74 <TIM_Base_SetConfig+0x40>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	4a3a      	ldr	r2, [pc, #232]	; (8005058 <TIM_Base_SetConfig+0x124>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d108      	bne.n	8004f86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2f      	ldr	r2, [pc, #188]	; (8005048 <TIM_Base_SetConfig+0x114>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02b      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f94:	d027      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2c      	ldr	r2, [pc, #176]	; (800504c <TIM_Base_SetConfig+0x118>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d023      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2b      	ldr	r2, [pc, #172]	; (8005050 <TIM_Base_SetConfig+0x11c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01f      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <TIM_Base_SetConfig+0x120>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d01b      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a29      	ldr	r2, [pc, #164]	; (8005058 <TIM_Base_SetConfig+0x124>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d017      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a28      	ldr	r2, [pc, #160]	; (800505c <TIM_Base_SetConfig+0x128>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d013      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a27      	ldr	r2, [pc, #156]	; (8005060 <TIM_Base_SetConfig+0x12c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00f      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a26      	ldr	r2, [pc, #152]	; (8005064 <TIM_Base_SetConfig+0x130>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a25      	ldr	r2, [pc, #148]	; (8005068 <TIM_Base_SetConfig+0x134>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d007      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a24      	ldr	r2, [pc, #144]	; (800506c <TIM_Base_SetConfig+0x138>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_Base_SetConfig+0xb2>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a23      	ldr	r2, [pc, #140]	; (8005070 <TIM_Base_SetConfig+0x13c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d108      	bne.n	8004ff8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689a      	ldr	r2, [r3, #8]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a0a      	ldr	r2, [pc, #40]	; (8005048 <TIM_Base_SetConfig+0x114>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_Base_SetConfig+0xf8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a0c      	ldr	r2, [pc, #48]	; (8005058 <TIM_Base_SetConfig+0x124>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d103      	bne.n	8005034 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	691a      	ldr	r2, [r3, #16]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	615a      	str	r2, [r3, #20]
}
 800503a:	bf00      	nop
 800503c:	3714      	adds	r7, #20
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40010000 	.word	0x40010000
 800504c:	40000400 	.word	0x40000400
 8005050:	40000800 	.word	0x40000800
 8005054:	40000c00 	.word	0x40000c00
 8005058:	40010400 	.word	0x40010400
 800505c:	40014000 	.word	0x40014000
 8005060:	40014400 	.word	0x40014400
 8005064:	40014800 	.word	0x40014800
 8005068:	40001800 	.word	0x40001800
 800506c:	40001c00 	.word	0x40001c00
 8005070:	40002000 	.word	0x40002000

08005074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800507c:	bf00      	nop
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b082      	sub	sp, #8
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e03f      	b.n	800512e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d106      	bne.n	80050c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7fc fd58 	bl	8001b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2224      	movs	r2, #36	; 0x24
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fc7b 	bl	80059dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	691a      	ldr	r2, [r3, #16]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695a      	ldr	r2, [r3, #20]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68da      	ldr	r2, [r3, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3708      	adds	r7, #8
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
	...

08005138 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b0ba      	sub	sp, #232	; 0xe8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800515e:	2300      	movs	r3, #0
 8005160:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800516a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516e:	f003 030f 	and.w	r3, r3, #15
 8005172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005176:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800517a:	2b00      	cmp	r3, #0
 800517c:	d10f      	bne.n	800519e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800517e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005182:	f003 0320 	and.w	r3, r3, #32
 8005186:	2b00      	cmp	r3, #0
 8005188:	d009      	beq.n	800519e <HAL_UART_IRQHandler+0x66>
 800518a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fb65 	bl	8005866 <UART_Receive_IT>
      return;
 800519c:	e256      	b.n	800564c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800519e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 80de 	beq.w	8005364 <HAL_UART_IRQHandler+0x22c>
 80051a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d106      	bne.n	80051c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 80d1 	beq.w	8005364 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00b      	beq.n	80051e6 <HAL_UART_IRQHandler+0xae>
 80051ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	f043 0201 	orr.w	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <HAL_UART_IRQHandler+0xd2>
 80051f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	f043 0202 	orr.w	r2, r3, #2
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800520a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00b      	beq.n	800522e <HAL_UART_IRQHandler+0xf6>
 8005216:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800521a:	f003 0301 	and.w	r3, r3, #1
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f043 0204 	orr.w	r2, r3, #4
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d011      	beq.n	800525e <HAL_UART_IRQHandler+0x126>
 800523a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523e:	f003 0320 	and.w	r3, r3, #32
 8005242:	2b00      	cmp	r3, #0
 8005244:	d105      	bne.n	8005252 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f043 0208 	orr.w	r2, r3, #8
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 81ed 	beq.w	8005642 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d008      	beq.n	8005286 <HAL_UART_IRQHandler+0x14e>
 8005274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005278:	f003 0320 	and.w	r3, r3, #32
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 faf0 	bl	8005866 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b40      	cmp	r3, #64	; 0x40
 8005292:	bf0c      	ite	eq
 8005294:	2301      	moveq	r3, #1
 8005296:	2300      	movne	r3, #0
 8005298:	b2db      	uxtb	r3, r3
 800529a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <HAL_UART_IRQHandler+0x17a>
 80052aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d04f      	beq.n	8005352 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f9f8 	bl	80056a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d141      	bne.n	800534a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3314      	adds	r3, #20
 80052cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	3314      	adds	r3, #20
 80052ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800530a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d1d9      	bne.n	80052c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	2b00      	cmp	r3, #0
 8005318:	d013      	beq.n	8005342 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531e:	4a7d      	ldr	r2, [pc, #500]	; (8005514 <HAL_UART_IRQHandler+0x3dc>)
 8005320:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005326:	4618      	mov	r0, r3
 8005328:	f7fd fc26 	bl	8002b78 <HAL_DMA_Abort_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d016      	beq.n	8005360 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800533c:	4610      	mov	r0, r2
 800533e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005340:	e00e      	b.n	8005360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f000 f99a 	bl	800567c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	e00a      	b.n	8005360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f996 	bl	800567c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005350:	e006      	b.n	8005360 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f992 	bl	800567c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800535e:	e170      	b.n	8005642 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005360:	bf00      	nop
    return;
 8005362:	e16e      	b.n	8005642 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	2b01      	cmp	r3, #1
 800536a:	f040 814a 	bne.w	8005602 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8143 	beq.w	8005602 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005380:	f003 0310 	and.w	r3, r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 813c 	beq.w	8005602 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800538a:	2300      	movs	r3, #0
 800538c:	60bb      	str	r3, [r7, #8]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60bb      	str	r3, [r7, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	60bb      	str	r3, [r7, #8]
 800539e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	f040 80b4 	bne.w	8005518 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8140 	beq.w	8005646 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053ce:	429a      	cmp	r2, r3
 80053d0:	f080 8139 	bcs.w	8005646 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053da:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	69db      	ldr	r3, [r3, #28]
 80053e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e6:	f000 8088 	beq.w	80054fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053f8:	e853 3f00 	ldrex	r3, [r3]
 80053fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005408:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	330c      	adds	r3, #12
 8005412:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005416:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800541a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005426:	e841 2300 	strex	r3, r2, [r1]
 800542a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800542e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1d9      	bne.n	80053ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	3314      	adds	r3, #20
 800543c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005446:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005448:	f023 0301 	bic.w	r3, r3, #1
 800544c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3314      	adds	r3, #20
 8005456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800545a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800545e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005462:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800546c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1e1      	bne.n	8005436 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3314      	adds	r3, #20
 8005478:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800547c:	e853 3f00 	ldrex	r3, [r3]
 8005480:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005484:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005488:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005496:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005498:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800549a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800549c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800549e:	e841 2300 	strex	r3, r2, [r1]
 80054a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1e3      	bne.n	8005472 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	330c      	adds	r3, #12
 80054be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c2:	e853 3f00 	ldrex	r3, [r3]
 80054c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054ca:	f023 0310 	bic.w	r3, r3, #16
 80054ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	330c      	adds	r3, #12
 80054d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80054de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054e4:	e841 2300 	strex	r3, r2, [r1]
 80054e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1e3      	bne.n	80054b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fd facf 	bl	8002a98 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005502:	b29b      	uxth	r3, r3
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	b29b      	uxth	r3, r3
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8c0 	bl	8005690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005510:	e099      	b.n	8005646 <HAL_UART_IRQHandler+0x50e>
 8005512:	bf00      	nop
 8005514:	0800576f 	.word	0x0800576f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005520:	b29b      	uxth	r3, r3
 8005522:	1ad3      	subs	r3, r2, r3
 8005524:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 808b 	beq.w	800564a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005534:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005538:	2b00      	cmp	r3, #0
 800553a:	f000 8086 	beq.w	800564a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	330c      	adds	r3, #12
 8005544:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005548:	e853 3f00 	ldrex	r3, [r3]
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005550:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005554:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	330c      	adds	r3, #12
 800555e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005562:	647a      	str	r2, [r7, #68]	; 0x44
 8005564:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005568:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e3      	bne.n	800553e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3314      	adds	r3, #20
 800557c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	623b      	str	r3, [r7, #32]
   return(result);
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3314      	adds	r3, #20
 8005596:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800559a:	633a      	str	r2, [r7, #48]	; 0x30
 800559c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1e3      	bne.n	8005576 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2220      	movs	r2, #32
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	330c      	adds	r3, #12
 80055c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	e853 3f00 	ldrex	r3, [r3]
 80055ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f023 0310 	bic.w	r3, r3, #16
 80055d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	330c      	adds	r3, #12
 80055dc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055e0:	61fa      	str	r2, [r7, #28]
 80055e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e4:	69b9      	ldr	r1, [r7, #24]
 80055e6:	69fa      	ldr	r2, [r7, #28]
 80055e8:	e841 2300 	strex	r3, r2, [r1]
 80055ec:	617b      	str	r3, [r7, #20]
   return(result);
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e3      	bne.n	80055bc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055f8:	4619      	mov	r1, r3
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 f848 	bl	8005690 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005600:	e023      	b.n	800564a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_UART_IRQHandler+0x4ea>
 800560e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f8bb 	bl	8005796 <UART_Transmit_IT>
    return;
 8005620:	e014      	b.n	800564c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <HAL_UART_IRQHandler+0x514>
 800562e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f8fb 	bl	8005836 <UART_EndTransmit_IT>
    return;
 8005640:	e004      	b.n	800564c <HAL_UART_IRQHandler+0x514>
    return;
 8005642:	bf00      	nop
 8005644:	e002      	b.n	800564c <HAL_UART_IRQHandler+0x514>
      return;
 8005646:	bf00      	nop
 8005648:	e000      	b.n	800564c <HAL_UART_IRQHandler+0x514>
      return;
 800564a:	bf00      	nop
  }
}
 800564c:	37e8      	adds	r7, #232	; 0xe8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop

08005654 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	460b      	mov	r3, r1
 800569a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b095      	sub	sp, #84	; 0x54
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	330c      	adds	r3, #12
 80056b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ba:	e853 3f00 	ldrex	r3, [r3]
 80056be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80056c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80056c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	330c      	adds	r3, #12
 80056ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056d0:	643a      	str	r2, [r7, #64]	; 0x40
 80056d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80056d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e5      	bne.n	80056b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3314      	adds	r3, #20
 80056ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	e853 3f00 	ldrex	r3, [r3]
 80056f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	3314      	adds	r3, #20
 8005702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800570a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800570c:	e841 2300 	strex	r3, r2, [r1]
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1e5      	bne.n	80056e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	2b01      	cmp	r3, #1
 800571e:	d119      	bne.n	8005754 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	647b      	str	r3, [r7, #68]	; 0x44
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	330c      	adds	r3, #12
 800573e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005740:	61ba      	str	r2, [r7, #24]
 8005742:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005744:	6979      	ldr	r1, [r7, #20]
 8005746:	69ba      	ldr	r2, [r7, #24]
 8005748:	e841 2300 	strex	r3, r2, [r1]
 800574c:	613b      	str	r3, [r7, #16]
   return(result);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1e5      	bne.n	8005720 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005762:	bf00      	nop
 8005764:	3754      	adds	r7, #84	; 0x54
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005788:	68f8      	ldr	r0, [r7, #12]
 800578a:	f7ff ff77 	bl	800567c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800578e:	bf00      	nop
 8005790:	3710      	adds	r7, #16
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b21      	cmp	r3, #33	; 0x21
 80057a8:	d13e      	bne.n	8005828 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	d114      	bne.n	80057de <UART_Transmit_IT+0x48>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d110      	bne.n	80057de <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	881b      	ldrh	r3, [r3, #0]
 80057c6:	461a      	mov	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	1c9a      	adds	r2, r3, #2
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	621a      	str	r2, [r3, #32]
 80057dc:	e008      	b.n	80057f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6211      	str	r1, [r2, #32]
 80057e8:	781a      	ldrb	r2, [r3, #0]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3b01      	subs	r3, #1
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	4619      	mov	r1, r3
 80057fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10f      	bne.n	8005824 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005812:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68da      	ldr	r2, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005822:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	e000      	b.n	800582a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005828:	2302      	movs	r3, #2
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b082      	sub	sp, #8
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800584c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fefc 	bl	8005654 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b08c      	sub	sp, #48	; 0x30
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b22      	cmp	r3, #34	; 0x22
 8005878:	f040 80ab 	bne.w	80059d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005884:	d117      	bne.n	80058b6 <UART_Receive_IT+0x50>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d113      	bne.n	80058b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	b29b      	uxth	r3, r3
 80058a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ae:	1c9a      	adds	r2, r3, #2
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	629a      	str	r2, [r3, #40]	; 0x28
 80058b4:	e026      	b.n	8005904 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058c8:	d007      	beq.n	80058da <UART_Receive_IT+0x74>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <UART_Receive_IT+0x82>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	701a      	strb	r2, [r3, #0]
 80058e6:	e008      	b.n	80058fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	1c5a      	adds	r2, r3, #1
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005908:	b29b      	uxth	r3, r3
 800590a:	3b01      	subs	r3, #1
 800590c:	b29b      	uxth	r3, r3
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4619      	mov	r1, r3
 8005912:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005914:	2b00      	cmp	r3, #0
 8005916:	d15a      	bne.n	80059ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68da      	ldr	r2, [r3, #12]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0220 	bic.w	r2, r2, #32
 8005926:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	695a      	ldr	r2, [r3, #20]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0201 	bic.w	r2, r2, #1
 8005946:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005954:	2b01      	cmp	r3, #1
 8005956:	d135      	bne.n	80059c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	330c      	adds	r3, #12
 8005964:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	613b      	str	r3, [r7, #16]
   return(result);
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f023 0310 	bic.w	r3, r3, #16
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	330c      	adds	r3, #12
 800597c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597e:	623a      	str	r2, [r7, #32]
 8005980:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005982:	69f9      	ldr	r1, [r7, #28]
 8005984:	6a3a      	ldr	r2, [r7, #32]
 8005986:	e841 2300 	strex	r3, r2, [r1]
 800598a:	61bb      	str	r3, [r7, #24]
   return(result);
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1e5      	bne.n	800595e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	2b10      	cmp	r3, #16
 800599e:	d10a      	bne.n	80059b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80059a0:	2300      	movs	r3, #0
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80059ba:	4619      	mov	r1, r3
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff fe67 	bl	8005690 <HAL_UARTEx_RxEventCallback>
 80059c2:	e002      	b.n	80059ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7ff fe4f 	bl	8005668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	e002      	b.n	80059d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	e000      	b.n	80059d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
  }
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3730      	adds	r7, #48	; 0x30
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e0:	b0c0      	sub	sp, #256	; 0x100
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f8:	68d9      	ldr	r1, [r3, #12]
 80059fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	ea40 0301 	orr.w	r3, r0, r1
 8005a04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	431a      	orrs	r2, r3
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a18:	695b      	ldr	r3, [r3, #20]
 8005a1a:	431a      	orrs	r2, r3
 8005a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a34:	f021 010c 	bic.w	r1, r1, #12
 8005a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a42:	430b      	orrs	r3, r1
 8005a44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a56:	6999      	ldr	r1, [r3, #24]
 8005a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	ea40 0301 	orr.w	r3, r0, r1
 8005a62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b8f      	ldr	r3, [pc, #572]	; (8005ca8 <UART_SetConfig+0x2cc>)
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d005      	beq.n	8005a7c <UART_SetConfig+0xa0>
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4b8d      	ldr	r3, [pc, #564]	; (8005cac <UART_SetConfig+0x2d0>)
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d104      	bne.n	8005a86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a7c:	f7ff f824 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8005a80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005a84:	e003      	b.n	8005a8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a86:	f7ff f80b 	bl	8004aa0 <HAL_RCC_GetPCLK1Freq>
 8005a8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a98:	f040 810c 	bne.w	8005cb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005aa6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005aaa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	1891      	adds	r1, r2, r2
 8005ab4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005aba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005abe:	4621      	mov	r1, r4
 8005ac0:	eb12 0801 	adds.w	r8, r2, r1
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	eb43 0901 	adc.w	r9, r3, r1
 8005aca:	f04f 0200 	mov.w	r2, #0
 8005ace:	f04f 0300 	mov.w	r3, #0
 8005ad2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ad6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ada:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ade:	4690      	mov	r8, r2
 8005ae0:	4699      	mov	r9, r3
 8005ae2:	4623      	mov	r3, r4
 8005ae4:	eb18 0303 	adds.w	r3, r8, r3
 8005ae8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005aec:	462b      	mov	r3, r5
 8005aee:	eb49 0303 	adc.w	r3, r9, r3
 8005af2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b0a:	460b      	mov	r3, r1
 8005b0c:	18db      	adds	r3, r3, r3
 8005b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005b10:	4613      	mov	r3, r2
 8005b12:	eb42 0303 	adc.w	r3, r2, r3
 8005b16:	657b      	str	r3, [r7, #84]	; 0x54
 8005b18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b20:	f7fa fb66 	bl	80001f0 <__aeabi_uldivmod>
 8005b24:	4602      	mov	r2, r0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4b61      	ldr	r3, [pc, #388]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005b2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b2e:	095b      	lsrs	r3, r3, #5
 8005b30:	011c      	lsls	r4, r3, #4
 8005b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b44:	4642      	mov	r2, r8
 8005b46:	464b      	mov	r3, r9
 8005b48:	1891      	adds	r1, r2, r2
 8005b4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b4c:	415b      	adcs	r3, r3
 8005b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b54:	4641      	mov	r1, r8
 8005b56:	eb12 0a01 	adds.w	sl, r2, r1
 8005b5a:	4649      	mov	r1, r9
 8005b5c:	eb43 0b01 	adc.w	fp, r3, r1
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b74:	4692      	mov	sl, r2
 8005b76:	469b      	mov	fp, r3
 8005b78:	4643      	mov	r3, r8
 8005b7a:	eb1a 0303 	adds.w	r3, sl, r3
 8005b7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b82:	464b      	mov	r3, r9
 8005b84:	eb4b 0303 	adc.w	r3, fp, r3
 8005b88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b90:	685b      	ldr	r3, [r3, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005b9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	18db      	adds	r3, r3, r3
 8005ba4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	eb42 0303 	adc.w	r3, r2, r3
 8005bac:	647b      	str	r3, [r7, #68]	; 0x44
 8005bae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bb6:	f7fa fb1b 	bl	80001f0 <__aeabi_uldivmod>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	4b3b      	ldr	r3, [pc, #236]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005bc2:	fba3 2301 	umull	r2, r3, r3, r1
 8005bc6:	095b      	lsrs	r3, r3, #5
 8005bc8:	2264      	movs	r2, #100	; 0x64
 8005bca:	fb02 f303 	mul.w	r3, r2, r3
 8005bce:	1acb      	subs	r3, r1, r3
 8005bd0:	00db      	lsls	r3, r3, #3
 8005bd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005bd6:	4b36      	ldr	r3, [pc, #216]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bdc:	095b      	lsrs	r3, r3, #5
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005be4:	441c      	add	r4, r3
 8005be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005bf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	1891      	adds	r1, r2, r2
 8005bfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c00:	415b      	adcs	r3, r3
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c08:	4641      	mov	r1, r8
 8005c0a:	1851      	adds	r1, r2, r1
 8005c0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005c0e:	4649      	mov	r1, r9
 8005c10:	414b      	adcs	r3, r1
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c20:	4659      	mov	r1, fp
 8005c22:	00cb      	lsls	r3, r1, #3
 8005c24:	4651      	mov	r1, sl
 8005c26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c2a:	4651      	mov	r1, sl
 8005c2c:	00ca      	lsls	r2, r1, #3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	4619      	mov	r1, r3
 8005c32:	4603      	mov	r3, r0
 8005c34:	4642      	mov	r2, r8
 8005c36:	189b      	adds	r3, r3, r2
 8005c38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c3c:	464b      	mov	r3, r9
 8005c3e:	460a      	mov	r2, r1
 8005c40:	eb42 0303 	adc.w	r3, r2, r3
 8005c44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	18db      	adds	r3, r3, r3
 8005c60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c62:	4613      	mov	r3, r2
 8005c64:	eb42 0303 	adc.w	r3, r2, r3
 8005c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005c72:	f7fa fabd 	bl	80001f0 <__aeabi_uldivmod>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4b0d      	ldr	r3, [pc, #52]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	2164      	movs	r1, #100	; 0x64
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	3332      	adds	r3, #50	; 0x32
 8005c8e:	4a08      	ldr	r2, [pc, #32]	; (8005cb0 <UART_SetConfig+0x2d4>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	f003 0207 	and.w	r2, r3, #7
 8005c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4422      	add	r2, r4
 8005ca2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ca4:	e106      	b.n	8005eb4 <UART_SetConfig+0x4d8>
 8005ca6:	bf00      	nop
 8005ca8:	40011000 	.word	0x40011000
 8005cac:	40011400 	.word	0x40011400
 8005cb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cc6:	4642      	mov	r2, r8
 8005cc8:	464b      	mov	r3, r9
 8005cca:	1891      	adds	r1, r2, r2
 8005ccc:	6239      	str	r1, [r7, #32]
 8005cce:	415b      	adcs	r3, r3
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cd6:	4641      	mov	r1, r8
 8005cd8:	1854      	adds	r4, r2, r1
 8005cda:	4649      	mov	r1, r9
 8005cdc:	eb43 0501 	adc.w	r5, r3, r1
 8005ce0:	f04f 0200 	mov.w	r2, #0
 8005ce4:	f04f 0300 	mov.w	r3, #0
 8005ce8:	00eb      	lsls	r3, r5, #3
 8005cea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cee:	00e2      	lsls	r2, r4, #3
 8005cf0:	4614      	mov	r4, r2
 8005cf2:	461d      	mov	r5, r3
 8005cf4:	4643      	mov	r3, r8
 8005cf6:	18e3      	adds	r3, r4, r3
 8005cf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	eb45 0303 	adc.w	r3, r5, r3
 8005d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d16:	f04f 0200 	mov.w	r2, #0
 8005d1a:	f04f 0300 	mov.w	r3, #0
 8005d1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d22:	4629      	mov	r1, r5
 8005d24:	008b      	lsls	r3, r1, #2
 8005d26:	4621      	mov	r1, r4
 8005d28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	008a      	lsls	r2, r1, #2
 8005d30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d34:	f7fa fa5c 	bl	80001f0 <__aeabi_uldivmod>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4b60      	ldr	r3, [pc, #384]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005d3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	011c      	lsls	r4, r3, #4
 8005d46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	1891      	adds	r1, r2, r2
 8005d5e:	61b9      	str	r1, [r7, #24]
 8005d60:	415b      	adcs	r3, r3
 8005d62:	61fb      	str	r3, [r7, #28]
 8005d64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d68:	4641      	mov	r1, r8
 8005d6a:	1851      	adds	r1, r2, r1
 8005d6c:	6139      	str	r1, [r7, #16]
 8005d6e:	4649      	mov	r1, r9
 8005d70:	414b      	adcs	r3, r1
 8005d72:	617b      	str	r3, [r7, #20]
 8005d74:	f04f 0200 	mov.w	r2, #0
 8005d78:	f04f 0300 	mov.w	r3, #0
 8005d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d80:	4659      	mov	r1, fp
 8005d82:	00cb      	lsls	r3, r1, #3
 8005d84:	4651      	mov	r1, sl
 8005d86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d8a:	4651      	mov	r1, sl
 8005d8c:	00ca      	lsls	r2, r1, #3
 8005d8e:	4610      	mov	r0, r2
 8005d90:	4619      	mov	r1, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	4642      	mov	r2, r8
 8005d96:	189b      	adds	r3, r3, r2
 8005d98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d9c:	464b      	mov	r3, r9
 8005d9e:	460a      	mov	r2, r1
 8005da0:	eb42 0303 	adc.w	r3, r2, r3
 8005da4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005db2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005db4:	f04f 0200 	mov.w	r2, #0
 8005db8:	f04f 0300 	mov.w	r3, #0
 8005dbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	008b      	lsls	r3, r1, #2
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dca:	4641      	mov	r1, r8
 8005dcc:	008a      	lsls	r2, r1, #2
 8005dce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005dd2:	f7fa fa0d 	bl	80001f0 <__aeabi_uldivmod>
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4611      	mov	r1, r2
 8005ddc:	4b38      	ldr	r3, [pc, #224]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005dde:	fba3 2301 	umull	r2, r3, r3, r1
 8005de2:	095b      	lsrs	r3, r3, #5
 8005de4:	2264      	movs	r2, #100	; 0x64
 8005de6:	fb02 f303 	mul.w	r3, r2, r3
 8005dea:	1acb      	subs	r3, r1, r3
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	3332      	adds	r3, #50	; 0x32
 8005df0:	4a33      	ldr	r2, [pc, #204]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dfc:	441c      	add	r4, r3
 8005dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e02:	2200      	movs	r2, #0
 8005e04:	673b      	str	r3, [r7, #112]	; 0x70
 8005e06:	677a      	str	r2, [r7, #116]	; 0x74
 8005e08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	415b      	adcs	r3, r3
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	1851      	adds	r1, r2, r1
 8005e20:	6039      	str	r1, [r7, #0]
 8005e22:	4649      	mov	r1, r9
 8005e24:	414b      	adcs	r3, r1
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e34:	4659      	mov	r1, fp
 8005e36:	00cb      	lsls	r3, r1, #3
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3e:	4651      	mov	r1, sl
 8005e40:	00ca      	lsls	r2, r1, #3
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e4e:	464b      	mov	r3, r9
 8005e50:	460a      	mov	r2, r1
 8005e52:	eb42 0303 	adc.w	r3, r2, r3
 8005e56:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	663b      	str	r3, [r7, #96]	; 0x60
 8005e62:	667a      	str	r2, [r7, #100]	; 0x64
 8005e64:	f04f 0200 	mov.w	r2, #0
 8005e68:	f04f 0300 	mov.w	r3, #0
 8005e6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005e70:	4649      	mov	r1, r9
 8005e72:	008b      	lsls	r3, r1, #2
 8005e74:	4641      	mov	r1, r8
 8005e76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	008a      	lsls	r2, r1, #2
 8005e7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005e82:	f7fa f9b5 	bl	80001f0 <__aeabi_uldivmod>
 8005e86:	4602      	mov	r2, r0
 8005e88:	460b      	mov	r3, r1
 8005e8a:	4b0d      	ldr	r3, [pc, #52]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005e8c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e90:	095b      	lsrs	r3, r3, #5
 8005e92:	2164      	movs	r1, #100	; 0x64
 8005e94:	fb01 f303 	mul.w	r3, r1, r3
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	011b      	lsls	r3, r3, #4
 8005e9c:	3332      	adds	r3, #50	; 0x32
 8005e9e:	4a08      	ldr	r2, [pc, #32]	; (8005ec0 <UART_SetConfig+0x4e4>)
 8005ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ea4:	095b      	lsrs	r3, r3, #5
 8005ea6:	f003 020f 	and.w	r2, r3, #15
 8005eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4422      	add	r2, r4
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ec0:	51eb851f 	.word	0x51eb851f

08005ec4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ec4:	b084      	sub	sp, #16
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	f107 001c 	add.w	r0, r7, #28
 8005ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d122      	bne.n	8005f22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d105      	bne.n	8005f16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 faa2 	bl	8006460 <USB_CoreReset>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
 8005f20:	e01a      	b.n	8005f58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fa96 	bl	8006460 <USB_CoreReset>
 8005f34:	4603      	mov	r3, r0
 8005f36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
 8005f4a:	e005      	b.n	8005f58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10b      	bne.n	8005f76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f043 0206 	orr.w	r2, r3, #6
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f043 0220 	orr.w	r2, r3, #32
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f82:	b004      	add	sp, #16
 8005f84:	4770      	bx	lr

08005f86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f023 0201 	bic.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f9a:	2300      	movs	r3, #0
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d115      	bne.n	8005ff6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005fd6:	2001      	movs	r0, #1
 8005fd8:	f7fb ffcc 	bl	8001f74 <HAL_Delay>
      ms++;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fa2e 	bl	8006444 <USB_GetMode>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d01e      	beq.n	800602c <USB_SetCurrentMode+0x84>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b31      	cmp	r3, #49	; 0x31
 8005ff2:	d9f0      	bls.n	8005fd6 <USB_SetCurrentMode+0x2e>
 8005ff4:	e01a      	b.n	800602c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ff6:	78fb      	ldrb	r3, [r7, #3]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d115      	bne.n	8006028 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006008:	2001      	movs	r0, #1
 800600a:	f7fb ffb3 	bl	8001f74 <HAL_Delay>
      ms++;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3301      	adds	r3, #1
 8006012:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 fa15 	bl	8006444 <USB_GetMode>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <USB_SetCurrentMode+0x84>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b31      	cmp	r3, #49	; 0x31
 8006024:	d9f0      	bls.n	8006008 <USB_SetCurrentMode+0x60>
 8006026:	e001      	b.n	800602c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e005      	b.n	8006038 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b32      	cmp	r3, #50	; 0x32
 8006030:	d101      	bne.n	8006036 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	e000      	b.n	8006038 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006040:	b084      	sub	sp, #16
 8006042:	b580      	push	{r7, lr}
 8006044:	b086      	sub	sp, #24
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800604e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006052:	2300      	movs	r3, #0
 8006054:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800605a:	2300      	movs	r3, #0
 800605c:	613b      	str	r3, [r7, #16]
 800605e:	e009      	b.n	8006074 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3340      	adds	r3, #64	; 0x40
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	2200      	movs	r2, #0
 800606c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	3301      	adds	r3, #1
 8006072:	613b      	str	r3, [r7, #16]
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b0e      	cmp	r3, #14
 8006078:	d9f2      	bls.n	8006060 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800607a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800607c:	2b00      	cmp	r3, #0
 800607e:	d11c      	bne.n	80060ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800608e:	f043 0302 	orr.w	r3, r3, #2
 8006092:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38
 80060b8:	e00b      	b.n	80060d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060d8:	461a      	mov	r2, r3
 80060da:	2300      	movs	r3, #0
 80060dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	4619      	mov	r1, r3
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ec:	461a      	mov	r2, r3
 80060ee:	680b      	ldr	r3, [r1, #0]
 80060f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d10c      	bne.n	8006112 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d104      	bne.n	8006108 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060fe:	2100      	movs	r1, #0
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f965 	bl	80063d0 <USB_SetDevSpeed>
 8006106:	e008      	b.n	800611a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006108:	2101      	movs	r1, #1
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f960 	bl	80063d0 <USB_SetDevSpeed>
 8006110:	e003      	b.n	800611a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006112:	2103      	movs	r1, #3
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 f95b 	bl	80063d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800611a:	2110      	movs	r1, #16
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f000 f8f3 	bl	8006308 <USB_FlushTxFifo>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f91f 	bl	8006370 <USB_FlushRxFifo>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006142:	461a      	mov	r2, r3
 8006144:	2300      	movs	r3, #0
 8006146:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614e:	461a      	mov	r2, r3
 8006150:	2300      	movs	r3, #0
 8006152:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800615a:	461a      	mov	r2, r3
 800615c:	2300      	movs	r3, #0
 800615e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006160:	2300      	movs	r3, #0
 8006162:	613b      	str	r3, [r7, #16]
 8006164:	e043      	b.n	80061ee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800617c:	d118      	bne.n	80061b0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10a      	bne.n	800619a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4413      	add	r3, r2
 800618c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006190:	461a      	mov	r2, r3
 8006192:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	e013      	b.n	80061c2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a6:	461a      	mov	r2, r3
 80061a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	e008      	b.n	80061c2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061bc:	461a      	mov	r2, r3
 80061be:	2300      	movs	r3, #0
 80061c0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	461a      	mov	r2, r3
 80061d0:	2300      	movs	r3, #0
 80061d2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061e0:	461a      	mov	r2, r3
 80061e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061e6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3301      	adds	r3, #1
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d3b7      	bcc.n	8006166 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061f6:	2300      	movs	r3, #0
 80061f8:	613b      	str	r3, [r7, #16]
 80061fa:	e043      	b.n	8006284 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800620e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006212:	d118      	bne.n	8006246 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10a      	bne.n	8006230 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	015a      	lsls	r2, r3, #5
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	4413      	add	r3, r2
 8006222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006226:	461a      	mov	r2, r3
 8006228:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	e013      	b.n	8006258 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	015a      	lsls	r2, r3, #5
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4413      	add	r3, r2
 8006238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800623c:	461a      	mov	r2, r3
 800623e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	e008      	b.n	8006258 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4413      	add	r3, r2
 800624e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006252:	461a      	mov	r2, r3
 8006254:	2300      	movs	r3, #0
 8006256:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	015a      	lsls	r2, r3, #5
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	4413      	add	r3, r2
 8006260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006264:	461a      	mov	r2, r3
 8006266:	2300      	movs	r3, #0
 8006268:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	461a      	mov	r2, r3
 8006278:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800627c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	3301      	adds	r3, #1
 8006282:	613b      	str	r3, [r7, #16]
 8006284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006286:	693a      	ldr	r2, [r7, #16]
 8006288:	429a      	cmp	r2, r3
 800628a:	d3b7      	bcc.n	80061fc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800629a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800629e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80062ac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80062ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d105      	bne.n	80062c0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	f043 0210 	orr.w	r2, r3, #16
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699a      	ldr	r2, [r3, #24]
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <USB_DevInit+0x2c4>)
 80062c6:	4313      	orrs	r3, r2
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d005      	beq.n	80062de <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	699b      	ldr	r3, [r3, #24]
 80062d6:	f043 0208 	orr.w	r2, r3, #8
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d107      	bne.n	80062f4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	699b      	ldr	r3, [r3, #24]
 80062e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80062ec:	f043 0304 	orr.w	r3, r3, #4
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006300:	b004      	add	sp, #16
 8006302:	4770      	bx	lr
 8006304:	803c3800 	.word	0x803c3800

08006308 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3301      	adds	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	4a13      	ldr	r2, [pc, #76]	; (800636c <USB_FlushTxFifo+0x64>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d901      	bls.n	8006328 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006324:	2303      	movs	r3, #3
 8006326:	e01b      	b.n	8006360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	691b      	ldr	r3, [r3, #16]
 800632c:	2b00      	cmp	r3, #0
 800632e:	daf2      	bge.n	8006316 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	019b      	lsls	r3, r3, #6
 8006338:	f043 0220 	orr.w	r2, r3, #32
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4a08      	ldr	r2, [pc, #32]	; (800636c <USB_FlushTxFifo+0x64>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d901      	bls.n	8006352 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800634e:	2303      	movs	r3, #3
 8006350:	e006      	b.n	8006360 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0320 	and.w	r3, r3, #32
 800635a:	2b20      	cmp	r3, #32
 800635c:	d0f0      	beq.n	8006340 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	00030d40 	.word	0x00030d40

08006370 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006370:	b480      	push	{r7}
 8006372:	b085      	sub	sp, #20
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4a11      	ldr	r2, [pc, #68]	; (80063cc <USB_FlushRxFifo+0x5c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d901      	bls.n	800638e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e018      	b.n	80063c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	691b      	ldr	r3, [r3, #16]
 8006392:	2b00      	cmp	r3, #0
 8006394:	daf2      	bge.n	800637c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2210      	movs	r2, #16
 800639e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3301      	adds	r3, #1
 80063a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a08      	ldr	r2, [pc, #32]	; (80063cc <USB_FlushRxFifo+0x5c>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d901      	bls.n	80063b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e006      	b.n	80063c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	f003 0310 	and.w	r3, r3, #16
 80063ba:	2b10      	cmp	r3, #16
 80063bc:	d0f0      	beq.n	80063a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063be:	2300      	movs	r3, #0
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	3714      	adds	r7, #20
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	00030d40 	.word	0x00030d40

080063d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	460b      	mov	r3, r1
 80063da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	78fb      	ldrb	r3, [r7, #3]
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063f0:	4313      	orrs	r3, r2
 80063f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800641c:	f023 0303 	bic.w	r3, r3, #3
 8006420:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	f003 0301 	and.w	r3, r3, #1
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	3301      	adds	r3, #1
 8006470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4a13      	ldr	r2, [pc, #76]	; (80064c4 <USB_CoreReset+0x64>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d901      	bls.n	800647e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800647a:	2303      	movs	r3, #3
 800647c:	e01b      	b.n	80064b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	daf2      	bge.n	800646c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	f043 0201 	orr.w	r2, r3, #1
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	3301      	adds	r3, #1
 800649a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4a09      	ldr	r2, [pc, #36]	; (80064c4 <USB_CoreReset+0x64>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d901      	bls.n	80064a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e006      	b.n	80064b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	f003 0301 	and.w	r3, r3, #1
 80064b0:	2b01      	cmp	r3, #1
 80064b2:	d0f0      	beq.n	8006496 <USB_CoreReset+0x36>

  return HAL_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr
 80064c2:	bf00      	nop
 80064c4:	00030d40 	.word	0x00030d40

080064c8 <__NVIC_SetPriority>:
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	4603      	mov	r3, r0
 80064d0:	6039      	str	r1, [r7, #0]
 80064d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	db0a      	blt.n	80064f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	490c      	ldr	r1, [pc, #48]	; (8006514 <__NVIC_SetPriority+0x4c>)
 80064e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e6:	0112      	lsls	r2, r2, #4
 80064e8:	b2d2      	uxtb	r2, r2
 80064ea:	440b      	add	r3, r1
 80064ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80064f0:	e00a      	b.n	8006508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	4908      	ldr	r1, [pc, #32]	; (8006518 <__NVIC_SetPriority+0x50>)
 80064f8:	79fb      	ldrb	r3, [r7, #7]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	3b04      	subs	r3, #4
 8006500:	0112      	lsls	r2, r2, #4
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	440b      	add	r3, r1
 8006506:	761a      	strb	r2, [r3, #24]
}
 8006508:	bf00      	nop
 800650a:	370c      	adds	r7, #12
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr
 8006514:	e000e100 	.word	0xe000e100
 8006518:	e000ed00 	.word	0xe000ed00

0800651c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006520:	4b05      	ldr	r3, [pc, #20]	; (8006538 <SysTick_Handler+0x1c>)
 8006522:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006524:	f001 fd28 	bl	8007f78 <xTaskGetSchedulerState>
 8006528:	4603      	mov	r3, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	d001      	beq.n	8006532 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800652e:	f002 fb13 	bl	8008b58 <xPortSysTickHandler>
  }
}
 8006532:	bf00      	nop
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	e000e010 	.word	0xe000e010

0800653c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800653c:	b580      	push	{r7, lr}
 800653e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006540:	2100      	movs	r1, #0
 8006542:	f06f 0004 	mvn.w	r0, #4
 8006546:	f7ff ffbf 	bl	80064c8 <__NVIC_SetPriority>
#endif
}
 800654a:	bf00      	nop
 800654c:	bd80      	pop	{r7, pc}
	...

08006550 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006556:	f3ef 8305 	mrs	r3, IPSR
 800655a:	603b      	str	r3, [r7, #0]
  return(result);
 800655c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800655e:	2b00      	cmp	r3, #0
 8006560:	d003      	beq.n	800656a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006562:	f06f 0305 	mvn.w	r3, #5
 8006566:	607b      	str	r3, [r7, #4]
 8006568:	e00c      	b.n	8006584 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800656a:	4b0a      	ldr	r3, [pc, #40]	; (8006594 <osKernelInitialize+0x44>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d105      	bne.n	800657e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006572:	4b08      	ldr	r3, [pc, #32]	; (8006594 <osKernelInitialize+0x44>)
 8006574:	2201      	movs	r2, #1
 8006576:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006578:	2300      	movs	r3, #0
 800657a:	607b      	str	r3, [r7, #4]
 800657c:	e002      	b.n	8006584 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800657e:	f04f 33ff 	mov.w	r3, #4294967295
 8006582:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006584:	687b      	ldr	r3, [r7, #4]
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	200009ec 	.word	0x200009ec

08006598 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800659e:	f3ef 8305 	mrs	r3, IPSR
 80065a2:	603b      	str	r3, [r7, #0]
  return(result);
 80065a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80065aa:	f06f 0305 	mvn.w	r3, #5
 80065ae:	607b      	str	r3, [r7, #4]
 80065b0:	e010      	b.n	80065d4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80065b2:	4b0b      	ldr	r3, [pc, #44]	; (80065e0 <osKernelStart+0x48>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d109      	bne.n	80065ce <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80065ba:	f7ff ffbf 	bl	800653c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80065be:	4b08      	ldr	r3, [pc, #32]	; (80065e0 <osKernelStart+0x48>)
 80065c0:	2202      	movs	r2, #2
 80065c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80065c4:	f001 f87c 	bl	80076c0 <vTaskStartScheduler>
      stat = osOK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	607b      	str	r3, [r7, #4]
 80065cc:	e002      	b.n	80065d4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80065ce:	f04f 33ff 	mov.w	r3, #4294967295
 80065d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80065d4:	687b      	ldr	r3, [r7, #4]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	200009ec 	.word	0x200009ec

080065e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08e      	sub	sp, #56	; 0x38
 80065e8:	af04      	add	r7, sp, #16
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065f4:	f3ef 8305 	mrs	r3, IPSR
 80065f8:	617b      	str	r3, [r7, #20]
  return(result);
 80065fa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d17e      	bne.n	80066fe <osThreadNew+0x11a>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d07b      	beq.n	80066fe <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006606:	2380      	movs	r3, #128	; 0x80
 8006608:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800660a:	2318      	movs	r3, #24
 800660c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800660e:	2300      	movs	r3, #0
 8006610:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006612:	f04f 33ff 	mov.w	r3, #4294967295
 8006616:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d045      	beq.n	80066aa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <osThreadNew+0x48>
        name = attr->name;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <osThreadNew+0x6e>
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b38      	cmp	r3, #56	; 0x38
 8006644:	d805      	bhi.n	8006652 <osThreadNew+0x6e>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <osThreadNew+0x72>
        return (NULL);
 8006652:	2300      	movs	r3, #0
 8006654:	e054      	b.n	8006700 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	089b      	lsrs	r3, r3, #2
 8006664:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00e      	beq.n	800668c <osThreadNew+0xa8>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	2ba7      	cmp	r3, #167	; 0xa7
 8006674:	d90a      	bls.n	800668c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800667a:	2b00      	cmp	r3, #0
 800667c:	d006      	beq.n	800668c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d002      	beq.n	800668c <osThreadNew+0xa8>
        mem = 1;
 8006686:	2301      	movs	r3, #1
 8006688:	61bb      	str	r3, [r7, #24]
 800668a:	e010      	b.n	80066ae <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10c      	bne.n	80066ae <osThreadNew+0xca>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d108      	bne.n	80066ae <osThreadNew+0xca>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d104      	bne.n	80066ae <osThreadNew+0xca>
          mem = 0;
 80066a4:	2300      	movs	r3, #0
 80066a6:	61bb      	str	r3, [r7, #24]
 80066a8:	e001      	b.n	80066ae <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d110      	bne.n	80066d6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80066b8:	687a      	ldr	r2, [r7, #4]
 80066ba:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80066bc:	9202      	str	r2, [sp, #8]
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	9300      	str	r3, [sp, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	6a3a      	ldr	r2, [r7, #32]
 80066c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ca:	68f8      	ldr	r0, [r7, #12]
 80066cc:	f000 fe0c 	bl	80072e8 <xTaskCreateStatic>
 80066d0:	4603      	mov	r3, r0
 80066d2:	613b      	str	r3, [r7, #16]
 80066d4:	e013      	b.n	80066fe <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d110      	bne.n	80066fe <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80066dc:	6a3b      	ldr	r3, [r7, #32]
 80066de:	b29a      	uxth	r2, r3
 80066e0:	f107 0310 	add.w	r3, r7, #16
 80066e4:	9301      	str	r3, [sp, #4]
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	9300      	str	r3, [sp, #0]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066ee:	68f8      	ldr	r0, [r7, #12]
 80066f0:	f000 fe57 	bl	80073a2 <xTaskCreate>
 80066f4:	4603      	mov	r3, r0
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d001      	beq.n	80066fe <osThreadNew+0x11a>
            hTask = NULL;
 80066fa:	2300      	movs	r3, #0
 80066fc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80066fe:	693b      	ldr	r3, [r7, #16]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3728      	adds	r7, #40	; 0x28
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006710:	f3ef 8305 	mrs	r3, IPSR
 8006714:	60bb      	str	r3, [r7, #8]
  return(result);
 8006716:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <osDelay+0x1c>
    stat = osErrorISR;
 800671c:	f06f 0305 	mvn.w	r3, #5
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	e007      	b.n	8006734 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <osDelay+0x2c>
      vTaskDelay(ticks);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 ff92 	bl	8007658 <vTaskDelay>
    }
  }

  return (stat);
 8006734:	68fb      	ldr	r3, [r7, #12]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	60f8      	str	r0, [r7, #12]
 8006748:	60b9      	str	r1, [r7, #8]
 800674a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4a07      	ldr	r2, [pc, #28]	; (800676c <vApplicationGetIdleTaskMemory+0x2c>)
 8006750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4a06      	ldr	r2, [pc, #24]	; (8006770 <vApplicationGetIdleTaskMemory+0x30>)
 8006756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2280      	movs	r2, #128	; 0x80
 800675c:	601a      	str	r2, [r3, #0]
}
 800675e:	bf00      	nop
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	200009f0 	.word	0x200009f0
 8006770:	20000a98 	.word	0x20000a98

08006774 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4a07      	ldr	r2, [pc, #28]	; (80067a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006784:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	4a06      	ldr	r2, [pc, #24]	; (80067a4 <vApplicationGetTimerTaskMemory+0x30>)
 800678a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006792:	601a      	str	r2, [r3, #0]
}
 8006794:	bf00      	nop
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	20000c98 	.word	0x20000c98
 80067a4:	20000d40 	.word	0x20000d40

080067a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f103 0208 	add.w	r2, r3, #8
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f103 0208 	add.w	r2, r3, #8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f103 0208 	add.w	r2, r3, #8
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80067f6:	bf00      	nop
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68fa      	ldr	r2, [r7, #12]
 8006816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	683a      	ldr	r2, [r7, #0]
 8006826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	683a      	ldr	r2, [r7, #0]
 800682c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	687a      	ldr	r2, [r7, #4]
 8006832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	1c5a      	adds	r2, r3, #1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	601a      	str	r2, [r3, #0]
}
 800683e:	bf00      	nop
 8006840:	3714      	adds	r7, #20
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800684a:	b480      	push	{r7}
 800684c:	b085      	sub	sp, #20
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006860:	d103      	bne.n	800686a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e00c      	b.n	8006884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3308      	adds	r3, #8
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e002      	b.n	8006878 <vListInsert+0x2e>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68ba      	ldr	r2, [r7, #8]
 8006880:	429a      	cmp	r2, r3
 8006882:	d2f6      	bcs.n	8006872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	683a      	ldr	r2, [r7, #0]
 8006892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	1c5a      	adds	r2, r3, #1
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	601a      	str	r2, [r3, #0]
}
 80068b0:	bf00      	nop
 80068b2:	3714      	adds	r7, #20
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr

080068bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6892      	ldr	r2, [r2, #8]
 80068d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	6852      	ldr	r2, [r2, #4]
 80068dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d103      	bne.n	80068f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	689a      	ldr	r2, [r3, #8]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	1e5a      	subs	r2, r3, #1
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b084      	sub	sp, #16
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800693a:	f002 f87b 	bl	8008a34 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006946:	68f9      	ldr	r1, [r7, #12]
 8006948:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800694a:	fb01 f303 	mul.w	r3, r1, r3
 800694e:	441a      	add	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681a      	ldr	r2, [r3, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800696a:	3b01      	subs	r3, #1
 800696c:	68f9      	ldr	r1, [r7, #12]
 800696e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006970:	fb01 f303 	mul.w	r3, r1, r3
 8006974:	441a      	add	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	22ff      	movs	r2, #255	; 0xff
 800697e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	22ff      	movs	r2, #255	; 0xff
 8006986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d114      	bne.n	80069ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01a      	beq.n	80069ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3310      	adds	r3, #16
 800699c:	4618      	mov	r0, r3
 800699e:	f001 f929 	bl	8007bf4 <xTaskRemoveFromEventList>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d012      	beq.n	80069ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80069a8:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <xQueueGenericReset+0xcc>)
 80069aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ae:	601a      	str	r2, [r3, #0]
 80069b0:	f3bf 8f4f 	dsb	sy
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	e009      	b.n	80069ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3310      	adds	r3, #16
 80069be:	4618      	mov	r0, r3
 80069c0:	f7ff fef2 	bl	80067a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	3324      	adds	r3, #36	; 0x24
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7ff feed 	bl	80067a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80069ce:	f002 f861 	bl	8008a94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80069d2:	2301      	movs	r3, #1
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b08e      	sub	sp, #56	; 0x38
 80069e4:	af02      	add	r7, sp, #8
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10a      	bne.n	8006a0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006a06:	bf00      	nop
 8006a08:	e7fe      	b.n	8006a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d10a      	bne.n	8006a26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a14:	f383 8811 	msr	BASEPRI, r3
 8006a18:	f3bf 8f6f 	isb	sy
 8006a1c:	f3bf 8f4f 	dsb	sy
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006a22:	bf00      	nop
 8006a24:	e7fe      	b.n	8006a24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d002      	beq.n	8006a32 <xQueueGenericCreateStatic+0x52>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <xQueueGenericCreateStatic+0x56>
 8006a32:	2301      	movs	r3, #1
 8006a34:	e000      	b.n	8006a38 <xQueueGenericCreateStatic+0x58>
 8006a36:	2300      	movs	r3, #0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10a      	bne.n	8006a52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	623b      	str	r3, [r7, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	e7fe      	b.n	8006a50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d102      	bne.n	8006a5e <xQueueGenericCreateStatic+0x7e>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <xQueueGenericCreateStatic+0x82>
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e000      	b.n	8006a64 <xQueueGenericCreateStatic+0x84>
 8006a62:	2300      	movs	r3, #0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	61fb      	str	r3, [r7, #28]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006a7e:	2350      	movs	r3, #80	; 0x50
 8006a80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b50      	cmp	r3, #80	; 0x50
 8006a86:	d00a      	beq.n	8006a9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	61bb      	str	r3, [r7, #24]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006a9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00d      	beq.n	8006ac6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006ab2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	4613      	mov	r3, r2
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f805 	bl	8006ad0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3730      	adds	r7, #48	; 0x30
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d103      	bne.n	8006aec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	601a      	str	r2, [r3, #0]
 8006aea:	e002      	b.n	8006af2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006af2:	69bb      	ldr	r3, [r7, #24]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	68ba      	ldr	r2, [r7, #8]
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006afe:	2101      	movs	r1, #1
 8006b00:	69b8      	ldr	r0, [r7, #24]
 8006b02:	f7ff ff05 	bl	8006910 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	78fa      	ldrb	r2, [r7, #3]
 8006b0a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006b0e:	bf00      	nop
 8006b10:	3710      	adds	r7, #16
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bd80      	pop	{r7, pc}
	...

08006b18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b08e      	sub	sp, #56	; 0x38
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b26:	2300      	movs	r3, #0
 8006b28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10a      	bne.n	8006b4a <xQueueGenericSend+0x32>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b46:	bf00      	nop
 8006b48:	e7fe      	b.n	8006b48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d103      	bne.n	8006b58 <xQueueGenericSend+0x40>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <xQueueGenericSend+0x44>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e000      	b.n	8006b5e <xQueueGenericSend+0x46>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <xQueueGenericSend+0x60>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b74:	bf00      	nop
 8006b76:	e7fe      	b.n	8006b76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	d103      	bne.n	8006b86 <xQueueGenericSend+0x6e>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <xQueueGenericSend+0x72>
 8006b86:	2301      	movs	r3, #1
 8006b88:	e000      	b.n	8006b8c <xQueueGenericSend+0x74>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10a      	bne.n	8006ba6 <xQueueGenericSend+0x8e>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	623b      	str	r3, [r7, #32]
}
 8006ba2:	bf00      	nop
 8006ba4:	e7fe      	b.n	8006ba4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ba6:	f001 f9e7 	bl	8007f78 <xTaskGetSchedulerState>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <xQueueGenericSend+0x9e>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <xQueueGenericSend+0xa2>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <xQueueGenericSend+0xa4>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	61fb      	str	r3, [r7, #28]
}
 8006bd2:	bf00      	nop
 8006bd4:	e7fe      	b.n	8006bd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bd6:	f001 ff2d 	bl	8008a34 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d302      	bcc.n	8006bec <xQueueGenericSend+0xd4>
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d129      	bne.n	8006c40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bec:	683a      	ldr	r2, [r7, #0]
 8006bee:	68b9      	ldr	r1, [r7, #8]
 8006bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bf2:	f000 fa0b 	bl	800700c <prvCopyDataToQueue>
 8006bf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d010      	beq.n	8006c22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c02:	3324      	adds	r3, #36	; 0x24
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fff5 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d013      	beq.n	8006c38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006c10:	4b3f      	ldr	r3, [pc, #252]	; (8006d10 <xQueueGenericSend+0x1f8>)
 8006c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
 8006c20:	e00a      	b.n	8006c38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d007      	beq.n	8006c38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006c28:	4b39      	ldr	r3, [pc, #228]	; (8006d10 <xQueueGenericSend+0x1f8>)
 8006c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2e:	601a      	str	r2, [r3, #0]
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006c38:	f001 ff2c 	bl	8008a94 <vPortExitCritical>
				return pdPASS;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e063      	b.n	8006d08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d103      	bne.n	8006c4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c46:	f001 ff25 	bl	8008a94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e05c      	b.n	8006d08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d106      	bne.n	8006c62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c54:	f107 0314 	add.w	r3, r7, #20
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f001 f82f 	bl	8007cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c62:	f001 ff17 	bl	8008a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c66:	f000 fd9b 	bl	80077a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c6a:	f001 fee3 	bl	8008a34 <vPortEnterCritical>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d103      	bne.n	8006c84 <xQueueGenericSend+0x16c>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c8a:	b25b      	sxtb	r3, r3
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d103      	bne.n	8006c9a <xQueueGenericSend+0x182>
 8006c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c9a:	f001 fefb 	bl	8008a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c9e:	1d3a      	adds	r2, r7, #4
 8006ca0:	f107 0314 	add.w	r3, r7, #20
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 f81e 	bl	8007ce8 <xTaskCheckForTimeOut>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d124      	bne.n	8006cfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cb4:	f000 faa2 	bl	80071fc <prvIsQueueFull>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d018      	beq.n	8006cf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	3310      	adds	r3, #16
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	4611      	mov	r1, r2
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f000 ff44 	bl	8007b54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006ccc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cce:	f000 fa2d 	bl	800712c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006cd2:	f000 fd73 	bl	80077bc <xTaskResumeAll>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f47f af7c 	bne.w	8006bd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006cde:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <xQueueGenericSend+0x1f8>)
 8006ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	f3bf 8f6f 	isb	sy
 8006cee:	e772      	b.n	8006bd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cf2:	f000 fa1b 	bl	800712c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cf6:	f000 fd61 	bl	80077bc <xTaskResumeAll>
 8006cfa:	e76c      	b.n	8006bd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cfe:	f000 fa15 	bl	800712c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006d02:	f000 fd5b 	bl	80077bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006d06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3738      	adds	r7, #56	; 0x38
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b090      	sub	sp, #64	; 0x40
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d10a      	bne.n	8006d42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d103      	bne.n	8006d50 <xQueueGenericSendFromISR+0x3c>
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <xQueueGenericSendFromISR+0x40>
 8006d50:	2301      	movs	r3, #1
 8006d52:	e000      	b.n	8006d56 <xQueueGenericSendFromISR+0x42>
 8006d54:	2300      	movs	r3, #0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10a      	bne.n	8006d70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5e:	f383 8811 	msr	BASEPRI, r3
 8006d62:	f3bf 8f6f 	isb	sy
 8006d66:	f3bf 8f4f 	dsb	sy
 8006d6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006d6c:	bf00      	nop
 8006d6e:	e7fe      	b.n	8006d6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d103      	bne.n	8006d7e <xQueueGenericSendFromISR+0x6a>
 8006d76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <xQueueGenericSendFromISR+0x6e>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <xQueueGenericSendFromISR+0x70>
 8006d82:	2300      	movs	r3, #0
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d10a      	bne.n	8006d9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8c:	f383 8811 	msr	BASEPRI, r3
 8006d90:	f3bf 8f6f 	isb	sy
 8006d94:	f3bf 8f4f 	dsb	sy
 8006d98:	623b      	str	r3, [r7, #32]
}
 8006d9a:	bf00      	nop
 8006d9c:	e7fe      	b.n	8006d9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d9e:	f001 ff2b 	bl	8008bf8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006da2:	f3ef 8211 	mrs	r2, BASEPRI
 8006da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006daa:	f383 8811 	msr	BASEPRI, r3
 8006dae:	f3bf 8f6f 	isb	sy
 8006db2:	f3bf 8f4f 	dsb	sy
 8006db6:	61fa      	str	r2, [r7, #28]
 8006db8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006dba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d302      	bcc.n	8006dd0 <xQueueGenericSendFromISR+0xbc>
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	2b02      	cmp	r3, #2
 8006dce:	d12f      	bne.n	8006e30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006dd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006de6:	f000 f911 	bl	800700c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006dea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d112      	bne.n	8006e1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d016      	beq.n	8006e2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfe:	3324      	adds	r3, #36	; 0x24
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fef7 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00e      	beq.n	8006e2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00b      	beq.n	8006e2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	601a      	str	r2, [r3, #0]
 8006e18:	e007      	b.n	8006e2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006e1e:	3301      	adds	r3, #1
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	b25a      	sxtb	r2, r3
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006e2e:	e001      	b.n	8006e34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006e40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3740      	adds	r7, #64	; 0x40
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <xQueueReceive+0x30>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	623b      	str	r3, [r7, #32]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d103      	bne.n	8006e8a <xQueueReceive+0x3e>
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <xQueueReceive+0x42>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <xQueueReceive+0x44>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <xQueueReceive+0x5e>
	__asm volatile
 8006e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e98:	f383 8811 	msr	BASEPRI, r3
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f3bf 8f4f 	dsb	sy
 8006ea4:	61fb      	str	r3, [r7, #28]
}
 8006ea6:	bf00      	nop
 8006ea8:	e7fe      	b.n	8006ea8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006eaa:	f001 f865 	bl	8007f78 <xTaskGetSchedulerState>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d102      	bne.n	8006eba <xQueueReceive+0x6e>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <xQueueReceive+0x72>
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e000      	b.n	8006ec0 <xQueueReceive+0x74>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <xQueueReceive+0x8e>
	__asm volatile
 8006ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec8:	f383 8811 	msr	BASEPRI, r3
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	61bb      	str	r3, [r7, #24]
}
 8006ed6:	bf00      	nop
 8006ed8:	e7fe      	b.n	8006ed8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006eda:	f001 fdab 	bl	8008a34 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d01f      	beq.n	8006f2a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006eea:	68b9      	ldr	r1, [r7, #8]
 8006eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eee:	f000 f8f7 	bl	80070e0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef4:	1e5a      	subs	r2, r3, #1
 8006ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d00f      	beq.n	8006f22 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f04:	3310      	adds	r3, #16
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fe74 	bl	8007bf4 <xTaskRemoveFromEventList>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d007      	beq.n	8006f22 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006f12:	4b3d      	ldr	r3, [pc, #244]	; (8007008 <xQueueReceive+0x1bc>)
 8006f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f18:	601a      	str	r2, [r3, #0]
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006f22:	f001 fdb7 	bl	8008a94 <vPortExitCritical>
				return pdPASS;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e069      	b.n	8006ffe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d103      	bne.n	8006f38 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f30:	f001 fdb0 	bl	8008a94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006f34:	2300      	movs	r3, #0
 8006f36:	e062      	b.n	8006ffe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d106      	bne.n	8006f4c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f3e:	f107 0310 	add.w	r3, r7, #16
 8006f42:	4618      	mov	r0, r3
 8006f44:	f000 feba 	bl	8007cbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f4c:	f001 fda2 	bl	8008a94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f50:	f000 fc26 	bl	80077a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f54:	f001 fd6e 	bl	8008a34 <vPortEnterCritical>
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f5e:	b25b      	sxtb	r3, r3
 8006f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f64:	d103      	bne.n	8006f6e <xQueueReceive+0x122>
 8006f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f74:	b25b      	sxtb	r3, r3
 8006f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7a:	d103      	bne.n	8006f84 <xQueueReceive+0x138>
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f84:	f001 fd86 	bl	8008a94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f88:	1d3a      	adds	r2, r7, #4
 8006f8a:	f107 0310 	add.w	r3, r7, #16
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fea9 	bl	8007ce8 <xTaskCheckForTimeOut>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d123      	bne.n	8006fe4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9e:	f000 f917 	bl	80071d0 <prvIsQueueEmpty>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d017      	beq.n	8006fd8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006faa:	3324      	adds	r3, #36	; 0x24
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f000 fdcf 	bl	8007b54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fb8:	f000 f8b8 	bl	800712c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006fbc:	f000 fbfe 	bl	80077bc <xTaskResumeAll>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d189      	bne.n	8006eda <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006fc6:	4b10      	ldr	r3, [pc, #64]	; (8007008 <xQueueReceive+0x1bc>)
 8006fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	e780      	b.n	8006eda <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fda:	f000 f8a7 	bl	800712c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006fde:	f000 fbed 	bl	80077bc <xTaskResumeAll>
 8006fe2:	e77a      	b.n	8006eda <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006fe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe6:	f000 f8a1 	bl	800712c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fea:	f000 fbe7 	bl	80077bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ff0:	f000 f8ee 	bl	80071d0 <prvIsQueueEmpty>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f43f af6f 	beq.w	8006eda <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3730      	adds	r7, #48	; 0x30
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	e000ed04 	.word	0xe000ed04

0800700c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b086      	sub	sp, #24
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007020:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007026:	2b00      	cmp	r3, #0
 8007028:	d10d      	bne.n	8007046 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d14d      	bne.n	80070ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	4618      	mov	r0, r3
 8007038:	f000 ffbc 	bl	8007fb4 <xTaskPriorityDisinherit>
 800703c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2200      	movs	r2, #0
 8007042:	609a      	str	r2, [r3, #8]
 8007044:	e043      	b.n	80070ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d119      	bne.n	8007080 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6858      	ldr	r0, [r3, #4]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007054:	461a      	mov	r2, r3
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	f002 f87c 	bl	8009154 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007064:	441a      	add	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	685a      	ldr	r2, [r3, #4]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	429a      	cmp	r2, r3
 8007074:	d32b      	bcc.n	80070ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681a      	ldr	r2, [r3, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
 800707e:	e026      	b.n	80070ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	68d8      	ldr	r0, [r3, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007088:	461a      	mov	r2, r3
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	f002 f862 	bl	8009154 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68da      	ldr	r2, [r3, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007098:	425b      	negs	r3, r3
 800709a:	441a      	add	r2, r3
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d207      	bcs.n	80070bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b4:	425b      	negs	r3, r3
 80070b6:	441a      	add	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d105      	bne.n	80070ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80070d6:	697b      	ldr	r3, [r7, #20]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	3718      	adds	r7, #24
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d018      	beq.n	8007124 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	441a      	add	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68da      	ldr	r2, [r3, #12]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	429a      	cmp	r2, r3
 800710a:	d303      	bcc.n	8007114 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68d9      	ldr	r1, [r3, #12]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711c:	461a      	mov	r2, r3
 800711e:	6838      	ldr	r0, [r7, #0]
 8007120:	f002 f818 	bl	8009154 <memcpy>
	}
}
 8007124:	bf00      	nop
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007134:	f001 fc7e 	bl	8008a34 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800713e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007140:	e011      	b.n	8007166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	2b00      	cmp	r3, #0
 8007148:	d012      	beq.n	8007170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	3324      	adds	r3, #36	; 0x24
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fd50 	bl	8007bf4 <xTaskRemoveFromEventList>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d001      	beq.n	800715e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800715a:	f000 fe27 	bl	8007dac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800715e:	7bfb      	ldrb	r3, [r7, #15]
 8007160:	3b01      	subs	r3, #1
 8007162:	b2db      	uxtb	r3, r3
 8007164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800716a:	2b00      	cmp	r3, #0
 800716c:	dce9      	bgt.n	8007142 <prvUnlockQueue+0x16>
 800716e:	e000      	b.n	8007172 <prvUnlockQueue+0x46>
					break;
 8007170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	22ff      	movs	r2, #255	; 0xff
 8007176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800717a:	f001 fc8b 	bl	8008a94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800717e:	f001 fc59 	bl	8008a34 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800718a:	e011      	b.n	80071b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d012      	beq.n	80071ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3310      	adds	r3, #16
 8007198:	4618      	mov	r0, r3
 800719a:	f000 fd2b 	bl	8007bf4 <xTaskRemoveFromEventList>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80071a4:	f000 fe02 	bl	8007dac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80071b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dce9      	bgt.n	800718c <prvUnlockQueue+0x60>
 80071b8:	e000      	b.n	80071bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80071ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	22ff      	movs	r2, #255	; 0xff
 80071c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80071c4:	f001 fc66 	bl	8008a94 <vPortExitCritical>
}
 80071c8:	bf00      	nop
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071d8:	f001 fc2c 	bl	8008a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80071e4:	2301      	movs	r3, #1
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	e001      	b.n	80071ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071ee:	f001 fc51 	bl	8008a94 <vPortExitCritical>

	return xReturn;
 80071f2:	68fb      	ldr	r3, [r7, #12]
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3710      	adds	r7, #16
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007204:	f001 fc16 	bl	8008a34 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007210:	429a      	cmp	r2, r3
 8007212:	d102      	bne.n	800721a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007214:	2301      	movs	r3, #1
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e001      	b.n	800721e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800721a:	2300      	movs	r3, #0
 800721c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800721e:	f001 fc39 	bl	8008a94 <vPortExitCritical>

	return xReturn;
 8007222:	68fb      	ldr	r3, [r7, #12]
}
 8007224:	4618      	mov	r0, r3
 8007226:	3710      	adds	r7, #16
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}

0800722c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800722c:	b480      	push	{r7}
 800722e:	b085      	sub	sp, #20
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	e014      	b.n	8007266 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800723c:	4a0f      	ldr	r2, [pc, #60]	; (800727c <vQueueAddToRegistry+0x50>)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007248:	490c      	ldr	r1, [pc, #48]	; (800727c <vQueueAddToRegistry+0x50>)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007252:	4a0a      	ldr	r2, [pc, #40]	; (800727c <vQueueAddToRegistry+0x50>)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	4413      	add	r3, r2
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800725e:	e006      	b.n	800726e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	3301      	adds	r3, #1
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b07      	cmp	r3, #7
 800726a:	d9e7      	bls.n	800723c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800726c:	bf00      	nop
 800726e:	bf00      	nop
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	20001140 	.word	0x20001140

08007280 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007290:	f001 fbd0 	bl	8008a34 <vPortEnterCritical>
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800729a:	b25b      	sxtb	r3, r3
 800729c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a0:	d103      	bne.n	80072aa <vQueueWaitForMessageRestricted+0x2a>
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b6:	d103      	bne.n	80072c0 <vQueueWaitForMessageRestricted+0x40>
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072c0:	f001 fbe8 	bl	8008a94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d106      	bne.n	80072da <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	3324      	adds	r3, #36	; 0x24
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	68b9      	ldr	r1, [r7, #8]
 80072d4:	4618      	mov	r0, r3
 80072d6:	f000 fc61 	bl	8007b9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80072da:	6978      	ldr	r0, [r7, #20]
 80072dc:	f7ff ff26 	bl	800712c <prvUnlockQueue>
	}
 80072e0:	bf00      	nop
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08e      	sub	sp, #56	; 0x38
 80072ec:	af04      	add	r7, sp, #16
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	607a      	str	r2, [r7, #4]
 80072f4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d10a      	bne.n	8007312 <xTaskCreateStatic+0x2a>
	__asm volatile
 80072fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007300:	f383 8811 	msr	BASEPRI, r3
 8007304:	f3bf 8f6f 	isb	sy
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	623b      	str	r3, [r7, #32]
}
 800730e:	bf00      	nop
 8007310:	e7fe      	b.n	8007310 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <xTaskCreateStatic+0x46>
	__asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	61fb      	str	r3, [r7, #28]
}
 800732a:	bf00      	nop
 800732c:	e7fe      	b.n	800732c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800732e:	23a8      	movs	r3, #168	; 0xa8
 8007330:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2ba8      	cmp	r3, #168	; 0xa8
 8007336:	d00a      	beq.n	800734e <xTaskCreateStatic+0x66>
	__asm volatile
 8007338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	61bb      	str	r3, [r7, #24]
}
 800734a:	bf00      	nop
 800734c:	e7fe      	b.n	800734c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800734e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	2b00      	cmp	r3, #0
 8007354:	d01e      	beq.n	8007394 <xTaskCreateStatic+0xac>
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01b      	beq.n	8007394 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800735c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007364:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	2202      	movs	r2, #2
 800736a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800736e:	2300      	movs	r3, #0
 8007370:	9303      	str	r3, [sp, #12]
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	9302      	str	r3, [sp, #8]
 8007376:	f107 0314 	add.w	r3, r7, #20
 800737a:	9301      	str	r3, [sp, #4]
 800737c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f000 f850 	bl	800742c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800738c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800738e:	f000 f8f3 	bl	8007578 <prvAddNewTaskToReadyList>
 8007392:	e001      	b.n	8007398 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007398:	697b      	ldr	r3, [r7, #20]
	}
 800739a:	4618      	mov	r0, r3
 800739c:	3728      	adds	r7, #40	; 0x28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073a2:	b580      	push	{r7, lr}
 80073a4:	b08c      	sub	sp, #48	; 0x30
 80073a6:	af04      	add	r7, sp, #16
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	4613      	mov	r3, r2
 80073b0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 fc5e 	bl	8008c78 <pvPortMalloc>
 80073bc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00e      	beq.n	80073e2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073c4:	20a8      	movs	r0, #168	; 0xa8
 80073c6:	f001 fc57 	bl	8008c78 <pvPortMalloc>
 80073ca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	697a      	ldr	r2, [r7, #20]
 80073d6:	631a      	str	r2, [r3, #48]	; 0x30
 80073d8:	e005      	b.n	80073e6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073da:	6978      	ldr	r0, [r7, #20]
 80073dc:	f001 fd18 	bl	8008e10 <vPortFree>
 80073e0:	e001      	b.n	80073e6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d017      	beq.n	800741c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073f4:	88fa      	ldrh	r2, [r7, #6]
 80073f6:	2300      	movs	r3, #0
 80073f8:	9303      	str	r3, [sp, #12]
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	9302      	str	r3, [sp, #8]
 80073fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68b9      	ldr	r1, [r7, #8]
 800740a:	68f8      	ldr	r0, [r7, #12]
 800740c:	f000 f80e 	bl	800742c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007410:	69f8      	ldr	r0, [r7, #28]
 8007412:	f000 f8b1 	bl	8007578 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007416:	2301      	movs	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
 800741a:	e002      	b.n	8007422 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800741c:	f04f 33ff 	mov.w	r3, #4294967295
 8007420:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007422:	69bb      	ldr	r3, [r7, #24]
	}
 8007424:	4618      	mov	r0, r3
 8007426:	3720      	adds	r7, #32
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b088      	sub	sp, #32
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	461a      	mov	r2, r3
 8007444:	21a5      	movs	r1, #165	; 0xa5
 8007446:	f001 fe01 	bl	800904c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007454:	3b01      	subs	r3, #1
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	4413      	add	r3, r2
 800745a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f023 0307 	bic.w	r3, r3, #7
 8007462:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	f003 0307 	and.w	r3, r3, #7
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00a      	beq.n	8007484 <prvInitialiseNewTask+0x58>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	617b      	str	r3, [r7, #20]
}
 8007480:	bf00      	nop
 8007482:	e7fe      	b.n	8007482 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01f      	beq.n	80074ca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800748a:	2300      	movs	r3, #0
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	e012      	b.n	80074b6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007490:	68ba      	ldr	r2, [r7, #8]
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	4413      	add	r3, r2
 8007496:	7819      	ldrb	r1, [r3, #0]
 8007498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	4413      	add	r3, r2
 800749e:	3334      	adds	r3, #52	; 0x34
 80074a0:	460a      	mov	r2, r1
 80074a2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	781b      	ldrb	r3, [r3, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d006      	beq.n	80074be <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	3301      	adds	r3, #1
 80074b4:	61fb      	str	r3, [r7, #28]
 80074b6:	69fb      	ldr	r3, [r7, #28]
 80074b8:	2b0f      	cmp	r3, #15
 80074ba:	d9e9      	bls.n	8007490 <prvInitialiseNewTask+0x64>
 80074bc:	e000      	b.n	80074c0 <prvInitialiseNewTask+0x94>
			{
				break;
 80074be:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074c8:	e003      	b.n	80074d2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074cc:	2200      	movs	r2, #0
 80074ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d4:	2b37      	cmp	r3, #55	; 0x37
 80074d6:	d901      	bls.n	80074dc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074d8:	2337      	movs	r3, #55	; 0x37
 80074da:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074e6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	2200      	movs	r2, #0
 80074ec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	3304      	adds	r3, #4
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff f978 	bl	80067e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	3318      	adds	r3, #24
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7ff f973 	bl	80067e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007506:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007516:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751a:	2200      	movs	r2, #0
 800751c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	2200      	movs	r2, #0
 8007524:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	3354      	adds	r3, #84	; 0x54
 800752c:	224c      	movs	r2, #76	; 0x4c
 800752e:	2100      	movs	r1, #0
 8007530:	4618      	mov	r0, r3
 8007532:	f001 fd8b 	bl	800904c <memset>
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	4a0c      	ldr	r2, [pc, #48]	; (800756c <prvInitialiseNewTask+0x140>)
 800753a:	659a      	str	r2, [r3, #88]	; 0x58
 800753c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753e:	4a0c      	ldr	r2, [pc, #48]	; (8007570 <prvInitialiseNewTask+0x144>)
 8007540:	65da      	str	r2, [r3, #92]	; 0x5c
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	4a0b      	ldr	r2, [pc, #44]	; (8007574 <prvInitialiseNewTask+0x148>)
 8007546:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	68f9      	ldr	r1, [r7, #12]
 800754c:	69b8      	ldr	r0, [r7, #24]
 800754e:	f001 f941 	bl	80087d4 <pxPortInitialiseStack>
 8007552:	4602      	mov	r2, r0
 8007554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007556:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007562:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007564:	bf00      	nop
 8007566:	3720      	adds	r7, #32
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	200053d4 	.word	0x200053d4
 8007570:	2000543c 	.word	0x2000543c
 8007574:	200054a4 	.word	0x200054a4

08007578 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b082      	sub	sp, #8
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007580:	f001 fa58 	bl	8008a34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007584:	4b2d      	ldr	r3, [pc, #180]	; (800763c <prvAddNewTaskToReadyList+0xc4>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3301      	adds	r3, #1
 800758a:	4a2c      	ldr	r2, [pc, #176]	; (800763c <prvAddNewTaskToReadyList+0xc4>)
 800758c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800758e:	4b2c      	ldr	r3, [pc, #176]	; (8007640 <prvAddNewTaskToReadyList+0xc8>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007596:	4a2a      	ldr	r2, [pc, #168]	; (8007640 <prvAddNewTaskToReadyList+0xc8>)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800759c:	4b27      	ldr	r3, [pc, #156]	; (800763c <prvAddNewTaskToReadyList+0xc4>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d110      	bne.n	80075c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80075a4:	f000 fc26 	bl	8007df4 <prvInitialiseTaskLists>
 80075a8:	e00d      	b.n	80075c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80075aa:	4b26      	ldr	r3, [pc, #152]	; (8007644 <prvAddNewTaskToReadyList+0xcc>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d109      	bne.n	80075c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80075b2:	4b23      	ldr	r3, [pc, #140]	; (8007640 <prvAddNewTaskToReadyList+0xc8>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075bc:	429a      	cmp	r2, r3
 80075be:	d802      	bhi.n	80075c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80075c0:	4a1f      	ldr	r2, [pc, #124]	; (8007640 <prvAddNewTaskToReadyList+0xc8>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80075c6:	4b20      	ldr	r3, [pc, #128]	; (8007648 <prvAddNewTaskToReadyList+0xd0>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	3301      	adds	r3, #1
 80075cc:	4a1e      	ldr	r2, [pc, #120]	; (8007648 <prvAddNewTaskToReadyList+0xd0>)
 80075ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80075d0:	4b1d      	ldr	r3, [pc, #116]	; (8007648 <prvAddNewTaskToReadyList+0xd0>)
 80075d2:	681a      	ldr	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075dc:	4b1b      	ldr	r3, [pc, #108]	; (800764c <prvAddNewTaskToReadyList+0xd4>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d903      	bls.n	80075ec <prvAddNewTaskToReadyList+0x74>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e8:	4a18      	ldr	r2, [pc, #96]	; (800764c <prvAddNewTaskToReadyList+0xd4>)
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f0:	4613      	mov	r3, r2
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	4413      	add	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4a15      	ldr	r2, [pc, #84]	; (8007650 <prvAddNewTaskToReadyList+0xd8>)
 80075fa:	441a      	add	r2, r3
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	f7ff f8fd 	bl	8006802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007608:	f001 fa44 	bl	8008a94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800760c:	4b0d      	ldr	r3, [pc, #52]	; (8007644 <prvAddNewTaskToReadyList+0xcc>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00e      	beq.n	8007632 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007614:	4b0a      	ldr	r3, [pc, #40]	; (8007640 <prvAddNewTaskToReadyList+0xc8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761e:	429a      	cmp	r2, r3
 8007620:	d207      	bcs.n	8007632 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007622:	4b0c      	ldr	r3, [pc, #48]	; (8007654 <prvAddNewTaskToReadyList+0xdc>)
 8007624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007632:	bf00      	nop
 8007634:	3708      	adds	r7, #8
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20001654 	.word	0x20001654
 8007640:	20001180 	.word	0x20001180
 8007644:	20001660 	.word	0x20001660
 8007648:	20001670 	.word	0x20001670
 800764c:	2000165c 	.word	0x2000165c
 8007650:	20001184 	.word	0x20001184
 8007654:	e000ed04 	.word	0xe000ed04

08007658 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007660:	2300      	movs	r3, #0
 8007662:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d017      	beq.n	800769a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800766a:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <vTaskDelay+0x60>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <vTaskDelay+0x30>
	__asm volatile
 8007672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007676:	f383 8811 	msr	BASEPRI, r3
 800767a:	f3bf 8f6f 	isb	sy
 800767e:	f3bf 8f4f 	dsb	sy
 8007682:	60bb      	str	r3, [r7, #8]
}
 8007684:	bf00      	nop
 8007686:	e7fe      	b.n	8007686 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007688:	f000 f88a 	bl	80077a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800768c:	2100      	movs	r1, #0
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fcfe 	bl	8008090 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007694:	f000 f892 	bl	80077bc <xTaskResumeAll>
 8007698:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d107      	bne.n	80076b0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80076a0:	4b06      	ldr	r3, [pc, #24]	; (80076bc <vTaskDelay+0x64>)
 80076a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a6:	601a      	str	r2, [r3, #0]
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	2000167c 	.word	0x2000167c
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b08a      	sub	sp, #40	; 0x28
 80076c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80076c6:	2300      	movs	r3, #0
 80076c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80076ce:	463a      	mov	r2, r7
 80076d0:	1d39      	adds	r1, r7, #4
 80076d2:	f107 0308 	add.w	r3, r7, #8
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7ff f832 	bl	8006740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80076dc:	6839      	ldr	r1, [r7, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	9202      	str	r2, [sp, #8]
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	2300      	movs	r3, #0
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	2300      	movs	r3, #0
 80076ec:	460a      	mov	r2, r1
 80076ee:	4924      	ldr	r1, [pc, #144]	; (8007780 <vTaskStartScheduler+0xc0>)
 80076f0:	4824      	ldr	r0, [pc, #144]	; (8007784 <vTaskStartScheduler+0xc4>)
 80076f2:	f7ff fdf9 	bl	80072e8 <xTaskCreateStatic>
 80076f6:	4603      	mov	r3, r0
 80076f8:	4a23      	ldr	r2, [pc, #140]	; (8007788 <vTaskStartScheduler+0xc8>)
 80076fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80076fc:	4b22      	ldr	r3, [pc, #136]	; (8007788 <vTaskStartScheduler+0xc8>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d002      	beq.n	800770a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007704:	2301      	movs	r3, #1
 8007706:	617b      	str	r3, [r7, #20]
 8007708:	e001      	b.n	800770e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d102      	bne.n	800771a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007714:	f000 fd10 	bl	8008138 <xTimerCreateTimerTask>
 8007718:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	2b01      	cmp	r3, #1
 800771e:	d11b      	bne.n	8007758 <vTaskStartScheduler+0x98>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	613b      	str	r3, [r7, #16]
}
 8007732:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007734:	4b15      	ldr	r3, [pc, #84]	; (800778c <vTaskStartScheduler+0xcc>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	3354      	adds	r3, #84	; 0x54
 800773a:	4a15      	ldr	r2, [pc, #84]	; (8007790 <vTaskStartScheduler+0xd0>)
 800773c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800773e:	4b15      	ldr	r3, [pc, #84]	; (8007794 <vTaskStartScheduler+0xd4>)
 8007740:	f04f 32ff 	mov.w	r2, #4294967295
 8007744:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007746:	4b14      	ldr	r3, [pc, #80]	; (8007798 <vTaskStartScheduler+0xd8>)
 8007748:	2201      	movs	r2, #1
 800774a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800774c:	4b13      	ldr	r3, [pc, #76]	; (800779c <vTaskStartScheduler+0xdc>)
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007752:	f001 f8cd 	bl	80088f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007756:	e00e      	b.n	8007776 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775e:	d10a      	bne.n	8007776 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60fb      	str	r3, [r7, #12]
}
 8007772:	bf00      	nop
 8007774:	e7fe      	b.n	8007774 <vTaskStartScheduler+0xb4>
}
 8007776:	bf00      	nop
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	080092ec 	.word	0x080092ec
 8007784:	08007dc5 	.word	0x08007dc5
 8007788:	20001678 	.word	0x20001678
 800778c:	20001180 	.word	0x20001180
 8007790:	200000e4 	.word	0x200000e4
 8007794:	20001674 	.word	0x20001674
 8007798:	20001660 	.word	0x20001660
 800779c:	20001658 	.word	0x20001658

080077a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80077a0:	b480      	push	{r7}
 80077a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80077a4:	4b04      	ldr	r3, [pc, #16]	; (80077b8 <vTaskSuspendAll+0x18>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	3301      	adds	r3, #1
 80077aa:	4a03      	ldr	r2, [pc, #12]	; (80077b8 <vTaskSuspendAll+0x18>)
 80077ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80077ae:	bf00      	nop
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	2000167c 	.word	0x2000167c

080077bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80077ca:	4b42      	ldr	r3, [pc, #264]	; (80078d4 <xTaskResumeAll+0x118>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10a      	bne.n	80077e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	603b      	str	r3, [r7, #0]
}
 80077e4:	bf00      	nop
 80077e6:	e7fe      	b.n	80077e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80077e8:	f001 f924 	bl	8008a34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80077ec:	4b39      	ldr	r3, [pc, #228]	; (80078d4 <xTaskResumeAll+0x118>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3b01      	subs	r3, #1
 80077f2:	4a38      	ldr	r2, [pc, #224]	; (80078d4 <xTaskResumeAll+0x118>)
 80077f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077f6:	4b37      	ldr	r3, [pc, #220]	; (80078d4 <xTaskResumeAll+0x118>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d162      	bne.n	80078c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80077fe:	4b36      	ldr	r3, [pc, #216]	; (80078d8 <xTaskResumeAll+0x11c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	d05e      	beq.n	80078c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007806:	e02f      	b.n	8007868 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007808:	4b34      	ldr	r3, [pc, #208]	; (80078dc <xTaskResumeAll+0x120>)
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	3318      	adds	r3, #24
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff f851 	bl	80068bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	3304      	adds	r3, #4
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff f84c 	bl	80068bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	4b2d      	ldr	r3, [pc, #180]	; (80078e0 <xTaskResumeAll+0x124>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	429a      	cmp	r2, r3
 800782e:	d903      	bls.n	8007838 <xTaskResumeAll+0x7c>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	4a2a      	ldr	r2, [pc, #168]	; (80078e0 <xTaskResumeAll+0x124>)
 8007836:	6013      	str	r3, [r2, #0]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4a27      	ldr	r2, [pc, #156]	; (80078e4 <xTaskResumeAll+0x128>)
 8007846:	441a      	add	r2, r3
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3304      	adds	r3, #4
 800784c:	4619      	mov	r1, r3
 800784e:	4610      	mov	r0, r2
 8007850:	f7fe ffd7 	bl	8006802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007858:	4b23      	ldr	r3, [pc, #140]	; (80078e8 <xTaskResumeAll+0x12c>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	429a      	cmp	r2, r3
 8007860:	d302      	bcc.n	8007868 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007862:	4b22      	ldr	r3, [pc, #136]	; (80078ec <xTaskResumeAll+0x130>)
 8007864:	2201      	movs	r2, #1
 8007866:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007868:	4b1c      	ldr	r3, [pc, #112]	; (80078dc <xTaskResumeAll+0x120>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1cb      	bne.n	8007808 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007876:	f000 fb5f 	bl	8007f38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800787a:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <xTaskResumeAll+0x134>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d010      	beq.n	80078a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007886:	f000 f847 	bl	8007918 <xTaskIncrementTick>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d002      	beq.n	8007896 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007890:	4b16      	ldr	r3, [pc, #88]	; (80078ec <xTaskResumeAll+0x130>)
 8007892:	2201      	movs	r2, #1
 8007894:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3b01      	subs	r3, #1
 800789a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d1f1      	bne.n	8007886 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80078a2:	4b13      	ldr	r3, [pc, #76]	; (80078f0 <xTaskResumeAll+0x134>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80078a8:	4b10      	ldr	r3, [pc, #64]	; (80078ec <xTaskResumeAll+0x130>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d009      	beq.n	80078c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80078b0:	2301      	movs	r3, #1
 80078b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80078b4:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <xTaskResumeAll+0x138>)
 80078b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ba:	601a      	str	r2, [r3, #0]
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078c4:	f001 f8e6 	bl	8008a94 <vPortExitCritical>

	return xAlreadyYielded;
 80078c8:	68bb      	ldr	r3, [r7, #8]
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	2000167c 	.word	0x2000167c
 80078d8:	20001654 	.word	0x20001654
 80078dc:	20001614 	.word	0x20001614
 80078e0:	2000165c 	.word	0x2000165c
 80078e4:	20001184 	.word	0x20001184
 80078e8:	20001180 	.word	0x20001180
 80078ec:	20001668 	.word	0x20001668
 80078f0:	20001664 	.word	0x20001664
 80078f4:	e000ed04 	.word	0xe000ed04

080078f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80078fe:	4b05      	ldr	r3, [pc, #20]	; (8007914 <xTaskGetTickCount+0x1c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007904:	687b      	ldr	r3, [r7, #4]
}
 8007906:	4618      	mov	r0, r3
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	20001658 	.word	0x20001658

08007918 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b086      	sub	sp, #24
 800791c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007922:	4b4f      	ldr	r3, [pc, #316]	; (8007a60 <xTaskIncrementTick+0x148>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f040 808f 	bne.w	8007a4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800792c:	4b4d      	ldr	r3, [pc, #308]	; (8007a64 <xTaskIncrementTick+0x14c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	3301      	adds	r3, #1
 8007932:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007934:	4a4b      	ldr	r2, [pc, #300]	; (8007a64 <xTaskIncrementTick+0x14c>)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d120      	bne.n	8007982 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007940:	4b49      	ldr	r3, [pc, #292]	; (8007a68 <xTaskIncrementTick+0x150>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <xTaskIncrementTick+0x48>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	603b      	str	r3, [r7, #0]
}
 800795c:	bf00      	nop
 800795e:	e7fe      	b.n	800795e <xTaskIncrementTick+0x46>
 8007960:	4b41      	ldr	r3, [pc, #260]	; (8007a68 <xTaskIncrementTick+0x150>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	4b41      	ldr	r3, [pc, #260]	; (8007a6c <xTaskIncrementTick+0x154>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a3f      	ldr	r2, [pc, #252]	; (8007a68 <xTaskIncrementTick+0x150>)
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	4a3f      	ldr	r2, [pc, #252]	; (8007a6c <xTaskIncrementTick+0x154>)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6013      	str	r3, [r2, #0]
 8007974:	4b3e      	ldr	r3, [pc, #248]	; (8007a70 <xTaskIncrementTick+0x158>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	3301      	adds	r3, #1
 800797a:	4a3d      	ldr	r2, [pc, #244]	; (8007a70 <xTaskIncrementTick+0x158>)
 800797c:	6013      	str	r3, [r2, #0]
 800797e:	f000 fadb 	bl	8007f38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007982:	4b3c      	ldr	r3, [pc, #240]	; (8007a74 <xTaskIncrementTick+0x15c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	693a      	ldr	r2, [r7, #16]
 8007988:	429a      	cmp	r2, r3
 800798a:	d349      	bcc.n	8007a20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800798c:	4b36      	ldr	r3, [pc, #216]	; (8007a68 <xTaskIncrementTick+0x150>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d104      	bne.n	80079a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007996:	4b37      	ldr	r3, [pc, #220]	; (8007a74 <xTaskIncrementTick+0x15c>)
 8007998:	f04f 32ff 	mov.w	r2, #4294967295
 800799c:	601a      	str	r2, [r3, #0]
					break;
 800799e:	e03f      	b.n	8007a20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079a0:	4b31      	ldr	r3, [pc, #196]	; (8007a68 <xTaskIncrementTick+0x150>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80079aa:	68bb      	ldr	r3, [r7, #8]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80079b0:	693a      	ldr	r2, [r7, #16]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d203      	bcs.n	80079c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80079b8:	4a2e      	ldr	r2, [pc, #184]	; (8007a74 <xTaskIncrementTick+0x15c>)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80079be:	e02f      	b.n	8007a20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	3304      	adds	r3, #4
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe ff79 	bl	80068bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d004      	beq.n	80079dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	3318      	adds	r3, #24
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7fe ff70 	bl	80068bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e0:	4b25      	ldr	r3, [pc, #148]	; (8007a78 <xTaskIncrementTick+0x160>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d903      	bls.n	80079f0 <xTaskIncrementTick+0xd8>
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ec:	4a22      	ldr	r2, [pc, #136]	; (8007a78 <xTaskIncrementTick+0x160>)
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079f4:	4613      	mov	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4a1f      	ldr	r2, [pc, #124]	; (8007a7c <xTaskIncrementTick+0x164>)
 80079fe:	441a      	add	r2, r3
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4619      	mov	r1, r3
 8007a06:	4610      	mov	r0, r2
 8007a08:	f7fe fefb 	bl	8006802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a10:	4b1b      	ldr	r3, [pc, #108]	; (8007a80 <xTaskIncrementTick+0x168>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d3b8      	bcc.n	800798c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a1e:	e7b5      	b.n	800798c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a20:	4b17      	ldr	r3, [pc, #92]	; (8007a80 <xTaskIncrementTick+0x168>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a26:	4915      	ldr	r1, [pc, #84]	; (8007a7c <xTaskIncrementTick+0x164>)
 8007a28:	4613      	mov	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	440b      	add	r3, r1
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d901      	bls.n	8007a3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007a3c:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <xTaskIncrementTick+0x16c>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	e004      	b.n	8007a54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	; (8007a88 <xTaskIncrementTick+0x170>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	4a0d      	ldr	r2, [pc, #52]	; (8007a88 <xTaskIncrementTick+0x170>)
 8007a52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007a54:	697b      	ldr	r3, [r7, #20]
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3718      	adds	r7, #24
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}
 8007a5e:	bf00      	nop
 8007a60:	2000167c 	.word	0x2000167c
 8007a64:	20001658 	.word	0x20001658
 8007a68:	2000160c 	.word	0x2000160c
 8007a6c:	20001610 	.word	0x20001610
 8007a70:	2000166c 	.word	0x2000166c
 8007a74:	20001674 	.word	0x20001674
 8007a78:	2000165c 	.word	0x2000165c
 8007a7c:	20001184 	.word	0x20001184
 8007a80:	20001180 	.word	0x20001180
 8007a84:	20001668 	.word	0x20001668
 8007a88:	20001664 	.word	0x20001664

08007a8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b085      	sub	sp, #20
 8007a90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007a92:	4b2a      	ldr	r3, [pc, #168]	; (8007b3c <vTaskSwitchContext+0xb0>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d003      	beq.n	8007aa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007a9a:	4b29      	ldr	r3, [pc, #164]	; (8007b40 <vTaskSwitchContext+0xb4>)
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007aa0:	e046      	b.n	8007b30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007aa2:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <vTaskSwitchContext+0xb4>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aa8:	4b26      	ldr	r3, [pc, #152]	; (8007b44 <vTaskSwitchContext+0xb8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	60fb      	str	r3, [r7, #12]
 8007aae:	e010      	b.n	8007ad2 <vTaskSwitchContext+0x46>
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10a      	bne.n	8007acc <vTaskSwitchContext+0x40>
	__asm volatile
 8007ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aba:	f383 8811 	msr	BASEPRI, r3
 8007abe:	f3bf 8f6f 	isb	sy
 8007ac2:	f3bf 8f4f 	dsb	sy
 8007ac6:	607b      	str	r3, [r7, #4]
}
 8007ac8:	bf00      	nop
 8007aca:	e7fe      	b.n	8007aca <vTaskSwitchContext+0x3e>
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	60fb      	str	r3, [r7, #12]
 8007ad2:	491d      	ldr	r1, [pc, #116]	; (8007b48 <vTaskSwitchContext+0xbc>)
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4413      	add	r3, r2
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	440b      	add	r3, r1
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d0e4      	beq.n	8007ab0 <vTaskSwitchContext+0x24>
 8007ae6:	68fa      	ldr	r2, [r7, #12]
 8007ae8:	4613      	mov	r3, r2
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	4413      	add	r3, r2
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <vTaskSwitchContext+0xbc>)
 8007af2:	4413      	add	r3, r2
 8007af4:	60bb      	str	r3, [r7, #8]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	605a      	str	r2, [r3, #4]
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	685a      	ldr	r2, [r3, #4]
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	3308      	adds	r3, #8
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d104      	bne.n	8007b16 <vTaskSwitchContext+0x8a>
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	605a      	str	r2, [r3, #4]
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	4a0b      	ldr	r2, [pc, #44]	; (8007b4c <vTaskSwitchContext+0xc0>)
 8007b1e:	6013      	str	r3, [r2, #0]
 8007b20:	4a08      	ldr	r2, [pc, #32]	; (8007b44 <vTaskSwitchContext+0xb8>)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007b26:	4b09      	ldr	r3, [pc, #36]	; (8007b4c <vTaskSwitchContext+0xc0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3354      	adds	r3, #84	; 0x54
 8007b2c:	4a08      	ldr	r2, [pc, #32]	; (8007b50 <vTaskSwitchContext+0xc4>)
 8007b2e:	6013      	str	r3, [r2, #0]
}
 8007b30:	bf00      	nop
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr
 8007b3c:	2000167c 	.word	0x2000167c
 8007b40:	20001668 	.word	0x20001668
 8007b44:	2000165c 	.word	0x2000165c
 8007b48:	20001184 	.word	0x20001184
 8007b4c:	20001180 	.word	0x20001180
 8007b50:	200000e4 	.word	0x200000e4

08007b54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d10a      	bne.n	8007b7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	60fb      	str	r3, [r7, #12]
}
 8007b76:	bf00      	nop
 8007b78:	e7fe      	b.n	8007b78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007b7a:	4b07      	ldr	r3, [pc, #28]	; (8007b98 <vTaskPlaceOnEventList+0x44>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	3318      	adds	r3, #24
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7fe fe61 	bl	800684a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b88:	2101      	movs	r1, #1
 8007b8a:	6838      	ldr	r0, [r7, #0]
 8007b8c:	f000 fa80 	bl	8008090 <prvAddCurrentTaskToDelayedList>
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	20001180 	.word	0x20001180

08007b9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10a      	bne.n	8007bc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb2:	f383 8811 	msr	BASEPRI, r3
 8007bb6:	f3bf 8f6f 	isb	sy
 8007bba:	f3bf 8f4f 	dsb	sy
 8007bbe:	617b      	str	r3, [r7, #20]
}
 8007bc0:	bf00      	nop
 8007bc2:	e7fe      	b.n	8007bc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bc4:	4b0a      	ldr	r3, [pc, #40]	; (8007bf0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3318      	adds	r3, #24
 8007bca:	4619      	mov	r1, r3
 8007bcc:	68f8      	ldr	r0, [r7, #12]
 8007bce:	f7fe fe18 	bl	8006802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007bde:	6879      	ldr	r1, [r7, #4]
 8007be0:	68b8      	ldr	r0, [r7, #8]
 8007be2:	f000 fa55 	bl	8008090 <prvAddCurrentTaskToDelayedList>
	}
 8007be6:	bf00      	nop
 8007be8:	3718      	adds	r7, #24
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20001180 	.word	0x20001180

08007bf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10a      	bne.n	8007c20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	60fb      	str	r3, [r7, #12]
}
 8007c1c:	bf00      	nop
 8007c1e:	e7fe      	b.n	8007c1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	3318      	adds	r3, #24
 8007c24:	4618      	mov	r0, r3
 8007c26:	f7fe fe49 	bl	80068bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <xTaskRemoveFromEventList+0xb0>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d11d      	bne.n	8007c6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c32:	693b      	ldr	r3, [r7, #16]
 8007c34:	3304      	adds	r3, #4
 8007c36:	4618      	mov	r0, r3
 8007c38:	f7fe fe40 	bl	80068bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c40:	4b19      	ldr	r3, [pc, #100]	; (8007ca8 <xTaskRemoveFromEventList+0xb4>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d903      	bls.n	8007c50 <xTaskRemoveFromEventList+0x5c>
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4c:	4a16      	ldr	r2, [pc, #88]	; (8007ca8 <xTaskRemoveFromEventList+0xb4>)
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c54:	4613      	mov	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4a13      	ldr	r2, [pc, #76]	; (8007cac <xTaskRemoveFromEventList+0xb8>)
 8007c5e:	441a      	add	r2, r3
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	3304      	adds	r3, #4
 8007c64:	4619      	mov	r1, r3
 8007c66:	4610      	mov	r0, r2
 8007c68:	f7fe fdcb 	bl	8006802 <vListInsertEnd>
 8007c6c:	e005      	b.n	8007c7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	3318      	adds	r3, #24
 8007c72:	4619      	mov	r1, r3
 8007c74:	480e      	ldr	r0, [pc, #56]	; (8007cb0 <xTaskRemoveFromEventList+0xbc>)
 8007c76:	f7fe fdc4 	bl	8006802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c7e:	4b0d      	ldr	r3, [pc, #52]	; (8007cb4 <xTaskRemoveFromEventList+0xc0>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d905      	bls.n	8007c94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007c8c:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <xTaskRemoveFromEventList+0xc4>)
 8007c8e:	2201      	movs	r2, #1
 8007c90:	601a      	str	r2, [r3, #0]
 8007c92:	e001      	b.n	8007c98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007c98:	697b      	ldr	r3, [r7, #20]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	2000167c 	.word	0x2000167c
 8007ca8:	2000165c 	.word	0x2000165c
 8007cac:	20001184 	.word	0x20001184
 8007cb0:	20001614 	.word	0x20001614
 8007cb4:	20001180 	.word	0x20001180
 8007cb8:	20001668 	.word	0x20001668

08007cbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b083      	sub	sp, #12
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cc4:	4b06      	ldr	r3, [pc, #24]	; (8007ce0 <vTaskInternalSetTimeOutState+0x24>)
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <vTaskInternalSetTimeOutState+0x28>)
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	605a      	str	r2, [r3, #4]
}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr
 8007ce0:	2000166c 	.word	0x2000166c
 8007ce4:	20001658 	.word	0x20001658

08007ce8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b088      	sub	sp, #32
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d10a      	bne.n	8007d0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfc:	f383 8811 	msr	BASEPRI, r3
 8007d00:	f3bf 8f6f 	isb	sy
 8007d04:	f3bf 8f4f 	dsb	sy
 8007d08:	613b      	str	r3, [r7, #16]
}
 8007d0a:	bf00      	nop
 8007d0c:	e7fe      	b.n	8007d0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d10a      	bne.n	8007d2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	60fb      	str	r3, [r7, #12]
}
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007d2a:	f000 fe83 	bl	8008a34 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d2e:	4b1d      	ldr	r3, [pc, #116]	; (8007da4 <xTaskCheckForTimeOut+0xbc>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	69ba      	ldr	r2, [r7, #24]
 8007d3a:	1ad3      	subs	r3, r2, r3
 8007d3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d46:	d102      	bne.n	8007d4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61fb      	str	r3, [r7, #28]
 8007d4c:	e023      	b.n	8007d96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681a      	ldr	r2, [r3, #0]
 8007d52:	4b15      	ldr	r3, [pc, #84]	; (8007da8 <xTaskCheckForTimeOut+0xc0>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d007      	beq.n	8007d6a <xTaskCheckForTimeOut+0x82>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d302      	bcc.n	8007d6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d64:	2301      	movs	r3, #1
 8007d66:	61fb      	str	r3, [r7, #28]
 8007d68:	e015      	b.n	8007d96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d6a:	683b      	ldr	r3, [r7, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d20b      	bcs.n	8007d8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	681a      	ldr	r2, [r3, #0]
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	1ad2      	subs	r2, r2, r3
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7ff ff9b 	bl	8007cbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d86:	2300      	movs	r3, #0
 8007d88:	61fb      	str	r3, [r7, #28]
 8007d8a:	e004      	b.n	8007d96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007d92:	2301      	movs	r3, #1
 8007d94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007d96:	f000 fe7d 	bl	8008a94 <vPortExitCritical>

	return xReturn;
 8007d9a:	69fb      	ldr	r3, [r7, #28]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3720      	adds	r7, #32
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	20001658 	.word	0x20001658
 8007da8:	2000166c 	.word	0x2000166c

08007dac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007dac:	b480      	push	{r7}
 8007dae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007db0:	4b03      	ldr	r3, [pc, #12]	; (8007dc0 <vTaskMissedYield+0x14>)
 8007db2:	2201      	movs	r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
}
 8007db6:	bf00      	nop
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr
 8007dc0:	20001668 	.word	0x20001668

08007dc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007dcc:	f000 f852 	bl	8007e74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007dd0:	4b06      	ldr	r3, [pc, #24]	; (8007dec <prvIdleTask+0x28>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	d9f9      	bls.n	8007dcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007dd8:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <prvIdleTask+0x2c>)
 8007dda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dde:	601a      	str	r2, [r3, #0]
 8007de0:	f3bf 8f4f 	dsb	sy
 8007de4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007de8:	e7f0      	b.n	8007dcc <prvIdleTask+0x8>
 8007dea:	bf00      	nop
 8007dec:	20001184 	.word	0x20001184
 8007df0:	e000ed04 	.word	0xe000ed04

08007df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	e00c      	b.n	8007e1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	4613      	mov	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	4413      	add	r3, r2
 8007e08:	009b      	lsls	r3, r3, #2
 8007e0a:	4a12      	ldr	r2, [pc, #72]	; (8007e54 <prvInitialiseTaskLists+0x60>)
 8007e0c:	4413      	add	r3, r2
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe fcca 	bl	80067a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	3301      	adds	r3, #1
 8007e18:	607b      	str	r3, [r7, #4]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b37      	cmp	r3, #55	; 0x37
 8007e1e:	d9ef      	bls.n	8007e00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e20:	480d      	ldr	r0, [pc, #52]	; (8007e58 <prvInitialiseTaskLists+0x64>)
 8007e22:	f7fe fcc1 	bl	80067a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e26:	480d      	ldr	r0, [pc, #52]	; (8007e5c <prvInitialiseTaskLists+0x68>)
 8007e28:	f7fe fcbe 	bl	80067a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e2c:	480c      	ldr	r0, [pc, #48]	; (8007e60 <prvInitialiseTaskLists+0x6c>)
 8007e2e:	f7fe fcbb 	bl	80067a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e32:	480c      	ldr	r0, [pc, #48]	; (8007e64 <prvInitialiseTaskLists+0x70>)
 8007e34:	f7fe fcb8 	bl	80067a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e38:	480b      	ldr	r0, [pc, #44]	; (8007e68 <prvInitialiseTaskLists+0x74>)
 8007e3a:	f7fe fcb5 	bl	80067a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e3e:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <prvInitialiseTaskLists+0x78>)
 8007e40:	4a05      	ldr	r2, [pc, #20]	; (8007e58 <prvInitialiseTaskLists+0x64>)
 8007e42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e44:	4b0a      	ldr	r3, [pc, #40]	; (8007e70 <prvInitialiseTaskLists+0x7c>)
 8007e46:	4a05      	ldr	r2, [pc, #20]	; (8007e5c <prvInitialiseTaskLists+0x68>)
 8007e48:	601a      	str	r2, [r3, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	3708      	adds	r7, #8
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
 8007e52:	bf00      	nop
 8007e54:	20001184 	.word	0x20001184
 8007e58:	200015e4 	.word	0x200015e4
 8007e5c:	200015f8 	.word	0x200015f8
 8007e60:	20001614 	.word	0x20001614
 8007e64:	20001628 	.word	0x20001628
 8007e68:	20001640 	.word	0x20001640
 8007e6c:	2000160c 	.word	0x2000160c
 8007e70:	20001610 	.word	0x20001610

08007e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e7a:	e019      	b.n	8007eb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e7c:	f000 fdda 	bl	8008a34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e80:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <prvCheckTasksWaitingTermination+0x50>)
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fe fd15 	bl	80068bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007e92:	4b0d      	ldr	r3, [pc, #52]	; (8007ec8 <prvCheckTasksWaitingTermination+0x54>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	4a0b      	ldr	r2, [pc, #44]	; (8007ec8 <prvCheckTasksWaitingTermination+0x54>)
 8007e9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007e9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	4a0a      	ldr	r2, [pc, #40]	; (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007ea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ea6:	f000 fdf5 	bl	8008a94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f810 	bl	8007ed0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eb0:	4b06      	ldr	r3, [pc, #24]	; (8007ecc <prvCheckTasksWaitingTermination+0x58>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e1      	bne.n	8007e7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop
 8007ebc:	3708      	adds	r7, #8
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	20001628 	.word	0x20001628
 8007ec8:	20001654 	.word	0x20001654
 8007ecc:	2000163c 	.word	0x2000163c

08007ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b084      	sub	sp, #16
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	3354      	adds	r3, #84	; 0x54
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 f8bd 	bl	800905c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d108      	bne.n	8007efe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 ff8d 	bl	8008e10 <vPortFree>
				vPortFree( pxTCB );
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 ff8a 	bl	8008e10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007efc:	e018      	b.n	8007f30 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d103      	bne.n	8007f10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f000 ff81 	bl	8008e10 <vPortFree>
	}
 8007f0e:	e00f      	b.n	8007f30 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007f16:	2b02      	cmp	r3, #2
 8007f18:	d00a      	beq.n	8007f30 <prvDeleteTCB+0x60>
	__asm volatile
 8007f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1e:	f383 8811 	msr	BASEPRI, r3
 8007f22:	f3bf 8f6f 	isb	sy
 8007f26:	f3bf 8f4f 	dsb	sy
 8007f2a:	60fb      	str	r3, [r7, #12]
}
 8007f2c:	bf00      	nop
 8007f2e:	e7fe      	b.n	8007f2e <prvDeleteTCB+0x5e>
	}
 8007f30:	bf00      	nop
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f3e:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <prvResetNextTaskUnblockTime+0x38>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d104      	bne.n	8007f52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f48:	4b0a      	ldr	r3, [pc, #40]	; (8007f74 <prvResetNextTaskUnblockTime+0x3c>)
 8007f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f50:	e008      	b.n	8007f64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f52:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <prvResetNextTaskUnblockTime+0x38>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	4a04      	ldr	r2, [pc, #16]	; (8007f74 <prvResetNextTaskUnblockTime+0x3c>)
 8007f62:	6013      	str	r3, [r2, #0]
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	2000160c 	.word	0x2000160c
 8007f74:	20001674 	.word	0x20001674

08007f78 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f7e:	4b0b      	ldr	r3, [pc, #44]	; (8007fac <xTaskGetSchedulerState+0x34>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f86:	2301      	movs	r3, #1
 8007f88:	607b      	str	r3, [r7, #4]
 8007f8a:	e008      	b.n	8007f9e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f8c:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <xTaskGetSchedulerState+0x38>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d102      	bne.n	8007f9a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007f94:	2302      	movs	r3, #2
 8007f96:	607b      	str	r3, [r7, #4]
 8007f98:	e001      	b.n	8007f9e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007f9e:	687b      	ldr	r3, [r7, #4]
	}
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	370c      	adds	r7, #12
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007faa:	4770      	bx	lr
 8007fac:	20001660 	.word	0x20001660
 8007fb0:	2000167c 	.word	0x2000167c

08007fb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d056      	beq.n	8008078 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fca:	4b2e      	ldr	r3, [pc, #184]	; (8008084 <xTaskPriorityDisinherit+0xd0>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	693a      	ldr	r2, [r7, #16]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d00a      	beq.n	8007fea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	60fb      	str	r3, [r7, #12]
}
 8007fe6:	bf00      	nop
 8007fe8:	e7fe      	b.n	8007fe8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10a      	bne.n	8008008 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	60bb      	str	r3, [r7, #8]
}
 8008004:	bf00      	nop
 8008006:	e7fe      	b.n	8008006 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800800c:	1e5a      	subs	r2, r3, #1
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800801a:	429a      	cmp	r2, r3
 800801c:	d02c      	beq.n	8008078 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008022:	2b00      	cmp	r3, #0
 8008024:	d128      	bne.n	8008078 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	3304      	adds	r3, #4
 800802a:	4618      	mov	r0, r3
 800802c:	f7fe fc46 	bl	80068bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008048:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <xTaskPriorityDisinherit+0xd4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	429a      	cmp	r2, r3
 800804e:	d903      	bls.n	8008058 <xTaskPriorityDisinherit+0xa4>
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008054:	4a0c      	ldr	r2, [pc, #48]	; (8008088 <xTaskPriorityDisinherit+0xd4>)
 8008056:	6013      	str	r3, [r2, #0]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800805c:	4613      	mov	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4a09      	ldr	r2, [pc, #36]	; (800808c <xTaskPriorityDisinherit+0xd8>)
 8008066:	441a      	add	r2, r3
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	3304      	adds	r3, #4
 800806c:	4619      	mov	r1, r3
 800806e:	4610      	mov	r0, r2
 8008070:	f7fe fbc7 	bl	8006802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008074:	2301      	movs	r3, #1
 8008076:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008078:	697b      	ldr	r3, [r7, #20]
	}
 800807a:	4618      	mov	r0, r3
 800807c:	3718      	adds	r7, #24
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20001180 	.word	0x20001180
 8008088:	2000165c 	.word	0x2000165c
 800808c:	20001184 	.word	0x20001184

08008090 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800809a:	4b21      	ldr	r3, [pc, #132]	; (8008120 <prvAddCurrentTaskToDelayedList+0x90>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080a0:	4b20      	ldr	r3, [pc, #128]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe fc08 	bl	80068bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d10a      	bne.n	80080ca <prvAddCurrentTaskToDelayedList+0x3a>
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d007      	beq.n	80080ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080ba:	4b1a      	ldr	r3, [pc, #104]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4819      	ldr	r0, [pc, #100]	; (8008128 <prvAddCurrentTaskToDelayedList+0x98>)
 80080c4:	f7fe fb9d 	bl	8006802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080c8:	e026      	b.n	8008118 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080ca:	68fa      	ldr	r2, [r7, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080d2:	4b14      	ldr	r3, [pc, #80]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	429a      	cmp	r2, r3
 80080e0:	d209      	bcs.n	80080f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e2:	4b12      	ldr	r3, [pc, #72]	; (800812c <prvAddCurrentTaskToDelayedList+0x9c>)
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7fe fbab 	bl	800684a <vListInsert>
}
 80080f4:	e010      	b.n	8008118 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f6:	4b0e      	ldr	r3, [pc, #56]	; (8008130 <prvAddCurrentTaskToDelayedList+0xa0>)
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <prvAddCurrentTaskToDelayedList+0x94>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	3304      	adds	r3, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4610      	mov	r0, r2
 8008104:	f7fe fba1 	bl	800684a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008108:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <prvAddCurrentTaskToDelayedList+0xa4>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68ba      	ldr	r2, [r7, #8]
 800810e:	429a      	cmp	r2, r3
 8008110:	d202      	bcs.n	8008118 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008112:	4a08      	ldr	r2, [pc, #32]	; (8008134 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6013      	str	r3, [r2, #0]
}
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20001658 	.word	0x20001658
 8008124:	20001180 	.word	0x20001180
 8008128:	20001640 	.word	0x20001640
 800812c:	20001610 	.word	0x20001610
 8008130:	2000160c 	.word	0x2000160c
 8008134:	20001674 	.word	0x20001674

08008138 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b08a      	sub	sp, #40	; 0x28
 800813c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800813e:	2300      	movs	r3, #0
 8008140:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008142:	f000 fb07 	bl	8008754 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008146:	4b1c      	ldr	r3, [pc, #112]	; (80081b8 <xTimerCreateTimerTask+0x80>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d021      	beq.n	8008192 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008156:	1d3a      	adds	r2, r7, #4
 8008158:	f107 0108 	add.w	r1, r7, #8
 800815c:	f107 030c 	add.w	r3, r7, #12
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe fb07 	bl	8006774 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008166:	6879      	ldr	r1, [r7, #4]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	68fa      	ldr	r2, [r7, #12]
 800816c:	9202      	str	r2, [sp, #8]
 800816e:	9301      	str	r3, [sp, #4]
 8008170:	2302      	movs	r3, #2
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	2300      	movs	r3, #0
 8008176:	460a      	mov	r2, r1
 8008178:	4910      	ldr	r1, [pc, #64]	; (80081bc <xTimerCreateTimerTask+0x84>)
 800817a:	4811      	ldr	r0, [pc, #68]	; (80081c0 <xTimerCreateTimerTask+0x88>)
 800817c:	f7ff f8b4 	bl	80072e8 <xTaskCreateStatic>
 8008180:	4603      	mov	r3, r0
 8008182:	4a10      	ldr	r2, [pc, #64]	; (80081c4 <xTimerCreateTimerTask+0x8c>)
 8008184:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008186:	4b0f      	ldr	r3, [pc, #60]	; (80081c4 <xTimerCreateTimerTask+0x8c>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d001      	beq.n	8008192 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800818e:	2301      	movs	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d10a      	bne.n	80081ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819c:	f383 8811 	msr	BASEPRI, r3
 80081a0:	f3bf 8f6f 	isb	sy
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	613b      	str	r3, [r7, #16]
}
 80081aa:	bf00      	nop
 80081ac:	e7fe      	b.n	80081ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80081ae:	697b      	ldr	r3, [r7, #20]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	200016b0 	.word	0x200016b0
 80081bc:	080092f4 	.word	0x080092f4
 80081c0:	080082fd 	.word	0x080082fd
 80081c4:	200016b4 	.word	0x200016b4

080081c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08a      	sub	sp, #40	; 0x28
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80081d6:	2300      	movs	r3, #0
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80081e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e4:	f383 8811 	msr	BASEPRI, r3
 80081e8:	f3bf 8f6f 	isb	sy
 80081ec:	f3bf 8f4f 	dsb	sy
 80081f0:	623b      	str	r3, [r7, #32]
}
 80081f2:	bf00      	nop
 80081f4:	e7fe      	b.n	80081f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80081f6:	4b1a      	ldr	r3, [pc, #104]	; (8008260 <xTimerGenericCommand+0x98>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d02a      	beq.n	8008254 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	2b05      	cmp	r3, #5
 800820e:	dc18      	bgt.n	8008242 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008210:	f7ff feb2 	bl	8007f78 <xTaskGetSchedulerState>
 8008214:	4603      	mov	r3, r0
 8008216:	2b02      	cmp	r3, #2
 8008218:	d109      	bne.n	800822e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800821a:	4b11      	ldr	r3, [pc, #68]	; (8008260 <xTimerGenericCommand+0x98>)
 800821c:	6818      	ldr	r0, [r3, #0]
 800821e:	f107 0110 	add.w	r1, r7, #16
 8008222:	2300      	movs	r3, #0
 8008224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008226:	f7fe fc77 	bl	8006b18 <xQueueGenericSend>
 800822a:	6278      	str	r0, [r7, #36]	; 0x24
 800822c:	e012      	b.n	8008254 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800822e:	4b0c      	ldr	r3, [pc, #48]	; (8008260 <xTimerGenericCommand+0x98>)
 8008230:	6818      	ldr	r0, [r3, #0]
 8008232:	f107 0110 	add.w	r1, r7, #16
 8008236:	2300      	movs	r3, #0
 8008238:	2200      	movs	r2, #0
 800823a:	f7fe fc6d 	bl	8006b18 <xQueueGenericSend>
 800823e:	6278      	str	r0, [r7, #36]	; 0x24
 8008240:	e008      	b.n	8008254 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008242:	4b07      	ldr	r3, [pc, #28]	; (8008260 <xTimerGenericCommand+0x98>)
 8008244:	6818      	ldr	r0, [r3, #0]
 8008246:	f107 0110 	add.w	r1, r7, #16
 800824a:	2300      	movs	r3, #0
 800824c:	683a      	ldr	r2, [r7, #0]
 800824e:	f7fe fd61 	bl	8006d14 <xQueueGenericSendFromISR>
 8008252:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008256:	4618      	mov	r0, r3
 8008258:	3728      	adds	r7, #40	; 0x28
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}
 800825e:	bf00      	nop
 8008260:	200016b0 	.word	0x200016b0

08008264 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b088      	sub	sp, #32
 8008268:	af02      	add	r7, sp, #8
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826e:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <prvProcessExpiredTimer+0x94>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	3304      	adds	r3, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f7fe fb1d 	bl	80068bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008288:	f003 0304 	and.w	r3, r3, #4
 800828c:	2b00      	cmp	r3, #0
 800828e:	d022      	beq.n	80082d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	699a      	ldr	r2, [r3, #24]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	18d1      	adds	r1, r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	6978      	ldr	r0, [r7, #20]
 800829e:	f000 f8d1 	bl	8008444 <prvInsertTimerInActiveList>
 80082a2:	4603      	mov	r3, r0
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d01f      	beq.n	80082e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082a8:	2300      	movs	r3, #0
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	2300      	movs	r3, #0
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	2100      	movs	r1, #0
 80082b2:	6978      	ldr	r0, [r7, #20]
 80082b4:	f7ff ff88 	bl	80081c8 <xTimerGenericCommand>
 80082b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d113      	bne.n	80082e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	60fb      	str	r3, [r7, #12]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80082dc:	f023 0301 	bic.w	r3, r3, #1
 80082e0:	b2da      	uxtb	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	6a1b      	ldr	r3, [r3, #32]
 80082ec:	6978      	ldr	r0, [r7, #20]
 80082ee:	4798      	blx	r3
}
 80082f0:	bf00      	nop
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	200016a8 	.word	0x200016a8

080082fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008304:	f107 0308 	add.w	r3, r7, #8
 8008308:	4618      	mov	r0, r3
 800830a:	f000 f857 	bl	80083bc <prvGetNextExpireTime>
 800830e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	4619      	mov	r1, r3
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 f803 	bl	8008320 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800831a:	f000 f8d5 	bl	80084c8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800831e:	e7f1      	b.n	8008304 <prvTimerTask+0x8>

08008320 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800832a:	f7ff fa39 	bl	80077a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800832e:	f107 0308 	add.w	r3, r7, #8
 8008332:	4618      	mov	r0, r3
 8008334:	f000 f866 	bl	8008404 <prvSampleTimeNow>
 8008338:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d130      	bne.n	80083a2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d10a      	bne.n	800835c <prvProcessTimerOrBlockTask+0x3c>
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	429a      	cmp	r2, r3
 800834c:	d806      	bhi.n	800835c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800834e:	f7ff fa35 	bl	80077bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008352:	68f9      	ldr	r1, [r7, #12]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7ff ff85 	bl	8008264 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800835a:	e024      	b.n	80083a6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d008      	beq.n	8008374 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008362:	4b13      	ldr	r3, [pc, #76]	; (80083b0 <prvProcessTimerOrBlockTask+0x90>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d101      	bne.n	8008370 <prvProcessTimerOrBlockTask+0x50>
 800836c:	2301      	movs	r3, #1
 800836e:	e000      	b.n	8008372 <prvProcessTimerOrBlockTask+0x52>
 8008370:	2300      	movs	r3, #0
 8008372:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008374:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <prvProcessTimerOrBlockTask+0x94>)
 8008376:	6818      	ldr	r0, [r3, #0]
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	683a      	ldr	r2, [r7, #0]
 8008380:	4619      	mov	r1, r3
 8008382:	f7fe ff7d 	bl	8007280 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008386:	f7ff fa19 	bl	80077bc <xTaskResumeAll>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10a      	bne.n	80083a6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008390:	4b09      	ldr	r3, [pc, #36]	; (80083b8 <prvProcessTimerOrBlockTask+0x98>)
 8008392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
}
 80083a0:	e001      	b.n	80083a6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80083a2:	f7ff fa0b 	bl	80077bc <xTaskResumeAll>
}
 80083a6:	bf00      	nop
 80083a8:	3710      	adds	r7, #16
 80083aa:	46bd      	mov	sp, r7
 80083ac:	bd80      	pop	{r7, pc}
 80083ae:	bf00      	nop
 80083b0:	200016ac 	.word	0x200016ac
 80083b4:	200016b0 	.word	0x200016b0
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80083c4:	4b0e      	ldr	r3, [pc, #56]	; (8008400 <prvGetNextExpireTime+0x44>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <prvGetNextExpireTime+0x16>
 80083ce:	2201      	movs	r2, #1
 80083d0:	e000      	b.n	80083d4 <prvGetNextExpireTime+0x18>
 80083d2:	2200      	movs	r2, #0
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d105      	bne.n	80083ec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <prvGetNextExpireTime+0x44>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	60fb      	str	r3, [r7, #12]
 80083ea:	e001      	b.n	80083f0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80083ec:	2300      	movs	r3, #0
 80083ee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80083f0:	68fb      	ldr	r3, [r7, #12]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	200016a8 	.word	0x200016a8

08008404 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800840c:	f7ff fa74 	bl	80078f8 <xTaskGetTickCount>
 8008410:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008412:	4b0b      	ldr	r3, [pc, #44]	; (8008440 <prvSampleTimeNow+0x3c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	429a      	cmp	r2, r3
 800841a:	d205      	bcs.n	8008428 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800841c:	f000 f936 	bl	800868c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	e002      	b.n	800842e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800842e:	4a04      	ldr	r2, [pc, #16]	; (8008440 <prvSampleTimeNow+0x3c>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008434:	68fb      	ldr	r3, [r7, #12]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	200016b8 	.word	0x200016b8

08008444 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	607a      	str	r2, [r7, #4]
 8008450:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008462:	68ba      	ldr	r2, [r7, #8]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	429a      	cmp	r2, r3
 8008468:	d812      	bhi.n	8008490 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	1ad2      	subs	r2, r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	429a      	cmp	r2, r3
 8008476:	d302      	bcc.n	800847e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008478:	2301      	movs	r3, #1
 800847a:	617b      	str	r3, [r7, #20]
 800847c:	e01b      	b.n	80084b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800847e:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <prvInsertTimerInActiveList+0x7c>)
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3304      	adds	r3, #4
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f7fe f9de 	bl	800684a <vListInsert>
 800848e:	e012      	b.n	80084b6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	429a      	cmp	r2, r3
 8008496:	d206      	bcs.n	80084a6 <prvInsertTimerInActiveList+0x62>
 8008498:	68ba      	ldr	r2, [r7, #8]
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	429a      	cmp	r2, r3
 800849e:	d302      	bcc.n	80084a6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80084a0:	2301      	movs	r3, #1
 80084a2:	617b      	str	r3, [r7, #20]
 80084a4:	e007      	b.n	80084b6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084a6:	4b07      	ldr	r3, [pc, #28]	; (80084c4 <prvInsertTimerInActiveList+0x80>)
 80084a8:	681a      	ldr	r2, [r3, #0]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3304      	adds	r3, #4
 80084ae:	4619      	mov	r1, r3
 80084b0:	4610      	mov	r0, r2
 80084b2:	f7fe f9ca 	bl	800684a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80084b6:	697b      	ldr	r3, [r7, #20]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	200016ac 	.word	0x200016ac
 80084c4:	200016a8 	.word	0x200016a8

080084c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b08e      	sub	sp, #56	; 0x38
 80084cc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ce:	e0ca      	b.n	8008666 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	da18      	bge.n	8008508 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80084d6:	1d3b      	adds	r3, r7, #4
 80084d8:	3304      	adds	r3, #4
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80084dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d10a      	bne.n	80084f8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80084e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e6:	f383 8811 	msr	BASEPRI, r3
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	f3bf 8f4f 	dsb	sy
 80084f2:	61fb      	str	r3, [r7, #28]
}
 80084f4:	bf00      	nop
 80084f6:	e7fe      	b.n	80084f6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80084f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084fe:	6850      	ldr	r0, [r2, #4]
 8008500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008502:	6892      	ldr	r2, [r2, #8]
 8008504:	4611      	mov	r1, r2
 8008506:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	f2c0 80ab 	blt.w	8008666 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d004      	beq.n	8008526 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	3304      	adds	r3, #4
 8008520:	4618      	mov	r0, r3
 8008522:	f7fe f9cb 	bl	80068bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008526:	463b      	mov	r3, r7
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff ff6b 	bl	8008404 <prvSampleTimeNow>
 800852e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b09      	cmp	r3, #9
 8008534:	f200 8096 	bhi.w	8008664 <prvProcessReceivedCommands+0x19c>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <prvProcessReceivedCommands+0x78>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008569 	.word	0x08008569
 8008544:	08008569 	.word	0x08008569
 8008548:	08008569 	.word	0x08008569
 800854c:	080085dd 	.word	0x080085dd
 8008550:	080085f1 	.word	0x080085f1
 8008554:	0800863b 	.word	0x0800863b
 8008558:	08008569 	.word	0x08008569
 800855c:	08008569 	.word	0x08008569
 8008560:	080085dd 	.word	0x080085dd
 8008564:	080085f1 	.word	0x080085f1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800856e:	f043 0301 	orr.w	r3, r3, #1
 8008572:	b2da      	uxtb	r2, r3
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	18d1      	adds	r1, r2, r3
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008588:	f7ff ff5c 	bl	8008444 <prvInsertTimerInActiveList>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d069      	beq.n	8008666 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008598:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800859c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d05e      	beq.n	8008666 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	441a      	add	r2, r3
 80085b0:	2300      	movs	r3, #0
 80085b2:	9300      	str	r3, [sp, #0]
 80085b4:	2300      	movs	r3, #0
 80085b6:	2100      	movs	r1, #0
 80085b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085ba:	f7ff fe05 	bl	80081c8 <xTimerGenericCommand>
 80085be:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80085c0:	6a3b      	ldr	r3, [r7, #32]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d14f      	bne.n	8008666 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80085c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ca:	f383 8811 	msr	BASEPRI, r3
 80085ce:	f3bf 8f6f 	isb	sy
 80085d2:	f3bf 8f4f 	dsb	sy
 80085d6:	61bb      	str	r3, [r7, #24]
}
 80085d8:	bf00      	nop
 80085da:	e7fe      	b.n	80085da <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80085dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085e2:	f023 0301 	bic.w	r3, r3, #1
 80085e6:	b2da      	uxtb	r2, r3
 80085e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80085ee:	e03a      	b.n	8008666 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80085f6:	f043 0301 	orr.w	r3, r3, #1
 80085fa:	b2da      	uxtb	r2, r3
 80085fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008602:	68ba      	ldr	r2, [r7, #8]
 8008604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008606:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d10a      	bne.n	8008626 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008614:	f383 8811 	msr	BASEPRI, r3
 8008618:	f3bf 8f6f 	isb	sy
 800861c:	f3bf 8f4f 	dsb	sy
 8008620:	617b      	str	r3, [r7, #20]
}
 8008622:	bf00      	nop
 8008624:	e7fe      	b.n	8008624 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008628:	699a      	ldr	r2, [r3, #24]
 800862a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862c:	18d1      	adds	r1, r2, r3
 800862e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008634:	f7ff ff06 	bl	8008444 <prvInsertTimerInActiveList>
					break;
 8008638:	e015      	b.n	8008666 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800863a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800863c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d103      	bne.n	8008650 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008648:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800864a:	f000 fbe1 	bl	8008e10 <vPortFree>
 800864e:	e00a      	b.n	8008666 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008656:	f023 0301 	bic.w	r3, r3, #1
 800865a:	b2da      	uxtb	r2, r3
 800865c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800865e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008662:	e000      	b.n	8008666 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008664:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008666:	4b08      	ldr	r3, [pc, #32]	; (8008688 <prvProcessReceivedCommands+0x1c0>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	1d39      	adds	r1, r7, #4
 800866c:	2200      	movs	r2, #0
 800866e:	4618      	mov	r0, r3
 8008670:	f7fe fbec 	bl	8006e4c <xQueueReceive>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	f47f af2a 	bne.w	80084d0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800867c:	bf00      	nop
 800867e:	bf00      	nop
 8008680:	3730      	adds	r7, #48	; 0x30
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	200016b0 	.word	0x200016b0

0800868c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b088      	sub	sp, #32
 8008690:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008692:	e048      	b.n	8008726 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008694:	4b2d      	ldr	r3, [pc, #180]	; (800874c <prvSwitchTimerLists+0xc0>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800869e:	4b2b      	ldr	r3, [pc, #172]	; (800874c <prvSwitchTimerLists+0xc0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe f905 	bl	80068bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80086c0:	f003 0304 	and.w	r3, r3, #4
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d02e      	beq.n	8008726 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	699b      	ldr	r3, [r3, #24]
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4413      	add	r3, r2
 80086d0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d90e      	bls.n	80086f8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086e6:	4b19      	ldr	r3, [pc, #100]	; (800874c <prvSwitchTimerLists+0xc0>)
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	3304      	adds	r3, #4
 80086ee:	4619      	mov	r1, r3
 80086f0:	4610      	mov	r0, r2
 80086f2:	f7fe f8aa 	bl	800684a <vListInsert>
 80086f6:	e016      	b.n	8008726 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80086f8:	2300      	movs	r3, #0
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	2300      	movs	r3, #0
 80086fe:	693a      	ldr	r2, [r7, #16]
 8008700:	2100      	movs	r1, #0
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff fd60 	bl	80081c8 <xTimerGenericCommand>
 8008708:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	603b      	str	r3, [r7, #0]
}
 8008722:	bf00      	nop
 8008724:	e7fe      	b.n	8008724 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008726:	4b09      	ldr	r3, [pc, #36]	; (800874c <prvSwitchTimerLists+0xc0>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1b1      	bne.n	8008694 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008730:	4b06      	ldr	r3, [pc, #24]	; (800874c <prvSwitchTimerLists+0xc0>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008736:	4b06      	ldr	r3, [pc, #24]	; (8008750 <prvSwitchTimerLists+0xc4>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a04      	ldr	r2, [pc, #16]	; (800874c <prvSwitchTimerLists+0xc0>)
 800873c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800873e:	4a04      	ldr	r2, [pc, #16]	; (8008750 <prvSwitchTimerLists+0xc4>)
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	6013      	str	r3, [r2, #0]
}
 8008744:	bf00      	nop
 8008746:	3718      	adds	r7, #24
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	200016a8 	.word	0x200016a8
 8008750:	200016ac 	.word	0x200016ac

08008754 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800875a:	f000 f96b 	bl	8008a34 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800875e:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <prvCheckForValidListAndQueue+0x60>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d120      	bne.n	80087a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008766:	4814      	ldr	r0, [pc, #80]	; (80087b8 <prvCheckForValidListAndQueue+0x64>)
 8008768:	f7fe f81e 	bl	80067a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800876c:	4813      	ldr	r0, [pc, #76]	; (80087bc <prvCheckForValidListAndQueue+0x68>)
 800876e:	f7fe f81b 	bl	80067a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <prvCheckForValidListAndQueue+0x6c>)
 8008774:	4a10      	ldr	r2, [pc, #64]	; (80087b8 <prvCheckForValidListAndQueue+0x64>)
 8008776:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008778:	4b12      	ldr	r3, [pc, #72]	; (80087c4 <prvCheckForValidListAndQueue+0x70>)
 800877a:	4a10      	ldr	r2, [pc, #64]	; (80087bc <prvCheckForValidListAndQueue+0x68>)
 800877c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800877e:	2300      	movs	r3, #0
 8008780:	9300      	str	r3, [sp, #0]
 8008782:	4b11      	ldr	r3, [pc, #68]	; (80087c8 <prvCheckForValidListAndQueue+0x74>)
 8008784:	4a11      	ldr	r2, [pc, #68]	; (80087cc <prvCheckForValidListAndQueue+0x78>)
 8008786:	2110      	movs	r1, #16
 8008788:	200a      	movs	r0, #10
 800878a:	f7fe f929 	bl	80069e0 <xQueueGenericCreateStatic>
 800878e:	4603      	mov	r3, r0
 8008790:	4a08      	ldr	r2, [pc, #32]	; (80087b4 <prvCheckForValidListAndQueue+0x60>)
 8008792:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008794:	4b07      	ldr	r3, [pc, #28]	; (80087b4 <prvCheckForValidListAndQueue+0x60>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d005      	beq.n	80087a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800879c:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <prvCheckForValidListAndQueue+0x60>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	490b      	ldr	r1, [pc, #44]	; (80087d0 <prvCheckForValidListAndQueue+0x7c>)
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fd42 	bl	800722c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80087a8:	f000 f974 	bl	8008a94 <vPortExitCritical>
}
 80087ac:	bf00      	nop
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
 80087b2:	bf00      	nop
 80087b4:	200016b0 	.word	0x200016b0
 80087b8:	20001680 	.word	0x20001680
 80087bc:	20001694 	.word	0x20001694
 80087c0:	200016a8 	.word	0x200016a8
 80087c4:	200016ac 	.word	0x200016ac
 80087c8:	2000175c 	.word	0x2000175c
 80087cc:	200016bc 	.word	0x200016bc
 80087d0:	080092fc 	.word	0x080092fc

080087d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	3b04      	subs	r3, #4
 80087e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80087ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	3b04      	subs	r3, #4
 80087f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	f023 0201 	bic.w	r2, r3, #1
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	3b04      	subs	r3, #4
 8008802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008804:	4a0c      	ldr	r2, [pc, #48]	; (8008838 <pxPortInitialiseStack+0x64>)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3b14      	subs	r3, #20
 800880e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	3b04      	subs	r3, #4
 800881a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f06f 0202 	mvn.w	r2, #2
 8008822:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3b20      	subs	r3, #32
 8008828:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800882a:	68fb      	ldr	r3, [r7, #12]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	0800883d 	.word	0x0800883d

0800883c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008842:	2300      	movs	r3, #0
 8008844:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008846:	4b12      	ldr	r3, [pc, #72]	; (8008890 <prvTaskExitError+0x54>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884e:	d00a      	beq.n	8008866 <prvTaskExitError+0x2a>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	60fb      	str	r3, [r7, #12]
}
 8008862:	bf00      	nop
 8008864:	e7fe      	b.n	8008864 <prvTaskExitError+0x28>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	60bb      	str	r3, [r7, #8]
}
 8008878:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800887a:	bf00      	nop
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0fc      	beq.n	800887c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008882:	bf00      	nop
 8008884:	bf00      	nop
 8008886:	3714      	adds	r7, #20
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	20000094 	.word	0x20000094
	...

080088a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <pxCurrentTCBConst2>)
 80088a2:	6819      	ldr	r1, [r3, #0]
 80088a4:	6808      	ldr	r0, [r1, #0]
 80088a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088aa:	f380 8809 	msr	PSP, r0
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f04f 0000 	mov.w	r0, #0
 80088b6:	f380 8811 	msr	BASEPRI, r0
 80088ba:	4770      	bx	lr
 80088bc:	f3af 8000 	nop.w

080088c0 <pxCurrentTCBConst2>:
 80088c0:	20001180 	.word	0x20001180
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80088c4:	bf00      	nop
 80088c6:	bf00      	nop

080088c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80088c8:	4808      	ldr	r0, [pc, #32]	; (80088ec <prvPortStartFirstTask+0x24>)
 80088ca:	6800      	ldr	r0, [r0, #0]
 80088cc:	6800      	ldr	r0, [r0, #0]
 80088ce:	f380 8808 	msr	MSP, r0
 80088d2:	f04f 0000 	mov.w	r0, #0
 80088d6:	f380 8814 	msr	CONTROL, r0
 80088da:	b662      	cpsie	i
 80088dc:	b661      	cpsie	f
 80088de:	f3bf 8f4f 	dsb	sy
 80088e2:	f3bf 8f6f 	isb	sy
 80088e6:	df00      	svc	0
 80088e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80088ea:	bf00      	nop
 80088ec:	e000ed08 	.word	0xe000ed08

080088f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80088f6:	4b46      	ldr	r3, [pc, #280]	; (8008a10 <xPortStartScheduler+0x120>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a46      	ldr	r2, [pc, #280]	; (8008a14 <xPortStartScheduler+0x124>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d10a      	bne.n	8008916 <xPortStartScheduler+0x26>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	613b      	str	r3, [r7, #16]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008916:	4b3e      	ldr	r3, [pc, #248]	; (8008a10 <xPortStartScheduler+0x120>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a3f      	ldr	r2, [pc, #252]	; (8008a18 <xPortStartScheduler+0x128>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d10a      	bne.n	8008936 <xPortStartScheduler+0x46>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	60fb      	str	r3, [r7, #12]
}
 8008932:	bf00      	nop
 8008934:	e7fe      	b.n	8008934 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008936:	4b39      	ldr	r3, [pc, #228]	; (8008a1c <xPortStartScheduler+0x12c>)
 8008938:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	b2db      	uxtb	r3, r3
 8008940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	22ff      	movs	r2, #255	; 0xff
 8008946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	781b      	ldrb	r3, [r3, #0]
 800894c:	b2db      	uxtb	r3, r3
 800894e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008950:	78fb      	ldrb	r3, [r7, #3]
 8008952:	b2db      	uxtb	r3, r3
 8008954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008958:	b2da      	uxtb	r2, r3
 800895a:	4b31      	ldr	r3, [pc, #196]	; (8008a20 <xPortStartScheduler+0x130>)
 800895c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800895e:	4b31      	ldr	r3, [pc, #196]	; (8008a24 <xPortStartScheduler+0x134>)
 8008960:	2207      	movs	r2, #7
 8008962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008964:	e009      	b.n	800897a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008966:	4b2f      	ldr	r3, [pc, #188]	; (8008a24 <xPortStartScheduler+0x134>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3b01      	subs	r3, #1
 800896c:	4a2d      	ldr	r2, [pc, #180]	; (8008a24 <xPortStartScheduler+0x134>)
 800896e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008970:	78fb      	ldrb	r3, [r7, #3]
 8008972:	b2db      	uxtb	r3, r3
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	b2db      	uxtb	r3, r3
 8008978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800897a:	78fb      	ldrb	r3, [r7, #3]
 800897c:	b2db      	uxtb	r3, r3
 800897e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008982:	2b80      	cmp	r3, #128	; 0x80
 8008984:	d0ef      	beq.n	8008966 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008986:	4b27      	ldr	r3, [pc, #156]	; (8008a24 <xPortStartScheduler+0x134>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1c3 0307 	rsb	r3, r3, #7
 800898e:	2b04      	cmp	r3, #4
 8008990:	d00a      	beq.n	80089a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	60bb      	str	r3, [r7, #8]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80089a8:	4b1e      	ldr	r3, [pc, #120]	; (8008a24 <xPortStartScheduler+0x134>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <xPortStartScheduler+0x134>)
 80089b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <xPortStartScheduler+0x134>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80089ba:	4a1a      	ldr	r2, [pc, #104]	; (8008a24 <xPortStartScheduler+0x134>)
 80089bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	b2da      	uxtb	r2, r3
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80089c6:	4b18      	ldr	r3, [pc, #96]	; (8008a28 <xPortStartScheduler+0x138>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a17      	ldr	r2, [pc, #92]	; (8008a28 <xPortStartScheduler+0x138>)
 80089cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80089d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80089d2:	4b15      	ldr	r3, [pc, #84]	; (8008a28 <xPortStartScheduler+0x138>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a14      	ldr	r2, [pc, #80]	; (8008a28 <xPortStartScheduler+0x138>)
 80089d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80089dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80089de:	f000 f8dd 	bl	8008b9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80089e2:	4b12      	ldr	r3, [pc, #72]	; (8008a2c <xPortStartScheduler+0x13c>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80089e8:	f000 f8fc 	bl	8008be4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80089ec:	4b10      	ldr	r3, [pc, #64]	; (8008a30 <xPortStartScheduler+0x140>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a0f      	ldr	r2, [pc, #60]	; (8008a30 <xPortStartScheduler+0x140>)
 80089f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80089f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80089f8:	f7ff ff66 	bl	80088c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80089fc:	f7ff f846 	bl	8007a8c <vTaskSwitchContext>
	prvTaskExitError();
 8008a00:	f7ff ff1c 	bl	800883c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3718      	adds	r7, #24
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	e000ed00 	.word	0xe000ed00
 8008a14:	410fc271 	.word	0x410fc271
 8008a18:	410fc270 	.word	0x410fc270
 8008a1c:	e000e400 	.word	0xe000e400
 8008a20:	200017ac 	.word	0x200017ac
 8008a24:	200017b0 	.word	0x200017b0
 8008a28:	e000ed20 	.word	0xe000ed20
 8008a2c:	20000094 	.word	0x20000094
 8008a30:	e000ef34 	.word	0xe000ef34

08008a34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008a34:	b480      	push	{r7}
 8008a36:	b083      	sub	sp, #12
 8008a38:	af00      	add	r7, sp, #0
	__asm volatile
 8008a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3e:	f383 8811 	msr	BASEPRI, r3
 8008a42:	f3bf 8f6f 	isb	sy
 8008a46:	f3bf 8f4f 	dsb	sy
 8008a4a:	607b      	str	r3, [r7, #4]
}
 8008a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008a4e:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <vPortEnterCritical+0x58>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3301      	adds	r3, #1
 8008a54:	4a0d      	ldr	r2, [pc, #52]	; (8008a8c <vPortEnterCritical+0x58>)
 8008a56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008a58:	4b0c      	ldr	r3, [pc, #48]	; (8008a8c <vPortEnterCritical+0x58>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d10f      	bne.n	8008a80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008a60:	4b0b      	ldr	r3, [pc, #44]	; (8008a90 <vPortEnterCritical+0x5c>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00a      	beq.n	8008a80 <vPortEnterCritical+0x4c>
	__asm volatile
 8008a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a6e:	f383 8811 	msr	BASEPRI, r3
 8008a72:	f3bf 8f6f 	isb	sy
 8008a76:	f3bf 8f4f 	dsb	sy
 8008a7a:	603b      	str	r3, [r7, #0]
}
 8008a7c:	bf00      	nop
 8008a7e:	e7fe      	b.n	8008a7e <vPortEnterCritical+0x4a>
	}
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr
 8008a8c:	20000094 	.word	0x20000094
 8008a90:	e000ed04 	.word	0xe000ed04

08008a94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008a9a:	4b12      	ldr	r3, [pc, #72]	; (8008ae4 <vPortExitCritical+0x50>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <vPortExitCritical+0x24>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	607b      	str	r3, [r7, #4]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008ab8:	4b0a      	ldr	r3, [pc, #40]	; (8008ae4 <vPortExitCritical+0x50>)
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	3b01      	subs	r3, #1
 8008abe:	4a09      	ldr	r2, [pc, #36]	; (8008ae4 <vPortExitCritical+0x50>)
 8008ac0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008ac2:	4b08      	ldr	r3, [pc, #32]	; (8008ae4 <vPortExitCritical+0x50>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d105      	bne.n	8008ad6 <vPortExitCritical+0x42>
 8008aca:	2300      	movs	r3, #0
 8008acc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	f383 8811 	msr	BASEPRI, r3
}
 8008ad4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	20000094 	.word	0x20000094
	...

08008af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008af0:	f3ef 8009 	mrs	r0, PSP
 8008af4:	f3bf 8f6f 	isb	sy
 8008af8:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <pxCurrentTCBConst>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	f01e 0f10 	tst.w	lr, #16
 8008b00:	bf08      	it	eq
 8008b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0a:	6010      	str	r0, [r2, #0]
 8008b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008b10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008b14:	f380 8811 	msr	BASEPRI, r0
 8008b18:	f3bf 8f4f 	dsb	sy
 8008b1c:	f3bf 8f6f 	isb	sy
 8008b20:	f7fe ffb4 	bl	8007a8c <vTaskSwitchContext>
 8008b24:	f04f 0000 	mov.w	r0, #0
 8008b28:	f380 8811 	msr	BASEPRI, r0
 8008b2c:	bc09      	pop	{r0, r3}
 8008b2e:	6819      	ldr	r1, [r3, #0]
 8008b30:	6808      	ldr	r0, [r1, #0]
 8008b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b36:	f01e 0f10 	tst.w	lr, #16
 8008b3a:	bf08      	it	eq
 8008b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008b40:	f380 8809 	msr	PSP, r0
 8008b44:	f3bf 8f6f 	isb	sy
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	f3af 8000 	nop.w

08008b50 <pxCurrentTCBConst>:
 8008b50:	20001180 	.word	0x20001180
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008b54:	bf00      	nop
 8008b56:	bf00      	nop

08008b58 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	607b      	str	r3, [r7, #4]
}
 8008b70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b72:	f7fe fed1 	bl	8007918 <xTaskIncrementTick>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b7c:	4b06      	ldr	r3, [pc, #24]	; (8008b98 <xPortSysTickHandler+0x40>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	2300      	movs	r3, #0
 8008b86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f383 8811 	msr	BASEPRI, r3
}
 8008b8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ba0:	4b0b      	ldr	r3, [pc, #44]	; (8008bd0 <vPortSetupTimerInterrupt+0x34>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ba6:	4b0b      	ldr	r3, [pc, #44]	; (8008bd4 <vPortSetupTimerInterrupt+0x38>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <vPortSetupTimerInterrupt+0x3c>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <vPortSetupTimerInterrupt+0x40>)
 8008bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bb6:	099b      	lsrs	r3, r3, #6
 8008bb8:	4a09      	ldr	r2, [pc, #36]	; (8008be0 <vPortSetupTimerInterrupt+0x44>)
 8008bba:	3b01      	subs	r3, #1
 8008bbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008bbe:	4b04      	ldr	r3, [pc, #16]	; (8008bd0 <vPortSetupTimerInterrupt+0x34>)
 8008bc0:	2207      	movs	r2, #7
 8008bc2:	601a      	str	r2, [r3, #0]
}
 8008bc4:	bf00      	nop
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	e000e010 	.word	0xe000e010
 8008bd4:	e000e018 	.word	0xe000e018
 8008bd8:	20000088 	.word	0x20000088
 8008bdc:	10624dd3 	.word	0x10624dd3
 8008be0:	e000e014 	.word	0xe000e014

08008be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008be4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008bf4 <vPortEnableVFP+0x10>
 8008be8:	6801      	ldr	r1, [r0, #0]
 8008bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008bee:	6001      	str	r1, [r0, #0]
 8008bf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008bf2:	bf00      	nop
 8008bf4:	e000ed88 	.word	0xe000ed88

08008bf8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008bfe:	f3ef 8305 	mrs	r3, IPSR
 8008c02:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2b0f      	cmp	r3, #15
 8008c08:	d914      	bls.n	8008c34 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008c0a:	4a17      	ldr	r2, [pc, #92]	; (8008c68 <vPortValidateInterruptPriority+0x70>)
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008c14:	4b15      	ldr	r3, [pc, #84]	; (8008c6c <vPortValidateInterruptPriority+0x74>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	7afa      	ldrb	r2, [r7, #11]
 8008c1a:	429a      	cmp	r2, r3
 8008c1c:	d20a      	bcs.n	8008c34 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	607b      	str	r3, [r7, #4]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008c34:	4b0e      	ldr	r3, [pc, #56]	; (8008c70 <vPortValidateInterruptPriority+0x78>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008c3c:	4b0d      	ldr	r3, [pc, #52]	; (8008c74 <vPortValidateInterruptPriority+0x7c>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	d90a      	bls.n	8008c5a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c48:	f383 8811 	msr	BASEPRI, r3
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f3bf 8f4f 	dsb	sy
 8008c54:	603b      	str	r3, [r7, #0]
}
 8008c56:	bf00      	nop
 8008c58:	e7fe      	b.n	8008c58 <vPortValidateInterruptPriority+0x60>
	}
 8008c5a:	bf00      	nop
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	e000e3f0 	.word	0xe000e3f0
 8008c6c:	200017ac 	.word	0x200017ac
 8008c70:	e000ed0c 	.word	0xe000ed0c
 8008c74:	200017b0 	.word	0x200017b0

08008c78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08a      	sub	sp, #40	; 0x28
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008c80:	2300      	movs	r3, #0
 8008c82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008c84:	f7fe fd8c 	bl	80077a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008c88:	4b5b      	ldr	r3, [pc, #364]	; (8008df8 <pvPortMalloc+0x180>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d101      	bne.n	8008c94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008c90:	f000 f920 	bl	8008ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008c94:	4b59      	ldr	r3, [pc, #356]	; (8008dfc <pvPortMalloc+0x184>)
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f040 8093 	bne.w	8008dc8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d01d      	beq.n	8008ce4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008ca8:	2208      	movs	r2, #8
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4413      	add	r3, r2
 8008cae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f003 0307 	and.w	r3, r3, #7
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d014      	beq.n	8008ce4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f023 0307 	bic.w	r3, r3, #7
 8008cc0:	3308      	adds	r3, #8
 8008cc2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f003 0307 	and.w	r3, r3, #7
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <pvPortMalloc+0x6c>
	__asm volatile
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	617b      	str	r3, [r7, #20]
}
 8008ce0:	bf00      	nop
 8008ce2:	e7fe      	b.n	8008ce2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d06e      	beq.n	8008dc8 <pvPortMalloc+0x150>
 8008cea:	4b45      	ldr	r3, [pc, #276]	; (8008e00 <pvPortMalloc+0x188>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d869      	bhi.n	8008dc8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008cf4:	4b43      	ldr	r3, [pc, #268]	; (8008e04 <pvPortMalloc+0x18c>)
 8008cf6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008cf8:	4b42      	ldr	r3, [pc, #264]	; (8008e04 <pvPortMalloc+0x18c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008cfe:	e004      	b.n	8008d0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d903      	bls.n	8008d1c <pvPortMalloc+0xa4>
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1f1      	bne.n	8008d00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008d1c:	4b36      	ldr	r3, [pc, #216]	; (8008df8 <pvPortMalloc+0x180>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d050      	beq.n	8008dc8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008d26:	6a3b      	ldr	r3, [r7, #32]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	2208      	movs	r2, #8
 8008d2c:	4413      	add	r3, r2
 8008d2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	1ad2      	subs	r2, r2, r3
 8008d40:	2308      	movs	r3, #8
 8008d42:	005b      	lsls	r3, r3, #1
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d91f      	bls.n	8008d88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <pvPortMalloc+0xf8>
	__asm volatile
 8008d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d5e:	f383 8811 	msr	BASEPRI, r3
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	f3bf 8f4f 	dsb	sy
 8008d6a:	613b      	str	r3, [r7, #16]
}
 8008d6c:	bf00      	nop
 8008d6e:	e7fe      	b.n	8008d6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	685a      	ldr	r2, [r3, #4]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	1ad2      	subs	r2, r2, r3
 8008d78:	69bb      	ldr	r3, [r7, #24]
 8008d7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008d82:	69b8      	ldr	r0, [r7, #24]
 8008d84:	f000 f908 	bl	8008f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008d88:	4b1d      	ldr	r3, [pc, #116]	; (8008e00 <pvPortMalloc+0x188>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	4a1b      	ldr	r2, [pc, #108]	; (8008e00 <pvPortMalloc+0x188>)
 8008d94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008d96:	4b1a      	ldr	r3, [pc, #104]	; (8008e00 <pvPortMalloc+0x188>)
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4b1b      	ldr	r3, [pc, #108]	; (8008e08 <pvPortMalloc+0x190>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d203      	bcs.n	8008daa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008da2:	4b17      	ldr	r3, [pc, #92]	; (8008e00 <pvPortMalloc+0x188>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a18      	ldr	r2, [pc, #96]	; (8008e08 <pvPortMalloc+0x190>)
 8008da8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dac:	685a      	ldr	r2, [r3, #4]
 8008dae:	4b13      	ldr	r3, [pc, #76]	; (8008dfc <pvPortMalloc+0x184>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	431a      	orrs	r2, r3
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008dbe:	4b13      	ldr	r3, [pc, #76]	; (8008e0c <pvPortMalloc+0x194>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	4a11      	ldr	r2, [pc, #68]	; (8008e0c <pvPortMalloc+0x194>)
 8008dc6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008dc8:	f7fe fcf8 	bl	80077bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00a      	beq.n	8008dec <pvPortMalloc+0x174>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	60fb      	str	r3, [r7, #12]
}
 8008de8:	bf00      	nop
 8008dea:	e7fe      	b.n	8008dea <pvPortMalloc+0x172>
	return pvReturn;
 8008dec:	69fb      	ldr	r3, [r7, #28]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3728      	adds	r7, #40	; 0x28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	200053bc 	.word	0x200053bc
 8008dfc:	200053d0 	.word	0x200053d0
 8008e00:	200053c0 	.word	0x200053c0
 8008e04:	200053b4 	.word	0x200053b4
 8008e08:	200053c4 	.word	0x200053c4
 8008e0c:	200053c8 	.word	0x200053c8

08008e10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b086      	sub	sp, #24
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d04d      	beq.n	8008ebe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008e22:	2308      	movs	r3, #8
 8008e24:	425b      	negs	r3, r3
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	4413      	add	r3, r2
 8008e2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	685a      	ldr	r2, [r3, #4]
 8008e34:	4b24      	ldr	r3, [pc, #144]	; (8008ec8 <vPortFree+0xb8>)
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <vPortFree+0x44>
	__asm volatile
 8008e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e42:	f383 8811 	msr	BASEPRI, r3
 8008e46:	f3bf 8f6f 	isb	sy
 8008e4a:	f3bf 8f4f 	dsb	sy
 8008e4e:	60fb      	str	r3, [r7, #12]
}
 8008e50:	bf00      	nop
 8008e52:	e7fe      	b.n	8008e52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00a      	beq.n	8008e72 <vPortFree+0x62>
	__asm volatile
 8008e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e60:	f383 8811 	msr	BASEPRI, r3
 8008e64:	f3bf 8f6f 	isb	sy
 8008e68:	f3bf 8f4f 	dsb	sy
 8008e6c:	60bb      	str	r3, [r7, #8]
}
 8008e6e:	bf00      	nop
 8008e70:	e7fe      	b.n	8008e70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	4b14      	ldr	r3, [pc, #80]	; (8008ec8 <vPortFree+0xb8>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d01e      	beq.n	8008ebe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d11a      	bne.n	8008ebe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	685a      	ldr	r2, [r3, #4]
 8008e8c:	4b0e      	ldr	r3, [pc, #56]	; (8008ec8 <vPortFree+0xb8>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	43db      	mvns	r3, r3
 8008e92:	401a      	ands	r2, r3
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008e98:	f7fe fc82 	bl	80077a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	685a      	ldr	r2, [r3, #4]
 8008ea0:	4b0a      	ldr	r3, [pc, #40]	; (8008ecc <vPortFree+0xbc>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	4a09      	ldr	r2, [pc, #36]	; (8008ecc <vPortFree+0xbc>)
 8008ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008eaa:	6938      	ldr	r0, [r7, #16]
 8008eac:	f000 f874 	bl	8008f98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008eb0:	4b07      	ldr	r3, [pc, #28]	; (8008ed0 <vPortFree+0xc0>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	4a06      	ldr	r2, [pc, #24]	; (8008ed0 <vPortFree+0xc0>)
 8008eb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008eba:	f7fe fc7f 	bl	80077bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ebe:	bf00      	nop
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	200053d0 	.word	0x200053d0
 8008ecc:	200053c0 	.word	0x200053c0
 8008ed0:	200053cc 	.word	0x200053cc

08008ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b085      	sub	sp, #20
 8008ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008eda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008ee0:	4b27      	ldr	r3, [pc, #156]	; (8008f80 <prvHeapInit+0xac>)
 8008ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00c      	beq.n	8008f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	3307      	adds	r3, #7
 8008ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0307 	bic.w	r3, r3, #7
 8008efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	4a1f      	ldr	r2, [pc, #124]	; (8008f80 <prvHeapInit+0xac>)
 8008f04:	4413      	add	r3, r2
 8008f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008f0c:	4a1d      	ldr	r2, [pc, #116]	; (8008f84 <prvHeapInit+0xb0>)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008f12:	4b1c      	ldr	r3, [pc, #112]	; (8008f84 <prvHeapInit+0xb0>)
 8008f14:	2200      	movs	r2, #0
 8008f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008f20:	2208      	movs	r2, #8
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	1a9b      	subs	r3, r3, r2
 8008f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 0307 	bic.w	r3, r3, #7
 8008f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4a15      	ldr	r2, [pc, #84]	; (8008f88 <prvHeapInit+0xb4>)
 8008f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008f36:	4b14      	ldr	r3, [pc, #80]	; (8008f88 <prvHeapInit+0xb4>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008f3e:	4b12      	ldr	r3, [pc, #72]	; (8008f88 <prvHeapInit+0xb4>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2200      	movs	r2, #0
 8008f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	1ad2      	subs	r2, r2, r3
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008f54:	4b0c      	ldr	r3, [pc, #48]	; (8008f88 <prvHeapInit+0xb4>)
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	4a0a      	ldr	r2, [pc, #40]	; (8008f8c <prvHeapInit+0xb8>)
 8008f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	4a09      	ldr	r2, [pc, #36]	; (8008f90 <prvHeapInit+0xbc>)
 8008f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008f6c:	4b09      	ldr	r3, [pc, #36]	; (8008f94 <prvHeapInit+0xc0>)
 8008f6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008f72:	601a      	str	r2, [r3, #0]
}
 8008f74:	bf00      	nop
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	200017b4 	.word	0x200017b4
 8008f84:	200053b4 	.word	0x200053b4
 8008f88:	200053bc 	.word	0x200053bc
 8008f8c:	200053c4 	.word	0x200053c4
 8008f90:	200053c0 	.word	0x200053c0
 8008f94:	200053d0 	.word	0x200053d0

08008f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008fa0:	4b28      	ldr	r3, [pc, #160]	; (8009044 <prvInsertBlockIntoFreeList+0xac>)
 8008fa2:	60fb      	str	r3, [r7, #12]
 8008fa4:	e002      	b.n	8008fac <prvInsertBlockIntoFreeList+0x14>
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d8f7      	bhi.n	8008fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d108      	bne.n	8008fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	441a      	add	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	441a      	add	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d118      	bne.n	8009020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4b15      	ldr	r3, [pc, #84]	; (8009048 <prvInsertBlockIntoFreeList+0xb0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d00d      	beq.n	8009016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	685b      	ldr	r3, [r3, #4]
 8009004:	441a      	add	r2, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	e008      	b.n	8009028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009016:	4b0c      	ldr	r3, [pc, #48]	; (8009048 <prvInsertBlockIntoFreeList+0xb0>)
 8009018:	681a      	ldr	r2, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	e003      	b.n	8009028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	429a      	cmp	r2, r3
 800902e:	d002      	beq.n	8009036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009036:	bf00      	nop
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	200053b4 	.word	0x200053b4
 8009048:	200053bc 	.word	0x200053bc

0800904c <memset>:
 800904c:	4402      	add	r2, r0
 800904e:	4603      	mov	r3, r0
 8009050:	4293      	cmp	r3, r2
 8009052:	d100      	bne.n	8009056 <memset+0xa>
 8009054:	4770      	bx	lr
 8009056:	f803 1b01 	strb.w	r1, [r3], #1
 800905a:	e7f9      	b.n	8009050 <memset+0x4>

0800905c <_reclaim_reent>:
 800905c:	4b29      	ldr	r3, [pc, #164]	; (8009104 <_reclaim_reent+0xa8>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4283      	cmp	r3, r0
 8009062:	b570      	push	{r4, r5, r6, lr}
 8009064:	4604      	mov	r4, r0
 8009066:	d04b      	beq.n	8009100 <_reclaim_reent+0xa4>
 8009068:	69c3      	ldr	r3, [r0, #28]
 800906a:	b143      	cbz	r3, 800907e <_reclaim_reent+0x22>
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d144      	bne.n	80090fc <_reclaim_reent+0xa0>
 8009072:	69e3      	ldr	r3, [r4, #28]
 8009074:	6819      	ldr	r1, [r3, #0]
 8009076:	b111      	cbz	r1, 800907e <_reclaim_reent+0x22>
 8009078:	4620      	mov	r0, r4
 800907a:	f000 f879 	bl	8009170 <_free_r>
 800907e:	6961      	ldr	r1, [r4, #20]
 8009080:	b111      	cbz	r1, 8009088 <_reclaim_reent+0x2c>
 8009082:	4620      	mov	r0, r4
 8009084:	f000 f874 	bl	8009170 <_free_r>
 8009088:	69e1      	ldr	r1, [r4, #28]
 800908a:	b111      	cbz	r1, 8009092 <_reclaim_reent+0x36>
 800908c:	4620      	mov	r0, r4
 800908e:	f000 f86f 	bl	8009170 <_free_r>
 8009092:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8009094:	b111      	cbz	r1, 800909c <_reclaim_reent+0x40>
 8009096:	4620      	mov	r0, r4
 8009098:	f000 f86a 	bl	8009170 <_free_r>
 800909c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800909e:	b111      	cbz	r1, 80090a6 <_reclaim_reent+0x4a>
 80090a0:	4620      	mov	r0, r4
 80090a2:	f000 f865 	bl	8009170 <_free_r>
 80090a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80090a8:	b111      	cbz	r1, 80090b0 <_reclaim_reent+0x54>
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f860 	bl	8009170 <_free_r>
 80090b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80090b2:	b111      	cbz	r1, 80090ba <_reclaim_reent+0x5e>
 80090b4:	4620      	mov	r0, r4
 80090b6:	f000 f85b 	bl	8009170 <_free_r>
 80090ba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80090bc:	b111      	cbz	r1, 80090c4 <_reclaim_reent+0x68>
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 f856 	bl	8009170 <_free_r>
 80090c4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80090c6:	b111      	cbz	r1, 80090ce <_reclaim_reent+0x72>
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 f851 	bl	8009170 <_free_r>
 80090ce:	6a23      	ldr	r3, [r4, #32]
 80090d0:	b1b3      	cbz	r3, 8009100 <_reclaim_reent+0xa4>
 80090d2:	4620      	mov	r0, r4
 80090d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80090d8:	4718      	bx	r3
 80090da:	5949      	ldr	r1, [r1, r5]
 80090dc:	b941      	cbnz	r1, 80090f0 <_reclaim_reent+0x94>
 80090de:	3504      	adds	r5, #4
 80090e0:	69e3      	ldr	r3, [r4, #28]
 80090e2:	2d80      	cmp	r5, #128	; 0x80
 80090e4:	68d9      	ldr	r1, [r3, #12]
 80090e6:	d1f8      	bne.n	80090da <_reclaim_reent+0x7e>
 80090e8:	4620      	mov	r0, r4
 80090ea:	f000 f841 	bl	8009170 <_free_r>
 80090ee:	e7c0      	b.n	8009072 <_reclaim_reent+0x16>
 80090f0:	680e      	ldr	r6, [r1, #0]
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 f83c 	bl	8009170 <_free_r>
 80090f8:	4631      	mov	r1, r6
 80090fa:	e7ef      	b.n	80090dc <_reclaim_reent+0x80>
 80090fc:	2500      	movs	r5, #0
 80090fe:	e7ef      	b.n	80090e0 <_reclaim_reent+0x84>
 8009100:	bd70      	pop	{r4, r5, r6, pc}
 8009102:	bf00      	nop
 8009104:	200000e4 	.word	0x200000e4

08009108 <__libc_init_array>:
 8009108:	b570      	push	{r4, r5, r6, lr}
 800910a:	4d0d      	ldr	r5, [pc, #52]	; (8009140 <__libc_init_array+0x38>)
 800910c:	4c0d      	ldr	r4, [pc, #52]	; (8009144 <__libc_init_array+0x3c>)
 800910e:	1b64      	subs	r4, r4, r5
 8009110:	10a4      	asrs	r4, r4, #2
 8009112:	2600      	movs	r6, #0
 8009114:	42a6      	cmp	r6, r4
 8009116:	d109      	bne.n	800912c <__libc_init_array+0x24>
 8009118:	4d0b      	ldr	r5, [pc, #44]	; (8009148 <__libc_init_array+0x40>)
 800911a:	4c0c      	ldr	r4, [pc, #48]	; (800914c <__libc_init_array+0x44>)
 800911c:	f000 f880 	bl	8009220 <_init>
 8009120:	1b64      	subs	r4, r4, r5
 8009122:	10a4      	asrs	r4, r4, #2
 8009124:	2600      	movs	r6, #0
 8009126:	42a6      	cmp	r6, r4
 8009128:	d105      	bne.n	8009136 <__libc_init_array+0x2e>
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009130:	4798      	blx	r3
 8009132:	3601      	adds	r6, #1
 8009134:	e7ee      	b.n	8009114 <__libc_init_array+0xc>
 8009136:	f855 3b04 	ldr.w	r3, [r5], #4
 800913a:	4798      	blx	r3
 800913c:	3601      	adds	r6, #1
 800913e:	e7f2      	b.n	8009126 <__libc_init_array+0x1e>
 8009140:	08009390 	.word	0x08009390
 8009144:	08009390 	.word	0x08009390
 8009148:	08009390 	.word	0x08009390
 800914c:	08009394 	.word	0x08009394

08009150 <__retarget_lock_acquire_recursive>:
 8009150:	4770      	bx	lr

08009152 <__retarget_lock_release_recursive>:
 8009152:	4770      	bx	lr

08009154 <memcpy>:
 8009154:	440a      	add	r2, r1
 8009156:	4291      	cmp	r1, r2
 8009158:	f100 33ff 	add.w	r3, r0, #4294967295
 800915c:	d100      	bne.n	8009160 <memcpy+0xc>
 800915e:	4770      	bx	lr
 8009160:	b510      	push	{r4, lr}
 8009162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800916a:	4291      	cmp	r1, r2
 800916c:	d1f9      	bne.n	8009162 <memcpy+0xe>
 800916e:	bd10      	pop	{r4, pc}

08009170 <_free_r>:
 8009170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009172:	2900      	cmp	r1, #0
 8009174:	d044      	beq.n	8009200 <_free_r+0x90>
 8009176:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800917a:	9001      	str	r0, [sp, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f1a1 0404 	sub.w	r4, r1, #4
 8009182:	bfb8      	it	lt
 8009184:	18e4      	addlt	r4, r4, r3
 8009186:	f000 f83f 	bl	8009208 <__malloc_lock>
 800918a:	4a1e      	ldr	r2, [pc, #120]	; (8009204 <_free_r+0x94>)
 800918c:	9801      	ldr	r0, [sp, #4]
 800918e:	6813      	ldr	r3, [r2, #0]
 8009190:	b933      	cbnz	r3, 80091a0 <_free_r+0x30>
 8009192:	6063      	str	r3, [r4, #4]
 8009194:	6014      	str	r4, [r2, #0]
 8009196:	b003      	add	sp, #12
 8009198:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800919c:	f000 b83a 	b.w	8009214 <__malloc_unlock>
 80091a0:	42a3      	cmp	r3, r4
 80091a2:	d908      	bls.n	80091b6 <_free_r+0x46>
 80091a4:	6825      	ldr	r5, [r4, #0]
 80091a6:	1961      	adds	r1, r4, r5
 80091a8:	428b      	cmp	r3, r1
 80091aa:	bf01      	itttt	eq
 80091ac:	6819      	ldreq	r1, [r3, #0]
 80091ae:	685b      	ldreq	r3, [r3, #4]
 80091b0:	1949      	addeq	r1, r1, r5
 80091b2:	6021      	streq	r1, [r4, #0]
 80091b4:	e7ed      	b.n	8009192 <_free_r+0x22>
 80091b6:	461a      	mov	r2, r3
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	b10b      	cbz	r3, 80091c0 <_free_r+0x50>
 80091bc:	42a3      	cmp	r3, r4
 80091be:	d9fa      	bls.n	80091b6 <_free_r+0x46>
 80091c0:	6811      	ldr	r1, [r2, #0]
 80091c2:	1855      	adds	r5, r2, r1
 80091c4:	42a5      	cmp	r5, r4
 80091c6:	d10b      	bne.n	80091e0 <_free_r+0x70>
 80091c8:	6824      	ldr	r4, [r4, #0]
 80091ca:	4421      	add	r1, r4
 80091cc:	1854      	adds	r4, r2, r1
 80091ce:	42a3      	cmp	r3, r4
 80091d0:	6011      	str	r1, [r2, #0]
 80091d2:	d1e0      	bne.n	8009196 <_free_r+0x26>
 80091d4:	681c      	ldr	r4, [r3, #0]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	6053      	str	r3, [r2, #4]
 80091da:	440c      	add	r4, r1
 80091dc:	6014      	str	r4, [r2, #0]
 80091de:	e7da      	b.n	8009196 <_free_r+0x26>
 80091e0:	d902      	bls.n	80091e8 <_free_r+0x78>
 80091e2:	230c      	movs	r3, #12
 80091e4:	6003      	str	r3, [r0, #0]
 80091e6:	e7d6      	b.n	8009196 <_free_r+0x26>
 80091e8:	6825      	ldr	r5, [r4, #0]
 80091ea:	1961      	adds	r1, r4, r5
 80091ec:	428b      	cmp	r3, r1
 80091ee:	bf04      	itt	eq
 80091f0:	6819      	ldreq	r1, [r3, #0]
 80091f2:	685b      	ldreq	r3, [r3, #4]
 80091f4:	6063      	str	r3, [r4, #4]
 80091f6:	bf04      	itt	eq
 80091f8:	1949      	addeq	r1, r1, r5
 80091fa:	6021      	streq	r1, [r4, #0]
 80091fc:	6054      	str	r4, [r2, #4]
 80091fe:	e7ca      	b.n	8009196 <_free_r+0x26>
 8009200:	b003      	add	sp, #12
 8009202:	bd30      	pop	{r4, r5, pc}
 8009204:	20005510 	.word	0x20005510

08009208 <__malloc_lock>:
 8009208:	4801      	ldr	r0, [pc, #4]	; (8009210 <__malloc_lock+0x8>)
 800920a:	f7ff bfa1 	b.w	8009150 <__retarget_lock_acquire_recursive>
 800920e:	bf00      	nop
 8009210:	2000550c 	.word	0x2000550c

08009214 <__malloc_unlock>:
 8009214:	4801      	ldr	r0, [pc, #4]	; (800921c <__malloc_unlock+0x8>)
 8009216:	f7ff bf9c 	b.w	8009152 <__retarget_lock_release_recursive>
 800921a:	bf00      	nop
 800921c:	2000550c 	.word	0x2000550c

08009220 <_init>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr

0800922c <_fini>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr
